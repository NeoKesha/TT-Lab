//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.2.1
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace org.ogre {

public class ImColor : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal ImColor(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ImColor obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(ImColor obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~ImColor() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          ImGuiPINVOKE.delete_ImColor(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public ImVec4 Value {
    set {
      ImGuiPINVOKE.ImColor_Value_set(swigCPtr, ImVec4.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = ImGuiPINVOKE.ImColor_Value_get(swigCPtr);
      ImVec4 ret = (cPtr == global::System.IntPtr.Zero) ? null : new ImVec4(cPtr, false);
      return ret;
    } 
  }

  public ImColor() : this(ImGuiPINVOKE.new_ImColor__SWIG_0(), true) {
  }

  public ImColor(float r, float g, float b, float a) : this(ImGuiPINVOKE.new_ImColor__SWIG_1(r, g, b, a), true) {
  }

  public ImColor(float r, float g, float b) : this(ImGuiPINVOKE.new_ImColor__SWIG_2(r, g, b), true) {
  }

  public ImColor(ImVec4 col) : this(ImGuiPINVOKE.new_ImColor__SWIG_3(ImVec4.getCPtr(col)), true) {
    if (ImGuiPINVOKE.SWIGPendingException.Pending) throw ImGuiPINVOKE.SWIGPendingException.Retrieve();
  }

  public ImColor(int r, int g, int b, int a) : this(ImGuiPINVOKE.new_ImColor__SWIG_4(r, g, b, a), true) {
  }

  public ImColor(int r, int g, int b) : this(ImGuiPINVOKE.new_ImColor__SWIG_5(r, g, b), true) {
  }

  public ImColor(uint rgba) : this(ImGuiPINVOKE.new_ImColor__SWIG_6(rgba), true) {
  }

  public void SetHSV(float h, float s, float v, float a) {
    ImGuiPINVOKE.ImColor_SetHSV__SWIG_0(swigCPtr, h, s, v, a);
  }

  public void SetHSV(float h, float s, float v) {
    ImGuiPINVOKE.ImColor_SetHSV__SWIG_1(swigCPtr, h, s, v);
  }

  public static ImColor HSV(float h, float s, float v, float a) {
    ImColor ret = new ImColor(ImGuiPINVOKE.ImColor_HSV__SWIG_0(h, s, v, a), true);
    return ret;
  }

  public static ImColor HSV(float h, float s, float v) {
    ImColor ret = new ImColor(ImGuiPINVOKE.ImColor_HSV__SWIG_1(h, s, v), true);
    return ret;
  }

}

}
