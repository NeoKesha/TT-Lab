//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.2.1
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace org.ogre {

public class ImDrawData : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal ImDrawData(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ImDrawData obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(ImDrawData obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~ImDrawData() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          ImGuiPINVOKE.delete_ImDrawData(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public bool Valid {
    set {
      ImGuiPINVOKE.ImDrawData_Valid_set(swigCPtr, value);
    } 
    get {
      bool ret = ImGuiPINVOKE.ImDrawData_Valid_get(swigCPtr);
      return ret;
    } 
  }

  public int CmdListsCount {
    set {
      ImGuiPINVOKE.ImDrawData_CmdListsCount_set(swigCPtr, value);
    } 
    get {
      int ret = ImGuiPINVOKE.ImDrawData_CmdListsCount_get(swigCPtr);
      return ret;
    } 
  }

  public int TotalIdxCount {
    set {
      ImGuiPINVOKE.ImDrawData_TotalIdxCount_set(swigCPtr, value);
    } 
    get {
      int ret = ImGuiPINVOKE.ImDrawData_TotalIdxCount_get(swigCPtr);
      return ret;
    } 
  }

  public int TotalVtxCount {
    set {
      ImGuiPINVOKE.ImDrawData_TotalVtxCount_set(swigCPtr, value);
    } 
    get {
      int ret = ImGuiPINVOKE.ImDrawData_TotalVtxCount_get(swigCPtr);
      return ret;
    } 
  }

  public SWIGTYPE_p_ImVectorT_ImDrawList_p_t CmdLists {
    set {
      ImGuiPINVOKE.ImDrawData_CmdLists_set(swigCPtr, SWIGTYPE_p_ImVectorT_ImDrawList_p_t.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = ImGuiPINVOKE.ImDrawData_CmdLists_get(swigCPtr);
      SWIGTYPE_p_ImVectorT_ImDrawList_p_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_ImVectorT_ImDrawList_p_t(cPtr, false);
      return ret;
    } 
  }

  public ImVec2 DisplayPos {
    set {
      ImGuiPINVOKE.ImDrawData_DisplayPos_set(swigCPtr, ImVec2.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = ImGuiPINVOKE.ImDrawData_DisplayPos_get(swigCPtr);
      ImVec2 ret = (cPtr == global::System.IntPtr.Zero) ? null : new ImVec2(cPtr, false);
      return ret;
    } 
  }

  public ImVec2 DisplaySize {
    set {
      ImGuiPINVOKE.ImDrawData_DisplaySize_set(swigCPtr, ImVec2.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = ImGuiPINVOKE.ImDrawData_DisplaySize_get(swigCPtr);
      ImVec2 ret = (cPtr == global::System.IntPtr.Zero) ? null : new ImVec2(cPtr, false);
      return ret;
    } 
  }

  public ImVec2 FramebufferScale {
    set {
      ImGuiPINVOKE.ImDrawData_FramebufferScale_set(swigCPtr, ImVec2.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = ImGuiPINVOKE.ImDrawData_FramebufferScale_get(swigCPtr);
      ImVec2 ret = (cPtr == global::System.IntPtr.Zero) ? null : new ImVec2(cPtr, false);
      return ret;
    } 
  }

  public ImGuiViewport OwnerViewport {
    set {
      ImGuiPINVOKE.ImDrawData_OwnerViewport_set(swigCPtr, ImGuiViewport.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = ImGuiPINVOKE.ImDrawData_OwnerViewport_get(swigCPtr);
      ImGuiViewport ret = (cPtr == global::System.IntPtr.Zero) ? null : new ImGuiViewport(cPtr, false);
      return ret;
    } 
  }

  public ImDrawData() : this(ImGuiPINVOKE.new_ImDrawData(), true) {
  }

  public void Clear() {
    ImGuiPINVOKE.ImDrawData_Clear(swigCPtr);
  }

  public void AddDrawList(ImDrawList draw_list) {
    ImGuiPINVOKE.ImDrawData_AddDrawList(swigCPtr, ImDrawList.getCPtr(draw_list));
  }

  public void DeIndexAllBuffers() {
    ImGuiPINVOKE.ImDrawData_DeIndexAllBuffers(swigCPtr);
  }

  public void ScaleClipRects(ImVec2 fb_scale) {
    ImGuiPINVOKE.ImDrawData_ScaleClipRects(swigCPtr, ImVec2.getCPtr(fb_scale));
    if (ImGuiPINVOKE.SWIGPendingException.Pending) throw ImGuiPINVOKE.SWIGPendingException.Retrieve();
  }

}

}
