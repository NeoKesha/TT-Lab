//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.2.1
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace org.ogre {

public class ImDrawList : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal ImDrawList(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ImDrawList obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(ImDrawList obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~ImDrawList() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          ImGuiPINVOKE.delete_ImDrawList(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public SWIGTYPE_p_ImVectorT_ImDrawCmd_t CmdBuffer {
    set {
      ImGuiPINVOKE.ImDrawList_CmdBuffer_set(swigCPtr, SWIGTYPE_p_ImVectorT_ImDrawCmd_t.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = ImGuiPINVOKE.ImDrawList_CmdBuffer_get(swigCPtr);
      SWIGTYPE_p_ImVectorT_ImDrawCmd_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_ImVectorT_ImDrawCmd_t(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_ImVectorT_unsigned_short_t IdxBuffer {
    set {
      ImGuiPINVOKE.ImDrawList_IdxBuffer_set(swigCPtr, SWIGTYPE_p_ImVectorT_unsigned_short_t.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = ImGuiPINVOKE.ImDrawList_IdxBuffer_get(swigCPtr);
      SWIGTYPE_p_ImVectorT_unsigned_short_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_ImVectorT_unsigned_short_t(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_ImVectorT_ImDrawVert_t VtxBuffer {
    set {
      ImGuiPINVOKE.ImDrawList_VtxBuffer_set(swigCPtr, SWIGTYPE_p_ImVectorT_ImDrawVert_t.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = ImGuiPINVOKE.ImDrawList_VtxBuffer_get(swigCPtr);
      SWIGTYPE_p_ImVectorT_ImDrawVert_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_ImVectorT_ImDrawVert_t(cPtr, false);
      return ret;
    } 
  }

  public int Flags {
    set {
      ImGuiPINVOKE.ImDrawList_Flags_set(swigCPtr, value);
    } 
    get {
      int ret = ImGuiPINVOKE.ImDrawList_Flags_get(swigCPtr);
      return ret;
    } 
  }

  public uint _VtxCurrentIdx {
    set {
      ImGuiPINVOKE.ImDrawList__VtxCurrentIdx_set(swigCPtr, value);
    } 
    get {
      uint ret = ImGuiPINVOKE.ImDrawList__VtxCurrentIdx_get(swigCPtr);
      return ret;
    } 
  }

  public SWIGTYPE_p_ImDrawListSharedData _Data {
    set {
      ImGuiPINVOKE.ImDrawList__Data_set(swigCPtr, SWIGTYPE_p_ImDrawListSharedData.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = ImGuiPINVOKE.ImDrawList__Data_get(swigCPtr);
      SWIGTYPE_p_ImDrawListSharedData ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_ImDrawListSharedData(cPtr, false);
      return ret;
    } 
  }

  public ImDrawVert _VtxWritePtr {
    set {
      ImGuiPINVOKE.ImDrawList__VtxWritePtr_set(swigCPtr, ImDrawVert.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = ImGuiPINVOKE.ImDrawList__VtxWritePtr_get(swigCPtr);
      ImDrawVert ret = (cPtr == global::System.IntPtr.Zero) ? null : new ImDrawVert(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_unsigned_short _IdxWritePtr {
    set {
      ImGuiPINVOKE.ImDrawList__IdxWritePtr_set(swigCPtr, SWIGTYPE_p_unsigned_short.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = ImGuiPINVOKE.ImDrawList__IdxWritePtr_get(swigCPtr);
      SWIGTYPE_p_unsigned_short ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_unsigned_short(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_ImVectorT_ImVec2_t _Path {
    set {
      ImGuiPINVOKE.ImDrawList__Path_set(swigCPtr, SWIGTYPE_p_ImVectorT_ImVec2_t.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = ImGuiPINVOKE.ImDrawList__Path_get(swigCPtr);
      SWIGTYPE_p_ImVectorT_ImVec2_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_ImVectorT_ImVec2_t(cPtr, false);
      return ret;
    } 
  }

  public ImDrawCmdHeader _CmdHeader {
    set {
      ImGuiPINVOKE.ImDrawList__CmdHeader_set(swigCPtr, ImDrawCmdHeader.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = ImGuiPINVOKE.ImDrawList__CmdHeader_get(swigCPtr);
      ImDrawCmdHeader ret = (cPtr == global::System.IntPtr.Zero) ? null : new ImDrawCmdHeader(cPtr, false);
      return ret;
    } 
  }

  public ImDrawListSplitter _Splitter {
    set {
      ImGuiPINVOKE.ImDrawList__Splitter_set(swigCPtr, ImDrawListSplitter.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = ImGuiPINVOKE.ImDrawList__Splitter_get(swigCPtr);
      ImDrawListSplitter ret = (cPtr == global::System.IntPtr.Zero) ? null : new ImDrawListSplitter(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_ImVectorT_ImVec4_t _ClipRectStack {
    set {
      ImGuiPINVOKE.ImDrawList__ClipRectStack_set(swigCPtr, SWIGTYPE_p_ImVectorT_ImVec4_t.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = ImGuiPINVOKE.ImDrawList__ClipRectStack_get(swigCPtr);
      SWIGTYPE_p_ImVectorT_ImVec4_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_ImVectorT_ImVec4_t(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_ImVectorT_void_p_t _TextureIdStack {
    set {
      ImGuiPINVOKE.ImDrawList__TextureIdStack_set(swigCPtr, SWIGTYPE_p_ImVectorT_void_p_t.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = ImGuiPINVOKE.ImDrawList__TextureIdStack_get(swigCPtr);
      SWIGTYPE_p_ImVectorT_void_p_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_ImVectorT_void_p_t(cPtr, false);
      return ret;
    } 
  }

  public float _FringeScale {
    set {
      ImGuiPINVOKE.ImDrawList__FringeScale_set(swigCPtr, value);
    } 
    get {
      float ret = ImGuiPINVOKE.ImDrawList__FringeScale_get(swigCPtr);
      return ret;
    } 
  }

  public string _OwnerName {
    set {
      ImGuiPINVOKE.ImDrawList__OwnerName_set(swigCPtr, value);
    } 
    get {
      string ret = ImGuiPINVOKE.ImDrawList__OwnerName_get(swigCPtr);
      return ret;
    } 
  }

  public ImDrawList(SWIGTYPE_p_ImDrawListSharedData shared_data) : this(ImGuiPINVOKE.new_ImDrawList(SWIGTYPE_p_ImDrawListSharedData.getCPtr(shared_data)), true) {
  }

  public void PushClipRect(ImVec2 clip_rect_min, ImVec2 clip_rect_max, bool intersect_with_current_clip_rect) {
    ImGuiPINVOKE.ImDrawList_PushClipRect__SWIG_0(swigCPtr, ImVec2.getCPtr(clip_rect_min), ImVec2.getCPtr(clip_rect_max), intersect_with_current_clip_rect);
    if (ImGuiPINVOKE.SWIGPendingException.Pending) throw ImGuiPINVOKE.SWIGPendingException.Retrieve();
  }

  public void PushClipRect(ImVec2 clip_rect_min, ImVec2 clip_rect_max) {
    ImGuiPINVOKE.ImDrawList_PushClipRect__SWIG_1(swigCPtr, ImVec2.getCPtr(clip_rect_min), ImVec2.getCPtr(clip_rect_max));
    if (ImGuiPINVOKE.SWIGPendingException.Pending) throw ImGuiPINVOKE.SWIGPendingException.Retrieve();
  }

  public void PushClipRectFullScreen() {
    ImGuiPINVOKE.ImDrawList_PushClipRectFullScreen(swigCPtr);
  }

  public void PopClipRect() {
    ImGuiPINVOKE.ImDrawList_PopClipRect(swigCPtr);
  }

  public void PushTextureID(SWIGTYPE_p_void texture_id) {
    ImGuiPINVOKE.ImDrawList_PushTextureID(swigCPtr, SWIGTYPE_p_void.getCPtr(texture_id));
  }

  public void PopTextureID() {
    ImGuiPINVOKE.ImDrawList_PopTextureID(swigCPtr);
  }

  public ImVec2 GetClipRectMin() {
    ImVec2 ret = new ImVec2(ImGuiPINVOKE.ImDrawList_GetClipRectMin(swigCPtr), true);
    return ret;
  }

  public ImVec2 GetClipRectMax() {
    ImVec2 ret = new ImVec2(ImGuiPINVOKE.ImDrawList_GetClipRectMax(swigCPtr), true);
    return ret;
  }

  public void AddLine(ImVec2 p1, ImVec2 p2, uint col, float thickness) {
    ImGuiPINVOKE.ImDrawList_AddLine__SWIG_0(swigCPtr, ImVec2.getCPtr(p1), ImVec2.getCPtr(p2), col, thickness);
    if (ImGuiPINVOKE.SWIGPendingException.Pending) throw ImGuiPINVOKE.SWIGPendingException.Retrieve();
  }

  public void AddLine(ImVec2 p1, ImVec2 p2, uint col) {
    ImGuiPINVOKE.ImDrawList_AddLine__SWIG_1(swigCPtr, ImVec2.getCPtr(p1), ImVec2.getCPtr(p2), col);
    if (ImGuiPINVOKE.SWIGPendingException.Pending) throw ImGuiPINVOKE.SWIGPendingException.Retrieve();
  }

  public void AddRect(ImVec2 p_min, ImVec2 p_max, uint col, float rounding, int flags, float thickness) {
    ImGuiPINVOKE.ImDrawList_AddRect__SWIG_0(swigCPtr, ImVec2.getCPtr(p_min), ImVec2.getCPtr(p_max), col, rounding, flags, thickness);
    if (ImGuiPINVOKE.SWIGPendingException.Pending) throw ImGuiPINVOKE.SWIGPendingException.Retrieve();
  }

  public void AddRect(ImVec2 p_min, ImVec2 p_max, uint col, float rounding, int flags) {
    ImGuiPINVOKE.ImDrawList_AddRect__SWIG_1(swigCPtr, ImVec2.getCPtr(p_min), ImVec2.getCPtr(p_max), col, rounding, flags);
    if (ImGuiPINVOKE.SWIGPendingException.Pending) throw ImGuiPINVOKE.SWIGPendingException.Retrieve();
  }

  public void AddRect(ImVec2 p_min, ImVec2 p_max, uint col, float rounding) {
    ImGuiPINVOKE.ImDrawList_AddRect__SWIG_2(swigCPtr, ImVec2.getCPtr(p_min), ImVec2.getCPtr(p_max), col, rounding);
    if (ImGuiPINVOKE.SWIGPendingException.Pending) throw ImGuiPINVOKE.SWIGPendingException.Retrieve();
  }

  public void AddRect(ImVec2 p_min, ImVec2 p_max, uint col) {
    ImGuiPINVOKE.ImDrawList_AddRect__SWIG_3(swigCPtr, ImVec2.getCPtr(p_min), ImVec2.getCPtr(p_max), col);
    if (ImGuiPINVOKE.SWIGPendingException.Pending) throw ImGuiPINVOKE.SWIGPendingException.Retrieve();
  }

  public void AddRectFilled(ImVec2 p_min, ImVec2 p_max, uint col, float rounding, int flags) {
    ImGuiPINVOKE.ImDrawList_AddRectFilled__SWIG_0(swigCPtr, ImVec2.getCPtr(p_min), ImVec2.getCPtr(p_max), col, rounding, flags);
    if (ImGuiPINVOKE.SWIGPendingException.Pending) throw ImGuiPINVOKE.SWIGPendingException.Retrieve();
  }

  public void AddRectFilled(ImVec2 p_min, ImVec2 p_max, uint col, float rounding) {
    ImGuiPINVOKE.ImDrawList_AddRectFilled__SWIG_1(swigCPtr, ImVec2.getCPtr(p_min), ImVec2.getCPtr(p_max), col, rounding);
    if (ImGuiPINVOKE.SWIGPendingException.Pending) throw ImGuiPINVOKE.SWIGPendingException.Retrieve();
  }

  public void AddRectFilled(ImVec2 p_min, ImVec2 p_max, uint col) {
    ImGuiPINVOKE.ImDrawList_AddRectFilled__SWIG_2(swigCPtr, ImVec2.getCPtr(p_min), ImVec2.getCPtr(p_max), col);
    if (ImGuiPINVOKE.SWIGPendingException.Pending) throw ImGuiPINVOKE.SWIGPendingException.Retrieve();
  }

  public void AddRectFilledMultiColor(ImVec2 p_min, ImVec2 p_max, uint col_upr_left, uint col_upr_right, uint col_bot_right, uint col_bot_left) {
    ImGuiPINVOKE.ImDrawList_AddRectFilledMultiColor(swigCPtr, ImVec2.getCPtr(p_min), ImVec2.getCPtr(p_max), col_upr_left, col_upr_right, col_bot_right, col_bot_left);
    if (ImGuiPINVOKE.SWIGPendingException.Pending) throw ImGuiPINVOKE.SWIGPendingException.Retrieve();
  }

  public void AddQuad(ImVec2 p1, ImVec2 p2, ImVec2 p3, ImVec2 p4, uint col, float thickness) {
    ImGuiPINVOKE.ImDrawList_AddQuad__SWIG_0(swigCPtr, ImVec2.getCPtr(p1), ImVec2.getCPtr(p2), ImVec2.getCPtr(p3), ImVec2.getCPtr(p4), col, thickness);
    if (ImGuiPINVOKE.SWIGPendingException.Pending) throw ImGuiPINVOKE.SWIGPendingException.Retrieve();
  }

  public void AddQuad(ImVec2 p1, ImVec2 p2, ImVec2 p3, ImVec2 p4, uint col) {
    ImGuiPINVOKE.ImDrawList_AddQuad__SWIG_1(swigCPtr, ImVec2.getCPtr(p1), ImVec2.getCPtr(p2), ImVec2.getCPtr(p3), ImVec2.getCPtr(p4), col);
    if (ImGuiPINVOKE.SWIGPendingException.Pending) throw ImGuiPINVOKE.SWIGPendingException.Retrieve();
  }

  public void AddQuadFilled(ImVec2 p1, ImVec2 p2, ImVec2 p3, ImVec2 p4, uint col) {
    ImGuiPINVOKE.ImDrawList_AddQuadFilled(swigCPtr, ImVec2.getCPtr(p1), ImVec2.getCPtr(p2), ImVec2.getCPtr(p3), ImVec2.getCPtr(p4), col);
    if (ImGuiPINVOKE.SWIGPendingException.Pending) throw ImGuiPINVOKE.SWIGPendingException.Retrieve();
  }

  public void AddTriangle(ImVec2 p1, ImVec2 p2, ImVec2 p3, uint col, float thickness) {
    ImGuiPINVOKE.ImDrawList_AddTriangle__SWIG_0(swigCPtr, ImVec2.getCPtr(p1), ImVec2.getCPtr(p2), ImVec2.getCPtr(p3), col, thickness);
    if (ImGuiPINVOKE.SWIGPendingException.Pending) throw ImGuiPINVOKE.SWIGPendingException.Retrieve();
  }

  public void AddTriangle(ImVec2 p1, ImVec2 p2, ImVec2 p3, uint col) {
    ImGuiPINVOKE.ImDrawList_AddTriangle__SWIG_1(swigCPtr, ImVec2.getCPtr(p1), ImVec2.getCPtr(p2), ImVec2.getCPtr(p3), col);
    if (ImGuiPINVOKE.SWIGPendingException.Pending) throw ImGuiPINVOKE.SWIGPendingException.Retrieve();
  }

  public void AddTriangleFilled(ImVec2 p1, ImVec2 p2, ImVec2 p3, uint col) {
    ImGuiPINVOKE.ImDrawList_AddTriangleFilled(swigCPtr, ImVec2.getCPtr(p1), ImVec2.getCPtr(p2), ImVec2.getCPtr(p3), col);
    if (ImGuiPINVOKE.SWIGPendingException.Pending) throw ImGuiPINVOKE.SWIGPendingException.Retrieve();
  }

  public void AddCircle(ImVec2 center, float radius, uint col, int num_segments, float thickness) {
    ImGuiPINVOKE.ImDrawList_AddCircle__SWIG_0(swigCPtr, ImVec2.getCPtr(center), radius, col, num_segments, thickness);
    if (ImGuiPINVOKE.SWIGPendingException.Pending) throw ImGuiPINVOKE.SWIGPendingException.Retrieve();
  }

  public void AddCircle(ImVec2 center, float radius, uint col, int num_segments) {
    ImGuiPINVOKE.ImDrawList_AddCircle__SWIG_1(swigCPtr, ImVec2.getCPtr(center), radius, col, num_segments);
    if (ImGuiPINVOKE.SWIGPendingException.Pending) throw ImGuiPINVOKE.SWIGPendingException.Retrieve();
  }

  public void AddCircle(ImVec2 center, float radius, uint col) {
    ImGuiPINVOKE.ImDrawList_AddCircle__SWIG_2(swigCPtr, ImVec2.getCPtr(center), radius, col);
    if (ImGuiPINVOKE.SWIGPendingException.Pending) throw ImGuiPINVOKE.SWIGPendingException.Retrieve();
  }

  public void AddCircleFilled(ImVec2 center, float radius, uint col, int num_segments) {
    ImGuiPINVOKE.ImDrawList_AddCircleFilled__SWIG_0(swigCPtr, ImVec2.getCPtr(center), radius, col, num_segments);
    if (ImGuiPINVOKE.SWIGPendingException.Pending) throw ImGuiPINVOKE.SWIGPendingException.Retrieve();
  }

  public void AddCircleFilled(ImVec2 center, float radius, uint col) {
    ImGuiPINVOKE.ImDrawList_AddCircleFilled__SWIG_1(swigCPtr, ImVec2.getCPtr(center), radius, col);
    if (ImGuiPINVOKE.SWIGPendingException.Pending) throw ImGuiPINVOKE.SWIGPendingException.Retrieve();
  }

  public void AddNgon(ImVec2 center, float radius, uint col, int num_segments, float thickness) {
    ImGuiPINVOKE.ImDrawList_AddNgon__SWIG_0(swigCPtr, ImVec2.getCPtr(center), radius, col, num_segments, thickness);
    if (ImGuiPINVOKE.SWIGPendingException.Pending) throw ImGuiPINVOKE.SWIGPendingException.Retrieve();
  }

  public void AddNgon(ImVec2 center, float radius, uint col, int num_segments) {
    ImGuiPINVOKE.ImDrawList_AddNgon__SWIG_1(swigCPtr, ImVec2.getCPtr(center), radius, col, num_segments);
    if (ImGuiPINVOKE.SWIGPendingException.Pending) throw ImGuiPINVOKE.SWIGPendingException.Retrieve();
  }

  public void AddNgonFilled(ImVec2 center, float radius, uint col, int num_segments) {
    ImGuiPINVOKE.ImDrawList_AddNgonFilled(swigCPtr, ImVec2.getCPtr(center), radius, col, num_segments);
    if (ImGuiPINVOKE.SWIGPendingException.Pending) throw ImGuiPINVOKE.SWIGPendingException.Retrieve();
  }

  public void AddEllipse(ImVec2 center, ImVec2 radius, uint col, float rot, int num_segments, float thickness) {
    ImGuiPINVOKE.ImDrawList_AddEllipse__SWIG_0(swigCPtr, ImVec2.getCPtr(center), ImVec2.getCPtr(radius), col, rot, num_segments, thickness);
    if (ImGuiPINVOKE.SWIGPendingException.Pending) throw ImGuiPINVOKE.SWIGPendingException.Retrieve();
  }

  public void AddEllipse(ImVec2 center, ImVec2 radius, uint col, float rot, int num_segments) {
    ImGuiPINVOKE.ImDrawList_AddEllipse__SWIG_1(swigCPtr, ImVec2.getCPtr(center), ImVec2.getCPtr(radius), col, rot, num_segments);
    if (ImGuiPINVOKE.SWIGPendingException.Pending) throw ImGuiPINVOKE.SWIGPendingException.Retrieve();
  }

  public void AddEllipse(ImVec2 center, ImVec2 radius, uint col, float rot) {
    ImGuiPINVOKE.ImDrawList_AddEllipse__SWIG_2(swigCPtr, ImVec2.getCPtr(center), ImVec2.getCPtr(radius), col, rot);
    if (ImGuiPINVOKE.SWIGPendingException.Pending) throw ImGuiPINVOKE.SWIGPendingException.Retrieve();
  }

  public void AddEllipse(ImVec2 center, ImVec2 radius, uint col) {
    ImGuiPINVOKE.ImDrawList_AddEllipse__SWIG_3(swigCPtr, ImVec2.getCPtr(center), ImVec2.getCPtr(radius), col);
    if (ImGuiPINVOKE.SWIGPendingException.Pending) throw ImGuiPINVOKE.SWIGPendingException.Retrieve();
  }

  public void AddEllipseFilled(ImVec2 center, ImVec2 radius, uint col, float rot, int num_segments) {
    ImGuiPINVOKE.ImDrawList_AddEllipseFilled__SWIG_0(swigCPtr, ImVec2.getCPtr(center), ImVec2.getCPtr(radius), col, rot, num_segments);
    if (ImGuiPINVOKE.SWIGPendingException.Pending) throw ImGuiPINVOKE.SWIGPendingException.Retrieve();
  }

  public void AddEllipseFilled(ImVec2 center, ImVec2 radius, uint col, float rot) {
    ImGuiPINVOKE.ImDrawList_AddEllipseFilled__SWIG_1(swigCPtr, ImVec2.getCPtr(center), ImVec2.getCPtr(radius), col, rot);
    if (ImGuiPINVOKE.SWIGPendingException.Pending) throw ImGuiPINVOKE.SWIGPendingException.Retrieve();
  }

  public void AddEllipseFilled(ImVec2 center, ImVec2 radius, uint col) {
    ImGuiPINVOKE.ImDrawList_AddEllipseFilled__SWIG_2(swigCPtr, ImVec2.getCPtr(center), ImVec2.getCPtr(radius), col);
    if (ImGuiPINVOKE.SWIGPendingException.Pending) throw ImGuiPINVOKE.SWIGPendingException.Retrieve();
  }

  public void AddText(ImVec2 pos, uint col, string text_begin, string text_end) {
    ImGuiPINVOKE.ImDrawList_AddText__SWIG_0(swigCPtr, ImVec2.getCPtr(pos), col, text_begin, text_end);
    if (ImGuiPINVOKE.SWIGPendingException.Pending) throw ImGuiPINVOKE.SWIGPendingException.Retrieve();
  }

  public void AddText(ImVec2 pos, uint col, string text_begin) {
    ImGuiPINVOKE.ImDrawList_AddText__SWIG_1(swigCPtr, ImVec2.getCPtr(pos), col, text_begin);
    if (ImGuiPINVOKE.SWIGPendingException.Pending) throw ImGuiPINVOKE.SWIGPendingException.Retrieve();
  }

  public void AddText(ImFont font, float font_size, ImVec2 pos, uint col, string text_begin, string text_end, float wrap_width, ImVec4 cpu_fine_clip_rect) {
    ImGuiPINVOKE.ImDrawList_AddText__SWIG_2(swigCPtr, ImFont.getCPtr(font), font_size, ImVec2.getCPtr(pos), col, text_begin, text_end, wrap_width, ImVec4.getCPtr(cpu_fine_clip_rect));
    if (ImGuiPINVOKE.SWIGPendingException.Pending) throw ImGuiPINVOKE.SWIGPendingException.Retrieve();
  }

  public void AddText(ImFont font, float font_size, ImVec2 pos, uint col, string text_begin, string text_end, float wrap_width) {
    ImGuiPINVOKE.ImDrawList_AddText__SWIG_3(swigCPtr, ImFont.getCPtr(font), font_size, ImVec2.getCPtr(pos), col, text_begin, text_end, wrap_width);
    if (ImGuiPINVOKE.SWIGPendingException.Pending) throw ImGuiPINVOKE.SWIGPendingException.Retrieve();
  }

  public void AddText(ImFont font, float font_size, ImVec2 pos, uint col, string text_begin, string text_end) {
    ImGuiPINVOKE.ImDrawList_AddText__SWIG_4(swigCPtr, ImFont.getCPtr(font), font_size, ImVec2.getCPtr(pos), col, text_begin, text_end);
    if (ImGuiPINVOKE.SWIGPendingException.Pending) throw ImGuiPINVOKE.SWIGPendingException.Retrieve();
  }

  public void AddText(ImFont font, float font_size, ImVec2 pos, uint col, string text_begin) {
    ImGuiPINVOKE.ImDrawList_AddText__SWIG_5(swigCPtr, ImFont.getCPtr(font), font_size, ImVec2.getCPtr(pos), col, text_begin);
    if (ImGuiPINVOKE.SWIGPendingException.Pending) throw ImGuiPINVOKE.SWIGPendingException.Retrieve();
  }

  public void AddBezierCubic(ImVec2 p1, ImVec2 p2, ImVec2 p3, ImVec2 p4, uint col, float thickness, int num_segments) {
    ImGuiPINVOKE.ImDrawList_AddBezierCubic__SWIG_0(swigCPtr, ImVec2.getCPtr(p1), ImVec2.getCPtr(p2), ImVec2.getCPtr(p3), ImVec2.getCPtr(p4), col, thickness, num_segments);
    if (ImGuiPINVOKE.SWIGPendingException.Pending) throw ImGuiPINVOKE.SWIGPendingException.Retrieve();
  }

  public void AddBezierCubic(ImVec2 p1, ImVec2 p2, ImVec2 p3, ImVec2 p4, uint col, float thickness) {
    ImGuiPINVOKE.ImDrawList_AddBezierCubic__SWIG_1(swigCPtr, ImVec2.getCPtr(p1), ImVec2.getCPtr(p2), ImVec2.getCPtr(p3), ImVec2.getCPtr(p4), col, thickness);
    if (ImGuiPINVOKE.SWIGPendingException.Pending) throw ImGuiPINVOKE.SWIGPendingException.Retrieve();
  }

  public void AddBezierQuadratic(ImVec2 p1, ImVec2 p2, ImVec2 p3, uint col, float thickness, int num_segments) {
    ImGuiPINVOKE.ImDrawList_AddBezierQuadratic__SWIG_0(swigCPtr, ImVec2.getCPtr(p1), ImVec2.getCPtr(p2), ImVec2.getCPtr(p3), col, thickness, num_segments);
    if (ImGuiPINVOKE.SWIGPendingException.Pending) throw ImGuiPINVOKE.SWIGPendingException.Retrieve();
  }

  public void AddBezierQuadratic(ImVec2 p1, ImVec2 p2, ImVec2 p3, uint col, float thickness) {
    ImGuiPINVOKE.ImDrawList_AddBezierQuadratic__SWIG_1(swigCPtr, ImVec2.getCPtr(p1), ImVec2.getCPtr(p2), ImVec2.getCPtr(p3), col, thickness);
    if (ImGuiPINVOKE.SWIGPendingException.Pending) throw ImGuiPINVOKE.SWIGPendingException.Retrieve();
  }

  public void AddPolyline(ImVec2 points, int num_points, uint col, int flags, float thickness) {
    ImGuiPINVOKE.ImDrawList_AddPolyline(swigCPtr, ImVec2.getCPtr(points), num_points, col, flags, thickness);
  }

  public void AddConvexPolyFilled(ImVec2 points, int num_points, uint col) {
    ImGuiPINVOKE.ImDrawList_AddConvexPolyFilled(swigCPtr, ImVec2.getCPtr(points), num_points, col);
  }

  public void AddConcavePolyFilled(ImVec2 points, int num_points, uint col) {
    ImGuiPINVOKE.ImDrawList_AddConcavePolyFilled(swigCPtr, ImVec2.getCPtr(points), num_points, col);
  }

  public void AddImage(SWIGTYPE_p_void user_texture_id, ImVec2 p_min, ImVec2 p_max, ImVec2 uv_min, ImVec2 uv_max, uint col) {
    ImGuiPINVOKE.ImDrawList_AddImage__SWIG_0(swigCPtr, SWIGTYPE_p_void.getCPtr(user_texture_id), ImVec2.getCPtr(p_min), ImVec2.getCPtr(p_max), ImVec2.getCPtr(uv_min), ImVec2.getCPtr(uv_max), col);
    if (ImGuiPINVOKE.SWIGPendingException.Pending) throw ImGuiPINVOKE.SWIGPendingException.Retrieve();
  }

  public void AddImage(SWIGTYPE_p_void user_texture_id, ImVec2 p_min, ImVec2 p_max, ImVec2 uv_min, ImVec2 uv_max) {
    ImGuiPINVOKE.ImDrawList_AddImage__SWIG_1(swigCPtr, SWIGTYPE_p_void.getCPtr(user_texture_id), ImVec2.getCPtr(p_min), ImVec2.getCPtr(p_max), ImVec2.getCPtr(uv_min), ImVec2.getCPtr(uv_max));
    if (ImGuiPINVOKE.SWIGPendingException.Pending) throw ImGuiPINVOKE.SWIGPendingException.Retrieve();
  }

  public void AddImage(SWIGTYPE_p_void user_texture_id, ImVec2 p_min, ImVec2 p_max, ImVec2 uv_min) {
    ImGuiPINVOKE.ImDrawList_AddImage__SWIG_2(swigCPtr, SWIGTYPE_p_void.getCPtr(user_texture_id), ImVec2.getCPtr(p_min), ImVec2.getCPtr(p_max), ImVec2.getCPtr(uv_min));
    if (ImGuiPINVOKE.SWIGPendingException.Pending) throw ImGuiPINVOKE.SWIGPendingException.Retrieve();
  }

  public void AddImage(SWIGTYPE_p_void user_texture_id, ImVec2 p_min, ImVec2 p_max) {
    ImGuiPINVOKE.ImDrawList_AddImage__SWIG_3(swigCPtr, SWIGTYPE_p_void.getCPtr(user_texture_id), ImVec2.getCPtr(p_min), ImVec2.getCPtr(p_max));
    if (ImGuiPINVOKE.SWIGPendingException.Pending) throw ImGuiPINVOKE.SWIGPendingException.Retrieve();
  }

  public void AddImageQuad(SWIGTYPE_p_void user_texture_id, ImVec2 p1, ImVec2 p2, ImVec2 p3, ImVec2 p4, ImVec2 uv1, ImVec2 uv2, ImVec2 uv3, ImVec2 uv4, uint col) {
    ImGuiPINVOKE.ImDrawList_AddImageQuad__SWIG_0(swigCPtr, SWIGTYPE_p_void.getCPtr(user_texture_id), ImVec2.getCPtr(p1), ImVec2.getCPtr(p2), ImVec2.getCPtr(p3), ImVec2.getCPtr(p4), ImVec2.getCPtr(uv1), ImVec2.getCPtr(uv2), ImVec2.getCPtr(uv3), ImVec2.getCPtr(uv4), col);
    if (ImGuiPINVOKE.SWIGPendingException.Pending) throw ImGuiPINVOKE.SWIGPendingException.Retrieve();
  }

  public void AddImageQuad(SWIGTYPE_p_void user_texture_id, ImVec2 p1, ImVec2 p2, ImVec2 p3, ImVec2 p4, ImVec2 uv1, ImVec2 uv2, ImVec2 uv3, ImVec2 uv4) {
    ImGuiPINVOKE.ImDrawList_AddImageQuad__SWIG_1(swigCPtr, SWIGTYPE_p_void.getCPtr(user_texture_id), ImVec2.getCPtr(p1), ImVec2.getCPtr(p2), ImVec2.getCPtr(p3), ImVec2.getCPtr(p4), ImVec2.getCPtr(uv1), ImVec2.getCPtr(uv2), ImVec2.getCPtr(uv3), ImVec2.getCPtr(uv4));
    if (ImGuiPINVOKE.SWIGPendingException.Pending) throw ImGuiPINVOKE.SWIGPendingException.Retrieve();
  }

  public void AddImageQuad(SWIGTYPE_p_void user_texture_id, ImVec2 p1, ImVec2 p2, ImVec2 p3, ImVec2 p4, ImVec2 uv1, ImVec2 uv2, ImVec2 uv3) {
    ImGuiPINVOKE.ImDrawList_AddImageQuad__SWIG_2(swigCPtr, SWIGTYPE_p_void.getCPtr(user_texture_id), ImVec2.getCPtr(p1), ImVec2.getCPtr(p2), ImVec2.getCPtr(p3), ImVec2.getCPtr(p4), ImVec2.getCPtr(uv1), ImVec2.getCPtr(uv2), ImVec2.getCPtr(uv3));
    if (ImGuiPINVOKE.SWIGPendingException.Pending) throw ImGuiPINVOKE.SWIGPendingException.Retrieve();
  }

  public void AddImageQuad(SWIGTYPE_p_void user_texture_id, ImVec2 p1, ImVec2 p2, ImVec2 p3, ImVec2 p4, ImVec2 uv1, ImVec2 uv2) {
    ImGuiPINVOKE.ImDrawList_AddImageQuad__SWIG_3(swigCPtr, SWIGTYPE_p_void.getCPtr(user_texture_id), ImVec2.getCPtr(p1), ImVec2.getCPtr(p2), ImVec2.getCPtr(p3), ImVec2.getCPtr(p4), ImVec2.getCPtr(uv1), ImVec2.getCPtr(uv2));
    if (ImGuiPINVOKE.SWIGPendingException.Pending) throw ImGuiPINVOKE.SWIGPendingException.Retrieve();
  }

  public void AddImageQuad(SWIGTYPE_p_void user_texture_id, ImVec2 p1, ImVec2 p2, ImVec2 p3, ImVec2 p4, ImVec2 uv1) {
    ImGuiPINVOKE.ImDrawList_AddImageQuad__SWIG_4(swigCPtr, SWIGTYPE_p_void.getCPtr(user_texture_id), ImVec2.getCPtr(p1), ImVec2.getCPtr(p2), ImVec2.getCPtr(p3), ImVec2.getCPtr(p4), ImVec2.getCPtr(uv1));
    if (ImGuiPINVOKE.SWIGPendingException.Pending) throw ImGuiPINVOKE.SWIGPendingException.Retrieve();
  }

  public void AddImageQuad(SWIGTYPE_p_void user_texture_id, ImVec2 p1, ImVec2 p2, ImVec2 p3, ImVec2 p4) {
    ImGuiPINVOKE.ImDrawList_AddImageQuad__SWIG_5(swigCPtr, SWIGTYPE_p_void.getCPtr(user_texture_id), ImVec2.getCPtr(p1), ImVec2.getCPtr(p2), ImVec2.getCPtr(p3), ImVec2.getCPtr(p4));
    if (ImGuiPINVOKE.SWIGPendingException.Pending) throw ImGuiPINVOKE.SWIGPendingException.Retrieve();
  }

  public void AddImageRounded(SWIGTYPE_p_void user_texture_id, ImVec2 p_min, ImVec2 p_max, ImVec2 uv_min, ImVec2 uv_max, uint col, float rounding, int flags) {
    ImGuiPINVOKE.ImDrawList_AddImageRounded__SWIG_0(swigCPtr, SWIGTYPE_p_void.getCPtr(user_texture_id), ImVec2.getCPtr(p_min), ImVec2.getCPtr(p_max), ImVec2.getCPtr(uv_min), ImVec2.getCPtr(uv_max), col, rounding, flags);
    if (ImGuiPINVOKE.SWIGPendingException.Pending) throw ImGuiPINVOKE.SWIGPendingException.Retrieve();
  }

  public void AddImageRounded(SWIGTYPE_p_void user_texture_id, ImVec2 p_min, ImVec2 p_max, ImVec2 uv_min, ImVec2 uv_max, uint col, float rounding) {
    ImGuiPINVOKE.ImDrawList_AddImageRounded__SWIG_1(swigCPtr, SWIGTYPE_p_void.getCPtr(user_texture_id), ImVec2.getCPtr(p_min), ImVec2.getCPtr(p_max), ImVec2.getCPtr(uv_min), ImVec2.getCPtr(uv_max), col, rounding);
    if (ImGuiPINVOKE.SWIGPendingException.Pending) throw ImGuiPINVOKE.SWIGPendingException.Retrieve();
  }

  public void PathClear() {
    ImGuiPINVOKE.ImDrawList_PathClear(swigCPtr);
  }

  public void PathLineTo(ImVec2 pos) {
    ImGuiPINVOKE.ImDrawList_PathLineTo(swigCPtr, ImVec2.getCPtr(pos));
    if (ImGuiPINVOKE.SWIGPendingException.Pending) throw ImGuiPINVOKE.SWIGPendingException.Retrieve();
  }

  public void PathLineToMergeDuplicate(ImVec2 pos) {
    ImGuiPINVOKE.ImDrawList_PathLineToMergeDuplicate(swigCPtr, ImVec2.getCPtr(pos));
    if (ImGuiPINVOKE.SWIGPendingException.Pending) throw ImGuiPINVOKE.SWIGPendingException.Retrieve();
  }

  public void PathFillConvex(uint col) {
    ImGuiPINVOKE.ImDrawList_PathFillConvex(swigCPtr, col);
  }

  public void PathFillConcave(uint col) {
    ImGuiPINVOKE.ImDrawList_PathFillConcave(swigCPtr, col);
  }

  public void PathStroke(uint col, int flags, float thickness) {
    ImGuiPINVOKE.ImDrawList_PathStroke__SWIG_0(swigCPtr, col, flags, thickness);
  }

  public void PathStroke(uint col, int flags) {
    ImGuiPINVOKE.ImDrawList_PathStroke__SWIG_1(swigCPtr, col, flags);
  }

  public void PathStroke(uint col) {
    ImGuiPINVOKE.ImDrawList_PathStroke__SWIG_2(swigCPtr, col);
  }

  public void PathArcTo(ImVec2 center, float radius, float a_min, float a_max, int num_segments) {
    ImGuiPINVOKE.ImDrawList_PathArcTo__SWIG_0(swigCPtr, ImVec2.getCPtr(center), radius, a_min, a_max, num_segments);
    if (ImGuiPINVOKE.SWIGPendingException.Pending) throw ImGuiPINVOKE.SWIGPendingException.Retrieve();
  }

  public void PathArcTo(ImVec2 center, float radius, float a_min, float a_max) {
    ImGuiPINVOKE.ImDrawList_PathArcTo__SWIG_1(swigCPtr, ImVec2.getCPtr(center), radius, a_min, a_max);
    if (ImGuiPINVOKE.SWIGPendingException.Pending) throw ImGuiPINVOKE.SWIGPendingException.Retrieve();
  }

  public void PathArcToFast(ImVec2 center, float radius, int a_min_of_12, int a_max_of_12) {
    ImGuiPINVOKE.ImDrawList_PathArcToFast(swigCPtr, ImVec2.getCPtr(center), radius, a_min_of_12, a_max_of_12);
    if (ImGuiPINVOKE.SWIGPendingException.Pending) throw ImGuiPINVOKE.SWIGPendingException.Retrieve();
  }

  public void PathEllipticalArcTo(ImVec2 center, ImVec2 radius, float rot, float a_min, float a_max, int num_segments) {
    ImGuiPINVOKE.ImDrawList_PathEllipticalArcTo__SWIG_0(swigCPtr, ImVec2.getCPtr(center), ImVec2.getCPtr(radius), rot, a_min, a_max, num_segments);
    if (ImGuiPINVOKE.SWIGPendingException.Pending) throw ImGuiPINVOKE.SWIGPendingException.Retrieve();
  }

  public void PathEllipticalArcTo(ImVec2 center, ImVec2 radius, float rot, float a_min, float a_max) {
    ImGuiPINVOKE.ImDrawList_PathEllipticalArcTo__SWIG_1(swigCPtr, ImVec2.getCPtr(center), ImVec2.getCPtr(radius), rot, a_min, a_max);
    if (ImGuiPINVOKE.SWIGPendingException.Pending) throw ImGuiPINVOKE.SWIGPendingException.Retrieve();
  }

  public void PathBezierCubicCurveTo(ImVec2 p2, ImVec2 p3, ImVec2 p4, int num_segments) {
    ImGuiPINVOKE.ImDrawList_PathBezierCubicCurveTo__SWIG_0(swigCPtr, ImVec2.getCPtr(p2), ImVec2.getCPtr(p3), ImVec2.getCPtr(p4), num_segments);
    if (ImGuiPINVOKE.SWIGPendingException.Pending) throw ImGuiPINVOKE.SWIGPendingException.Retrieve();
  }

  public void PathBezierCubicCurveTo(ImVec2 p2, ImVec2 p3, ImVec2 p4) {
    ImGuiPINVOKE.ImDrawList_PathBezierCubicCurveTo__SWIG_1(swigCPtr, ImVec2.getCPtr(p2), ImVec2.getCPtr(p3), ImVec2.getCPtr(p4));
    if (ImGuiPINVOKE.SWIGPendingException.Pending) throw ImGuiPINVOKE.SWIGPendingException.Retrieve();
  }

  public void PathBezierQuadraticCurveTo(ImVec2 p2, ImVec2 p3, int num_segments) {
    ImGuiPINVOKE.ImDrawList_PathBezierQuadraticCurveTo__SWIG_0(swigCPtr, ImVec2.getCPtr(p2), ImVec2.getCPtr(p3), num_segments);
    if (ImGuiPINVOKE.SWIGPendingException.Pending) throw ImGuiPINVOKE.SWIGPendingException.Retrieve();
  }

  public void PathBezierQuadraticCurveTo(ImVec2 p2, ImVec2 p3) {
    ImGuiPINVOKE.ImDrawList_PathBezierQuadraticCurveTo__SWIG_1(swigCPtr, ImVec2.getCPtr(p2), ImVec2.getCPtr(p3));
    if (ImGuiPINVOKE.SWIGPendingException.Pending) throw ImGuiPINVOKE.SWIGPendingException.Retrieve();
  }

  public void PathRect(ImVec2 rect_min, ImVec2 rect_max, float rounding, int flags) {
    ImGuiPINVOKE.ImDrawList_PathRect__SWIG_0(swigCPtr, ImVec2.getCPtr(rect_min), ImVec2.getCPtr(rect_max), rounding, flags);
    if (ImGuiPINVOKE.SWIGPendingException.Pending) throw ImGuiPINVOKE.SWIGPendingException.Retrieve();
  }

  public void PathRect(ImVec2 rect_min, ImVec2 rect_max, float rounding) {
    ImGuiPINVOKE.ImDrawList_PathRect__SWIG_1(swigCPtr, ImVec2.getCPtr(rect_min), ImVec2.getCPtr(rect_max), rounding);
    if (ImGuiPINVOKE.SWIGPendingException.Pending) throw ImGuiPINVOKE.SWIGPendingException.Retrieve();
  }

  public void PathRect(ImVec2 rect_min, ImVec2 rect_max) {
    ImGuiPINVOKE.ImDrawList_PathRect__SWIG_2(swigCPtr, ImVec2.getCPtr(rect_min), ImVec2.getCPtr(rect_max));
    if (ImGuiPINVOKE.SWIGPendingException.Pending) throw ImGuiPINVOKE.SWIGPendingException.Retrieve();
  }

  public void AddCallback(SWIGTYPE_p_f_p_q_const__ImDrawList_p_q_const__ImDrawCmd__void callback, SWIGTYPE_p_void callback_data) {
    ImGuiPINVOKE.ImDrawList_AddCallback(swigCPtr, SWIGTYPE_p_f_p_q_const__ImDrawList_p_q_const__ImDrawCmd__void.getCPtr(callback), SWIGTYPE_p_void.getCPtr(callback_data));
  }

  public void AddDrawCmd() {
    ImGuiPINVOKE.ImDrawList_AddDrawCmd(swigCPtr);
  }

  public ImDrawList CloneOutput() {
    global::System.IntPtr cPtr = ImGuiPINVOKE.ImDrawList_CloneOutput(swigCPtr);
    ImDrawList ret = (cPtr == global::System.IntPtr.Zero) ? null : new ImDrawList(cPtr, false);
    return ret;
  }

  public void ChannelsSplit(int count) {
    ImGuiPINVOKE.ImDrawList_ChannelsSplit(swigCPtr, count);
  }

  public void ChannelsMerge() {
    ImGuiPINVOKE.ImDrawList_ChannelsMerge(swigCPtr);
  }

  public void ChannelsSetCurrent(int n) {
    ImGuiPINVOKE.ImDrawList_ChannelsSetCurrent(swigCPtr, n);
  }

  public void PrimReserve(int idx_count, int vtx_count) {
    ImGuiPINVOKE.ImDrawList_PrimReserve(swigCPtr, idx_count, vtx_count);
  }

  public void PrimUnreserve(int idx_count, int vtx_count) {
    ImGuiPINVOKE.ImDrawList_PrimUnreserve(swigCPtr, idx_count, vtx_count);
  }

  public void PrimRect(ImVec2 a, ImVec2 b, uint col) {
    ImGuiPINVOKE.ImDrawList_PrimRect(swigCPtr, ImVec2.getCPtr(a), ImVec2.getCPtr(b), col);
    if (ImGuiPINVOKE.SWIGPendingException.Pending) throw ImGuiPINVOKE.SWIGPendingException.Retrieve();
  }

  public void PrimRectUV(ImVec2 a, ImVec2 b, ImVec2 uv_a, ImVec2 uv_b, uint col) {
    ImGuiPINVOKE.ImDrawList_PrimRectUV(swigCPtr, ImVec2.getCPtr(a), ImVec2.getCPtr(b), ImVec2.getCPtr(uv_a), ImVec2.getCPtr(uv_b), col);
    if (ImGuiPINVOKE.SWIGPendingException.Pending) throw ImGuiPINVOKE.SWIGPendingException.Retrieve();
  }

  public void PrimQuadUV(ImVec2 a, ImVec2 b, ImVec2 c, ImVec2 d, ImVec2 uv_a, ImVec2 uv_b, ImVec2 uv_c, ImVec2 uv_d, uint col) {
    ImGuiPINVOKE.ImDrawList_PrimQuadUV(swigCPtr, ImVec2.getCPtr(a), ImVec2.getCPtr(b), ImVec2.getCPtr(c), ImVec2.getCPtr(d), ImVec2.getCPtr(uv_a), ImVec2.getCPtr(uv_b), ImVec2.getCPtr(uv_c), ImVec2.getCPtr(uv_d), col);
    if (ImGuiPINVOKE.SWIGPendingException.Pending) throw ImGuiPINVOKE.SWIGPendingException.Retrieve();
  }

  public void PrimWriteVtx(ImVec2 pos, ImVec2 uv, uint col) {
    ImGuiPINVOKE.ImDrawList_PrimWriteVtx(swigCPtr, ImVec2.getCPtr(pos), ImVec2.getCPtr(uv), col);
    if (ImGuiPINVOKE.SWIGPendingException.Pending) throw ImGuiPINVOKE.SWIGPendingException.Retrieve();
  }

  public void PrimWriteIdx(ushort idx) {
    ImGuiPINVOKE.ImDrawList_PrimWriteIdx(swigCPtr, idx);
  }

  public void PrimVtx(ImVec2 pos, ImVec2 uv, uint col) {
    ImGuiPINVOKE.ImDrawList_PrimVtx(swigCPtr, ImVec2.getCPtr(pos), ImVec2.getCPtr(uv), col);
    if (ImGuiPINVOKE.SWIGPendingException.Pending) throw ImGuiPINVOKE.SWIGPendingException.Retrieve();
  }

  public void _ResetForNewFrame() {
    ImGuiPINVOKE.ImDrawList__ResetForNewFrame(swigCPtr);
  }

  public void _ClearFreeMemory() {
    ImGuiPINVOKE.ImDrawList__ClearFreeMemory(swigCPtr);
  }

  public void _PopUnusedDrawCmd() {
    ImGuiPINVOKE.ImDrawList__PopUnusedDrawCmd(swigCPtr);
  }

  public void _TryMergeDrawCmds() {
    ImGuiPINVOKE.ImDrawList__TryMergeDrawCmds(swigCPtr);
  }

  public void _OnChangedClipRect() {
    ImGuiPINVOKE.ImDrawList__OnChangedClipRect(swigCPtr);
  }

  public void _OnChangedTextureID() {
    ImGuiPINVOKE.ImDrawList__OnChangedTextureID(swigCPtr);
  }

  public void _OnChangedVtxOffset() {
    ImGuiPINVOKE.ImDrawList__OnChangedVtxOffset(swigCPtr);
  }

  public void _SetTextureID(SWIGTYPE_p_void texture_id) {
    ImGuiPINVOKE.ImDrawList__SetTextureID(swigCPtr, SWIGTYPE_p_void.getCPtr(texture_id));
  }

  public int _CalcCircleAutoSegmentCount(float radius) {
    int ret = ImGuiPINVOKE.ImDrawList__CalcCircleAutoSegmentCount(swigCPtr, radius);
    return ret;
  }

  public void _PathArcToFastEx(ImVec2 center, float radius, int a_min_sample, int a_max_sample, int a_step) {
    ImGuiPINVOKE.ImDrawList__PathArcToFastEx(swigCPtr, ImVec2.getCPtr(center), radius, a_min_sample, a_max_sample, a_step);
    if (ImGuiPINVOKE.SWIGPendingException.Pending) throw ImGuiPINVOKE.SWIGPendingException.Retrieve();
  }

  public void _PathArcToN(ImVec2 center, float radius, float a_min, float a_max, int num_segments) {
    ImGuiPINVOKE.ImDrawList__PathArcToN(swigCPtr, ImVec2.getCPtr(center), radius, a_min, a_max, num_segments);
    if (ImGuiPINVOKE.SWIGPendingException.Pending) throw ImGuiPINVOKE.SWIGPendingException.Retrieve();
  }

}

}
