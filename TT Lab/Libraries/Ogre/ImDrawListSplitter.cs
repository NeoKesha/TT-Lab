//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.2.1
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace org.ogre {

public class ImDrawListSplitter : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal ImDrawListSplitter(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ImDrawListSplitter obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(ImDrawListSplitter obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~ImDrawListSplitter() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          ImGuiPINVOKE.delete_ImDrawListSplitter(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public int _Current {
    set {
      ImGuiPINVOKE.ImDrawListSplitter__Current_set(swigCPtr, value);
    } 
    get {
      int ret = ImGuiPINVOKE.ImDrawListSplitter__Current_get(swigCPtr);
      return ret;
    } 
  }

  public int _Count {
    set {
      ImGuiPINVOKE.ImDrawListSplitter__Count_set(swigCPtr, value);
    } 
    get {
      int ret = ImGuiPINVOKE.ImDrawListSplitter__Count_get(swigCPtr);
      return ret;
    } 
  }

  public SWIGTYPE_p_ImVectorT_ImDrawChannel_t _Channels {
    set {
      ImGuiPINVOKE.ImDrawListSplitter__Channels_set(swigCPtr, SWIGTYPE_p_ImVectorT_ImDrawChannel_t.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = ImGuiPINVOKE.ImDrawListSplitter__Channels_get(swigCPtr);
      SWIGTYPE_p_ImVectorT_ImDrawChannel_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_ImVectorT_ImDrawChannel_t(cPtr, false);
      return ret;
    } 
  }

  public ImDrawListSplitter() : this(ImGuiPINVOKE.new_ImDrawListSplitter(), true) {
  }

  public void Clear() {
    ImGuiPINVOKE.ImDrawListSplitter_Clear(swigCPtr);
  }

  public void ClearFreeMemory() {
    ImGuiPINVOKE.ImDrawListSplitter_ClearFreeMemory(swigCPtr);
  }

  public void Split(ImDrawList draw_list, int count) {
    ImGuiPINVOKE.ImDrawListSplitter_Split(swigCPtr, ImDrawList.getCPtr(draw_list), count);
  }

  public void Merge(ImDrawList draw_list) {
    ImGuiPINVOKE.ImDrawListSplitter_Merge(swigCPtr, ImDrawList.getCPtr(draw_list));
  }

  public void SetCurrentChannel(ImDrawList draw_list, int channel_idx) {
    ImGuiPINVOKE.ImDrawListSplitter_SetCurrentChannel(swigCPtr, ImDrawList.getCPtr(draw_list), channel_idx);
  }

}

}
