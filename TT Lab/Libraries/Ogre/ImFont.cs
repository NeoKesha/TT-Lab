//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.2.1
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace org.ogre {

public class ImFont : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal ImFont(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ImFont obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(ImFont obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~ImFont() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          ImGuiPINVOKE.delete_ImFont(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public SWIGTYPE_p_ImVectorT_float_t IndexAdvanceX {
    set {
      ImGuiPINVOKE.ImFont_IndexAdvanceX_set(swigCPtr, SWIGTYPE_p_ImVectorT_float_t.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = ImGuiPINVOKE.ImFont_IndexAdvanceX_get(swigCPtr);
      SWIGTYPE_p_ImVectorT_float_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_ImVectorT_float_t(cPtr, false);
      return ret;
    } 
  }

  public float FallbackAdvanceX {
    set {
      ImGuiPINVOKE.ImFont_FallbackAdvanceX_set(swigCPtr, value);
    } 
    get {
      float ret = ImGuiPINVOKE.ImFont_FallbackAdvanceX_get(swigCPtr);
      return ret;
    } 
  }

  public float FontSize {
    set {
      ImGuiPINVOKE.ImFont_FontSize_set(swigCPtr, value);
    } 
    get {
      float ret = ImGuiPINVOKE.ImFont_FontSize_get(swigCPtr);
      return ret;
    } 
  }

  public SWIGTYPE_p_ImVectorT_unsigned_short_t IndexLookup {
    set {
      ImGuiPINVOKE.ImFont_IndexLookup_set(swigCPtr, SWIGTYPE_p_ImVectorT_unsigned_short_t.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = ImGuiPINVOKE.ImFont_IndexLookup_get(swigCPtr);
      SWIGTYPE_p_ImVectorT_unsigned_short_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_ImVectorT_unsigned_short_t(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_ImVectorT_ImFontGlyph_t Glyphs {
    set {
      ImGuiPINVOKE.ImFont_Glyphs_set(swigCPtr, SWIGTYPE_p_ImVectorT_ImFontGlyph_t.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = ImGuiPINVOKE.ImFont_Glyphs_get(swigCPtr);
      SWIGTYPE_p_ImVectorT_ImFontGlyph_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_ImVectorT_ImFontGlyph_t(cPtr, false);
      return ret;
    } 
  }

  public ImFontGlyph FallbackGlyph {
    set {
      ImGuiPINVOKE.ImFont_FallbackGlyph_set(swigCPtr, ImFontGlyph.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = ImGuiPINVOKE.ImFont_FallbackGlyph_get(swigCPtr);
      ImFontGlyph ret = (cPtr == global::System.IntPtr.Zero) ? null : new ImFontGlyph(cPtr, false);
      return ret;
    } 
  }

  public ImFontAtlas ContainerAtlas {
    set {
      ImGuiPINVOKE.ImFont_ContainerAtlas_set(swigCPtr, ImFontAtlas.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = ImGuiPINVOKE.ImFont_ContainerAtlas_get(swigCPtr);
      ImFontAtlas ret = (cPtr == global::System.IntPtr.Zero) ? null : new ImFontAtlas(cPtr, false);
      return ret;
    } 
  }

  public ImFontConfig ConfigData {
    set {
      ImGuiPINVOKE.ImFont_ConfigData_set(swigCPtr, ImFontConfig.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = ImGuiPINVOKE.ImFont_ConfigData_get(swigCPtr);
      ImFontConfig ret = (cPtr == global::System.IntPtr.Zero) ? null : new ImFontConfig(cPtr, false);
      return ret;
    } 
  }

  public short ConfigDataCount {
    set {
      ImGuiPINVOKE.ImFont_ConfigDataCount_set(swigCPtr, value);
    } 
    get {
      short ret = ImGuiPINVOKE.ImFont_ConfigDataCount_get(swigCPtr);
      return ret;
    } 
  }

  public ushort FallbackChar {
    set {
      ImGuiPINVOKE.ImFont_FallbackChar_set(swigCPtr, value);
    } 
    get {
      ushort ret = ImGuiPINVOKE.ImFont_FallbackChar_get(swigCPtr);
      return ret;
    } 
  }

  public ushort EllipsisChar {
    set {
      ImGuiPINVOKE.ImFont_EllipsisChar_set(swigCPtr, value);
    } 
    get {
      ushort ret = ImGuiPINVOKE.ImFont_EllipsisChar_get(swigCPtr);
      return ret;
    } 
  }

  public short EllipsisCharCount {
    set {
      ImGuiPINVOKE.ImFont_EllipsisCharCount_set(swigCPtr, value);
    } 
    get {
      short ret = ImGuiPINVOKE.ImFont_EllipsisCharCount_get(swigCPtr);
      return ret;
    } 
  }

  public float EllipsisWidth {
    set {
      ImGuiPINVOKE.ImFont_EllipsisWidth_set(swigCPtr, value);
    } 
    get {
      float ret = ImGuiPINVOKE.ImFont_EllipsisWidth_get(swigCPtr);
      return ret;
    } 
  }

  public float EllipsisCharStep {
    set {
      ImGuiPINVOKE.ImFont_EllipsisCharStep_set(swigCPtr, value);
    } 
    get {
      float ret = ImGuiPINVOKE.ImFont_EllipsisCharStep_get(swigCPtr);
      return ret;
    } 
  }

  public bool DirtyLookupTables {
    set {
      ImGuiPINVOKE.ImFont_DirtyLookupTables_set(swigCPtr, value);
    } 
    get {
      bool ret = ImGuiPINVOKE.ImFont_DirtyLookupTables_get(swigCPtr);
      return ret;
    } 
  }

  public float Scale {
    set {
      ImGuiPINVOKE.ImFont_Scale_set(swigCPtr, value);
    } 
    get {
      float ret = ImGuiPINVOKE.ImFont_Scale_get(swigCPtr);
      return ret;
    } 
  }

  public float Ascent {
    set {
      ImGuiPINVOKE.ImFont_Ascent_set(swigCPtr, value);
    } 
    get {
      float ret = ImGuiPINVOKE.ImFont_Ascent_get(swigCPtr);
      return ret;
    } 
  }

  public float Descent {
    set {
      ImGuiPINVOKE.ImFont_Descent_set(swigCPtr, value);
    } 
    get {
      float ret = ImGuiPINVOKE.ImFont_Descent_get(swigCPtr);
      return ret;
    } 
  }

  public int MetricsTotalSurface {
    set {
      ImGuiPINVOKE.ImFont_MetricsTotalSurface_set(swigCPtr, value);
    } 
    get {
      int ret = ImGuiPINVOKE.ImFont_MetricsTotalSurface_get(swigCPtr);
      return ret;
    } 
  }

  public SWIGTYPE_p_unsigned_char Used4kPagesMap {
    set {
      ImGuiPINVOKE.ImFont_Used4kPagesMap_set(swigCPtr, SWIGTYPE_p_unsigned_char.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = ImGuiPINVOKE.ImFont_Used4kPagesMap_get(swigCPtr);
      SWIGTYPE_p_unsigned_char ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_unsigned_char(cPtr, false);
      return ret;
    } 
  }

  public ImFont() : this(ImGuiPINVOKE.new_ImFont(), true) {
  }

  public ImFontGlyph FindGlyph(ushort c) {
    global::System.IntPtr cPtr = ImGuiPINVOKE.ImFont_FindGlyph(swigCPtr, c);
    ImFontGlyph ret = (cPtr == global::System.IntPtr.Zero) ? null : new ImFontGlyph(cPtr, false);
    return ret;
  }

  public ImFontGlyph FindGlyphNoFallback(ushort c) {
    global::System.IntPtr cPtr = ImGuiPINVOKE.ImFont_FindGlyphNoFallback(swigCPtr, c);
    ImFontGlyph ret = (cPtr == global::System.IntPtr.Zero) ? null : new ImFontGlyph(cPtr, false);
    return ret;
  }

  public float GetCharAdvance(ushort c) {
    float ret = ImGuiPINVOKE.ImFont_GetCharAdvance(swigCPtr, c);
    return ret;
  }

  public bool IsLoaded() {
    bool ret = ImGuiPINVOKE.ImFont_IsLoaded(swigCPtr);
    return ret;
  }

  public string GetDebugName() {
    string ret = ImGuiPINVOKE.ImFont_GetDebugName(swigCPtr);
    return ret;
  }

  public ImVec2 CalcTextSizeA(float size, float max_width, float wrap_width, string text_begin, string text_end, SWIGTYPE_p_p_char remaining) {
    ImVec2 ret = new ImVec2(ImGuiPINVOKE.ImFont_CalcTextSizeA__SWIG_0(swigCPtr, size, max_width, wrap_width, text_begin, text_end, SWIGTYPE_p_p_char.getCPtr(remaining)), true);
    return ret;
  }

  public ImVec2 CalcTextSizeA(float size, float max_width, float wrap_width, string text_begin, string text_end) {
    ImVec2 ret = new ImVec2(ImGuiPINVOKE.ImFont_CalcTextSizeA__SWIG_1(swigCPtr, size, max_width, wrap_width, text_begin, text_end), true);
    return ret;
  }

  public ImVec2 CalcTextSizeA(float size, float max_width, float wrap_width, string text_begin) {
    ImVec2 ret = new ImVec2(ImGuiPINVOKE.ImFont_CalcTextSizeA__SWIG_2(swigCPtr, size, max_width, wrap_width, text_begin), true);
    return ret;
  }

  public string CalcWordWrapPositionA(float scale, string text, string text_end, float wrap_width) {
    string ret = ImGuiPINVOKE.ImFont_CalcWordWrapPositionA(swigCPtr, scale, text, text_end, wrap_width);
    return ret;
  }

  public void RenderChar(ImDrawList draw_list, float size, ImVec2 pos, uint col, ushort c) {
    ImGuiPINVOKE.ImFont_RenderChar(swigCPtr, ImDrawList.getCPtr(draw_list), size, ImVec2.getCPtr(pos), col, c);
    if (ImGuiPINVOKE.SWIGPendingException.Pending) throw ImGuiPINVOKE.SWIGPendingException.Retrieve();
  }

  public void RenderText(ImDrawList draw_list, float size, ImVec2 pos, uint col, ImVec4 clip_rect, string text_begin, string text_end, float wrap_width, bool cpu_fine_clip) {
    ImGuiPINVOKE.ImFont_RenderText__SWIG_0(swigCPtr, ImDrawList.getCPtr(draw_list), size, ImVec2.getCPtr(pos), col, ImVec4.getCPtr(clip_rect), text_begin, text_end, wrap_width, cpu_fine_clip);
    if (ImGuiPINVOKE.SWIGPendingException.Pending) throw ImGuiPINVOKE.SWIGPendingException.Retrieve();
  }

  public void RenderText(ImDrawList draw_list, float size, ImVec2 pos, uint col, ImVec4 clip_rect, string text_begin, string text_end, float wrap_width) {
    ImGuiPINVOKE.ImFont_RenderText__SWIG_1(swigCPtr, ImDrawList.getCPtr(draw_list), size, ImVec2.getCPtr(pos), col, ImVec4.getCPtr(clip_rect), text_begin, text_end, wrap_width);
    if (ImGuiPINVOKE.SWIGPendingException.Pending) throw ImGuiPINVOKE.SWIGPendingException.Retrieve();
  }

  public void RenderText(ImDrawList draw_list, float size, ImVec2 pos, uint col, ImVec4 clip_rect, string text_begin, string text_end) {
    ImGuiPINVOKE.ImFont_RenderText__SWIG_2(swigCPtr, ImDrawList.getCPtr(draw_list), size, ImVec2.getCPtr(pos), col, ImVec4.getCPtr(clip_rect), text_begin, text_end);
    if (ImGuiPINVOKE.SWIGPendingException.Pending) throw ImGuiPINVOKE.SWIGPendingException.Retrieve();
  }

  public void BuildLookupTable() {
    ImGuiPINVOKE.ImFont_BuildLookupTable(swigCPtr);
  }

  public void ClearOutputData() {
    ImGuiPINVOKE.ImFont_ClearOutputData(swigCPtr);
  }

  public void GrowIndex(int new_size) {
    ImGuiPINVOKE.ImFont_GrowIndex(swigCPtr, new_size);
  }

  public void AddGlyph(ImFontConfig src_cfg, ushort c, float x0, float y0, float x1, float y1, float u0, float v0, float u1, float v1, float advance_x) {
    ImGuiPINVOKE.ImFont_AddGlyph(swigCPtr, ImFontConfig.getCPtr(src_cfg), c, x0, y0, x1, y1, u0, v0, u1, v1, advance_x);
  }

  public void AddRemapChar(ushort dst, ushort src, bool overwrite_dst) {
    ImGuiPINVOKE.ImFont_AddRemapChar__SWIG_0(swigCPtr, dst, src, overwrite_dst);
  }

  public void AddRemapChar(ushort dst, ushort src) {
    ImGuiPINVOKE.ImFont_AddRemapChar__SWIG_1(swigCPtr, dst, src);
  }

  public void SetGlyphVisible(ushort c, bool visible) {
    ImGuiPINVOKE.ImFont_SetGlyphVisible(swigCPtr, c, visible);
  }

  public bool IsGlyphRangeUnused(uint c_begin, uint c_last) {
    bool ret = ImGuiPINVOKE.ImFont_IsGlyphRangeUnused(swigCPtr, c_begin, c_last);
    return ret;
  }

}

}
