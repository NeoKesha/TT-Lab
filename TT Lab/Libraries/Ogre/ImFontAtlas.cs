//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.2.1
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace org.ogre {

public class ImFontAtlas : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal ImFontAtlas(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ImFontAtlas obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(ImFontAtlas obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~ImFontAtlas() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          ImGuiPINVOKE.delete_ImFontAtlas(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public ImFontAtlas() : this(ImGuiPINVOKE.new_ImFontAtlas(), true) {
  }

  public ImFont AddFont(ImFontConfig font_cfg) {
    global::System.IntPtr cPtr = ImGuiPINVOKE.ImFontAtlas_AddFont(swigCPtr, ImFontConfig.getCPtr(font_cfg));
    ImFont ret = (cPtr == global::System.IntPtr.Zero) ? null : new ImFont(cPtr, false);
    return ret;
  }

  public ImFont AddFontDefault(ImFontConfig font_cfg) {
    global::System.IntPtr cPtr = ImGuiPINVOKE.ImFontAtlas_AddFontDefault__SWIG_0(swigCPtr, ImFontConfig.getCPtr(font_cfg));
    ImFont ret = (cPtr == global::System.IntPtr.Zero) ? null : new ImFont(cPtr, false);
    return ret;
  }

  public ImFont AddFontDefault() {
    global::System.IntPtr cPtr = ImGuiPINVOKE.ImFontAtlas_AddFontDefault__SWIG_1(swigCPtr);
    ImFont ret = (cPtr == global::System.IntPtr.Zero) ? null : new ImFont(cPtr, false);
    return ret;
  }

  public ImFont AddFontFromFileTTF(string filename, float size_pixels, ImFontConfig font_cfg, SWIGTYPE_p_unsigned_short glyph_ranges) {
    global::System.IntPtr cPtr = ImGuiPINVOKE.ImFontAtlas_AddFontFromFileTTF__SWIG_0(swigCPtr, filename, size_pixels, ImFontConfig.getCPtr(font_cfg), SWIGTYPE_p_unsigned_short.getCPtr(glyph_ranges));
    ImFont ret = (cPtr == global::System.IntPtr.Zero) ? null : new ImFont(cPtr, false);
    return ret;
  }

  public ImFont AddFontFromFileTTF(string filename, float size_pixels, ImFontConfig font_cfg) {
    global::System.IntPtr cPtr = ImGuiPINVOKE.ImFontAtlas_AddFontFromFileTTF__SWIG_1(swigCPtr, filename, size_pixels, ImFontConfig.getCPtr(font_cfg));
    ImFont ret = (cPtr == global::System.IntPtr.Zero) ? null : new ImFont(cPtr, false);
    return ret;
  }

  public ImFont AddFontFromFileTTF(string filename, float size_pixels) {
    global::System.IntPtr cPtr = ImGuiPINVOKE.ImFontAtlas_AddFontFromFileTTF__SWIG_2(swigCPtr, filename, size_pixels);
    ImFont ret = (cPtr == global::System.IntPtr.Zero) ? null : new ImFont(cPtr, false);
    return ret;
  }

  public ImFont AddFontFromMemoryTTF(SWIGTYPE_p_void font_data, int font_data_size, float size_pixels, ImFontConfig font_cfg, SWIGTYPE_p_unsigned_short glyph_ranges) {
    global::System.IntPtr cPtr = ImGuiPINVOKE.ImFontAtlas_AddFontFromMemoryTTF__SWIG_0(swigCPtr, SWIGTYPE_p_void.getCPtr(font_data), font_data_size, size_pixels, ImFontConfig.getCPtr(font_cfg), SWIGTYPE_p_unsigned_short.getCPtr(glyph_ranges));
    ImFont ret = (cPtr == global::System.IntPtr.Zero) ? null : new ImFont(cPtr, false);
    return ret;
  }

  public ImFont AddFontFromMemoryTTF(SWIGTYPE_p_void font_data, int font_data_size, float size_pixels, ImFontConfig font_cfg) {
    global::System.IntPtr cPtr = ImGuiPINVOKE.ImFontAtlas_AddFontFromMemoryTTF__SWIG_1(swigCPtr, SWIGTYPE_p_void.getCPtr(font_data), font_data_size, size_pixels, ImFontConfig.getCPtr(font_cfg));
    ImFont ret = (cPtr == global::System.IntPtr.Zero) ? null : new ImFont(cPtr, false);
    return ret;
  }

  public ImFont AddFontFromMemoryTTF(SWIGTYPE_p_void font_data, int font_data_size, float size_pixels) {
    global::System.IntPtr cPtr = ImGuiPINVOKE.ImFontAtlas_AddFontFromMemoryTTF__SWIG_2(swigCPtr, SWIGTYPE_p_void.getCPtr(font_data), font_data_size, size_pixels);
    ImFont ret = (cPtr == global::System.IntPtr.Zero) ? null : new ImFont(cPtr, false);
    return ret;
  }

  public ImFont AddFontFromMemoryCompressedTTF(SWIGTYPE_p_void compressed_font_data, int compressed_font_data_size, float size_pixels, ImFontConfig font_cfg, SWIGTYPE_p_unsigned_short glyph_ranges) {
    global::System.IntPtr cPtr = ImGuiPINVOKE.ImFontAtlas_AddFontFromMemoryCompressedTTF__SWIG_0(swigCPtr, SWIGTYPE_p_void.getCPtr(compressed_font_data), compressed_font_data_size, size_pixels, ImFontConfig.getCPtr(font_cfg), SWIGTYPE_p_unsigned_short.getCPtr(glyph_ranges));
    ImFont ret = (cPtr == global::System.IntPtr.Zero) ? null : new ImFont(cPtr, false);
    return ret;
  }

  public ImFont AddFontFromMemoryCompressedTTF(SWIGTYPE_p_void compressed_font_data, int compressed_font_data_size, float size_pixels, ImFontConfig font_cfg) {
    global::System.IntPtr cPtr = ImGuiPINVOKE.ImFontAtlas_AddFontFromMemoryCompressedTTF__SWIG_1(swigCPtr, SWIGTYPE_p_void.getCPtr(compressed_font_data), compressed_font_data_size, size_pixels, ImFontConfig.getCPtr(font_cfg));
    ImFont ret = (cPtr == global::System.IntPtr.Zero) ? null : new ImFont(cPtr, false);
    return ret;
  }

  public ImFont AddFontFromMemoryCompressedTTF(SWIGTYPE_p_void compressed_font_data, int compressed_font_data_size, float size_pixels) {
    global::System.IntPtr cPtr = ImGuiPINVOKE.ImFontAtlas_AddFontFromMemoryCompressedTTF__SWIG_2(swigCPtr, SWIGTYPE_p_void.getCPtr(compressed_font_data), compressed_font_data_size, size_pixels);
    ImFont ret = (cPtr == global::System.IntPtr.Zero) ? null : new ImFont(cPtr, false);
    return ret;
  }

  public ImFont AddFontFromMemoryCompressedBase85TTF(string compressed_font_data_base85, float size_pixels, ImFontConfig font_cfg, SWIGTYPE_p_unsigned_short glyph_ranges) {
    global::System.IntPtr cPtr = ImGuiPINVOKE.ImFontAtlas_AddFontFromMemoryCompressedBase85TTF__SWIG_0(swigCPtr, compressed_font_data_base85, size_pixels, ImFontConfig.getCPtr(font_cfg), SWIGTYPE_p_unsigned_short.getCPtr(glyph_ranges));
    ImFont ret = (cPtr == global::System.IntPtr.Zero) ? null : new ImFont(cPtr, false);
    return ret;
  }

  public ImFont AddFontFromMemoryCompressedBase85TTF(string compressed_font_data_base85, float size_pixels, ImFontConfig font_cfg) {
    global::System.IntPtr cPtr = ImGuiPINVOKE.ImFontAtlas_AddFontFromMemoryCompressedBase85TTF__SWIG_1(swigCPtr, compressed_font_data_base85, size_pixels, ImFontConfig.getCPtr(font_cfg));
    ImFont ret = (cPtr == global::System.IntPtr.Zero) ? null : new ImFont(cPtr, false);
    return ret;
  }

  public ImFont AddFontFromMemoryCompressedBase85TTF(string compressed_font_data_base85, float size_pixels) {
    global::System.IntPtr cPtr = ImGuiPINVOKE.ImFontAtlas_AddFontFromMemoryCompressedBase85TTF__SWIG_2(swigCPtr, compressed_font_data_base85, size_pixels);
    ImFont ret = (cPtr == global::System.IntPtr.Zero) ? null : new ImFont(cPtr, false);
    return ret;
  }

  public void ClearInputData() {
    ImGuiPINVOKE.ImFontAtlas_ClearInputData(swigCPtr);
  }

  public void ClearTexData() {
    ImGuiPINVOKE.ImFontAtlas_ClearTexData(swigCPtr);
  }

  public void ClearFonts() {
    ImGuiPINVOKE.ImFontAtlas_ClearFonts(swigCPtr);
  }

  public void Clear() {
    ImGuiPINVOKE.ImFontAtlas_Clear(swigCPtr);
  }

  public bool Build() {
    bool ret = ImGuiPINVOKE.ImFontAtlas_Build(swigCPtr);
    return ret;
  }

  public void GetTexDataAsAlpha8(SWIGTYPE_p_p_unsigned_char out_pixels, SWIGTYPE_p_int out_width, SWIGTYPE_p_int out_height, SWIGTYPE_p_int out_bytes_per_pixel) {
    ImGuiPINVOKE.ImFontAtlas_GetTexDataAsAlpha8__SWIG_0(swigCPtr, SWIGTYPE_p_p_unsigned_char.getCPtr(out_pixels), SWIGTYPE_p_int.getCPtr(out_width), SWIGTYPE_p_int.getCPtr(out_height), SWIGTYPE_p_int.getCPtr(out_bytes_per_pixel));
  }

  public void GetTexDataAsAlpha8(SWIGTYPE_p_p_unsigned_char out_pixels, SWIGTYPE_p_int out_width, SWIGTYPE_p_int out_height) {
    ImGuiPINVOKE.ImFontAtlas_GetTexDataAsAlpha8__SWIG_1(swigCPtr, SWIGTYPE_p_p_unsigned_char.getCPtr(out_pixels), SWIGTYPE_p_int.getCPtr(out_width), SWIGTYPE_p_int.getCPtr(out_height));
  }

  public void GetTexDataAsRGBA32(SWIGTYPE_p_p_unsigned_char out_pixels, SWIGTYPE_p_int out_width, SWIGTYPE_p_int out_height, SWIGTYPE_p_int out_bytes_per_pixel) {
    ImGuiPINVOKE.ImFontAtlas_GetTexDataAsRGBA32__SWIG_0(swigCPtr, SWIGTYPE_p_p_unsigned_char.getCPtr(out_pixels), SWIGTYPE_p_int.getCPtr(out_width), SWIGTYPE_p_int.getCPtr(out_height), SWIGTYPE_p_int.getCPtr(out_bytes_per_pixel));
  }

  public void GetTexDataAsRGBA32(SWIGTYPE_p_p_unsigned_char out_pixels, SWIGTYPE_p_int out_width, SWIGTYPE_p_int out_height) {
    ImGuiPINVOKE.ImFontAtlas_GetTexDataAsRGBA32__SWIG_1(swigCPtr, SWIGTYPE_p_p_unsigned_char.getCPtr(out_pixels), SWIGTYPE_p_int.getCPtr(out_width), SWIGTYPE_p_int.getCPtr(out_height));
  }

  public bool IsBuilt() {
    bool ret = ImGuiPINVOKE.ImFontAtlas_IsBuilt(swigCPtr);
    return ret;
  }

  public void SetTexID(SWIGTYPE_p_void id) {
    ImGuiPINVOKE.ImFontAtlas_SetTexID(swigCPtr, SWIGTYPE_p_void.getCPtr(id));
  }

  public SWIGTYPE_p_unsigned_short GetGlyphRangesDefault() {
    global::System.IntPtr cPtr = ImGuiPINVOKE.ImFontAtlas_GetGlyphRangesDefault(swigCPtr);
    SWIGTYPE_p_unsigned_short ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_unsigned_short(cPtr, false);
    return ret;
  }

  public SWIGTYPE_p_unsigned_short GetGlyphRangesGreek() {
    global::System.IntPtr cPtr = ImGuiPINVOKE.ImFontAtlas_GetGlyphRangesGreek(swigCPtr);
    SWIGTYPE_p_unsigned_short ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_unsigned_short(cPtr, false);
    return ret;
  }

  public SWIGTYPE_p_unsigned_short GetGlyphRangesKorean() {
    global::System.IntPtr cPtr = ImGuiPINVOKE.ImFontAtlas_GetGlyphRangesKorean(swigCPtr);
    SWIGTYPE_p_unsigned_short ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_unsigned_short(cPtr, false);
    return ret;
  }

  public SWIGTYPE_p_unsigned_short GetGlyphRangesJapanese() {
    global::System.IntPtr cPtr = ImGuiPINVOKE.ImFontAtlas_GetGlyphRangesJapanese(swigCPtr);
    SWIGTYPE_p_unsigned_short ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_unsigned_short(cPtr, false);
    return ret;
  }

  public SWIGTYPE_p_unsigned_short GetGlyphRangesChineseFull() {
    global::System.IntPtr cPtr = ImGuiPINVOKE.ImFontAtlas_GetGlyphRangesChineseFull(swigCPtr);
    SWIGTYPE_p_unsigned_short ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_unsigned_short(cPtr, false);
    return ret;
  }

  public SWIGTYPE_p_unsigned_short GetGlyphRangesChineseSimplifiedCommon() {
    global::System.IntPtr cPtr = ImGuiPINVOKE.ImFontAtlas_GetGlyphRangesChineseSimplifiedCommon(swigCPtr);
    SWIGTYPE_p_unsigned_short ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_unsigned_short(cPtr, false);
    return ret;
  }

  public SWIGTYPE_p_unsigned_short GetGlyphRangesCyrillic() {
    global::System.IntPtr cPtr = ImGuiPINVOKE.ImFontAtlas_GetGlyphRangesCyrillic(swigCPtr);
    SWIGTYPE_p_unsigned_short ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_unsigned_short(cPtr, false);
    return ret;
  }

  public SWIGTYPE_p_unsigned_short GetGlyphRangesThai() {
    global::System.IntPtr cPtr = ImGuiPINVOKE.ImFontAtlas_GetGlyphRangesThai(swigCPtr);
    SWIGTYPE_p_unsigned_short ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_unsigned_short(cPtr, false);
    return ret;
  }

  public SWIGTYPE_p_unsigned_short GetGlyphRangesVietnamese() {
    global::System.IntPtr cPtr = ImGuiPINVOKE.ImFontAtlas_GetGlyphRangesVietnamese(swigCPtr);
    SWIGTYPE_p_unsigned_short ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_unsigned_short(cPtr, false);
    return ret;
  }

  public int AddCustomRectRegular(int width, int height) {
    int ret = ImGuiPINVOKE.ImFontAtlas_AddCustomRectRegular(swigCPtr, width, height);
    return ret;
  }

  public int AddCustomRectFontGlyph(ImFont font, ushort id, int width, int height, float advance_x, ImVec2 offset) {
    int ret = ImGuiPINVOKE.ImFontAtlas_AddCustomRectFontGlyph__SWIG_0(swigCPtr, ImFont.getCPtr(font), id, width, height, advance_x, ImVec2.getCPtr(offset));
    if (ImGuiPINVOKE.SWIGPendingException.Pending) throw ImGuiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int AddCustomRectFontGlyph(ImFont font, ushort id, int width, int height, float advance_x) {
    int ret = ImGuiPINVOKE.ImFontAtlas_AddCustomRectFontGlyph__SWIG_1(swigCPtr, ImFont.getCPtr(font), id, width, height, advance_x);
    return ret;
  }

  public ImFontAtlasCustomRect GetCustomRectByIndex(int index) {
    global::System.IntPtr cPtr = ImGuiPINVOKE.ImFontAtlas_GetCustomRectByIndex(swigCPtr, index);
    ImFontAtlasCustomRect ret = (cPtr == global::System.IntPtr.Zero) ? null : new ImFontAtlasCustomRect(cPtr, false);
    return ret;
  }

  public void CalcCustomRectUV(ImFontAtlasCustomRect rect, ImVec2 out_uv_min, ImVec2 out_uv_max) {
    ImGuiPINVOKE.ImFontAtlas_CalcCustomRectUV(swigCPtr, ImFontAtlasCustomRect.getCPtr(rect), ImVec2.getCPtr(out_uv_min), ImVec2.getCPtr(out_uv_max));
  }

  public bool GetMouseCursorTexData(int cursor, ImVec2 out_offset, ImVec2 out_size, ImVec2 out_uv_border, ImVec2 out_uv_fill) {
    bool ret = ImGuiPINVOKE.ImFontAtlas_GetMouseCursorTexData(swigCPtr, cursor, ImVec2.getCPtr(out_offset), ImVec2.getCPtr(out_size), ImVec2.getCPtr(out_uv_border), ImVec2.getCPtr(out_uv_fill));
    return ret;
  }

  public int Flags {
    set {
      ImGuiPINVOKE.ImFontAtlas_Flags_set(swigCPtr, value);
    } 
    get {
      int ret = ImGuiPINVOKE.ImFontAtlas_Flags_get(swigCPtr);
      return ret;
    } 
  }

  public SWIGTYPE_p_void TexID {
    set {
      ImGuiPINVOKE.ImFontAtlas_TexID_set(swigCPtr, SWIGTYPE_p_void.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = ImGuiPINVOKE.ImFontAtlas_TexID_get(swigCPtr);
      SWIGTYPE_p_void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
      return ret;
    } 
  }

  public int TexDesiredWidth {
    set {
      ImGuiPINVOKE.ImFontAtlas_TexDesiredWidth_set(swigCPtr, value);
    } 
    get {
      int ret = ImGuiPINVOKE.ImFontAtlas_TexDesiredWidth_get(swigCPtr);
      return ret;
    } 
  }

  public int TexGlyphPadding {
    set {
      ImGuiPINVOKE.ImFontAtlas_TexGlyphPadding_set(swigCPtr, value);
    } 
    get {
      int ret = ImGuiPINVOKE.ImFontAtlas_TexGlyphPadding_get(swigCPtr);
      return ret;
    } 
  }

  public bool Locked {
    set {
      ImGuiPINVOKE.ImFontAtlas_Locked_set(swigCPtr, value);
    } 
    get {
      bool ret = ImGuiPINVOKE.ImFontAtlas_Locked_get(swigCPtr);
      return ret;
    } 
  }

  public SWIGTYPE_p_void UserData {
    set {
      ImGuiPINVOKE.ImFontAtlas_UserData_set(swigCPtr, SWIGTYPE_p_void.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = ImGuiPINVOKE.ImFontAtlas_UserData_get(swigCPtr);
      SWIGTYPE_p_void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
      return ret;
    } 
  }

  public bool TexReady {
    set {
      ImGuiPINVOKE.ImFontAtlas_TexReady_set(swigCPtr, value);
    } 
    get {
      bool ret = ImGuiPINVOKE.ImFontAtlas_TexReady_get(swigCPtr);
      return ret;
    } 
  }

  public bool TexPixelsUseColors {
    set {
      ImGuiPINVOKE.ImFontAtlas_TexPixelsUseColors_set(swigCPtr, value);
    } 
    get {
      bool ret = ImGuiPINVOKE.ImFontAtlas_TexPixelsUseColors_get(swigCPtr);
      return ret;
    } 
  }

  public SWIGTYPE_p_unsigned_char TexPixelsAlpha8 {
    set {
      ImGuiPINVOKE.ImFontAtlas_TexPixelsAlpha8_set(swigCPtr, SWIGTYPE_p_unsigned_char.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = ImGuiPINVOKE.ImFontAtlas_TexPixelsAlpha8_get(swigCPtr);
      SWIGTYPE_p_unsigned_char ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_unsigned_char(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_unsigned_int TexPixelsRGBA32 {
    set {
      ImGuiPINVOKE.ImFontAtlas_TexPixelsRGBA32_set(swigCPtr, SWIGTYPE_p_unsigned_int.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = ImGuiPINVOKE.ImFontAtlas_TexPixelsRGBA32_get(swigCPtr);
      SWIGTYPE_p_unsigned_int ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_unsigned_int(cPtr, false);
      return ret;
    } 
  }

  public int TexWidth {
    set {
      ImGuiPINVOKE.ImFontAtlas_TexWidth_set(swigCPtr, value);
    } 
    get {
      int ret = ImGuiPINVOKE.ImFontAtlas_TexWidth_get(swigCPtr);
      return ret;
    } 
  }

  public int TexHeight {
    set {
      ImGuiPINVOKE.ImFontAtlas_TexHeight_set(swigCPtr, value);
    } 
    get {
      int ret = ImGuiPINVOKE.ImFontAtlas_TexHeight_get(swigCPtr);
      return ret;
    } 
  }

  public ImVec2 TexUvScale {
    set {
      ImGuiPINVOKE.ImFontAtlas_TexUvScale_set(swigCPtr, ImVec2.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = ImGuiPINVOKE.ImFontAtlas_TexUvScale_get(swigCPtr);
      ImVec2 ret = (cPtr == global::System.IntPtr.Zero) ? null : new ImVec2(cPtr, false);
      return ret;
    } 
  }

  public ImVec2 TexUvWhitePixel {
    set {
      ImGuiPINVOKE.ImFontAtlas_TexUvWhitePixel_set(swigCPtr, ImVec2.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = ImGuiPINVOKE.ImFontAtlas_TexUvWhitePixel_get(swigCPtr);
      ImVec2 ret = (cPtr == global::System.IntPtr.Zero) ? null : new ImVec2(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_ImVectorT_ImFont_p_t Fonts {
    set {
      ImGuiPINVOKE.ImFontAtlas_Fonts_set(swigCPtr, SWIGTYPE_p_ImVectorT_ImFont_p_t.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = ImGuiPINVOKE.ImFontAtlas_Fonts_get(swigCPtr);
      SWIGTYPE_p_ImVectorT_ImFont_p_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_ImVectorT_ImFont_p_t(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_ImVectorT_ImFontAtlasCustomRect_t CustomRects {
    set {
      ImGuiPINVOKE.ImFontAtlas_CustomRects_set(swigCPtr, SWIGTYPE_p_ImVectorT_ImFontAtlasCustomRect_t.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = ImGuiPINVOKE.ImFontAtlas_CustomRects_get(swigCPtr);
      SWIGTYPE_p_ImVectorT_ImFontAtlasCustomRect_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_ImVectorT_ImFontAtlasCustomRect_t(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_ImVectorT_ImFontConfig_t ConfigData {
    set {
      ImGuiPINVOKE.ImFontAtlas_ConfigData_set(swigCPtr, SWIGTYPE_p_ImVectorT_ImFontConfig_t.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = ImGuiPINVOKE.ImFontAtlas_ConfigData_get(swigCPtr);
      SWIGTYPE_p_ImVectorT_ImFontConfig_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_ImVectorT_ImFontConfig_t(cPtr, false);
      return ret;
    } 
  }

  public ImVec4 TexUvLines {
    set {
      ImGuiPINVOKE.ImFontAtlas_TexUvLines_set(swigCPtr, ImVec4.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = ImGuiPINVOKE.ImFontAtlas_TexUvLines_get(swigCPtr);
      ImVec4 ret = (cPtr == global::System.IntPtr.Zero) ? null : new ImVec4(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_ImFontBuilderIO FontBuilderIO {
    set {
      ImGuiPINVOKE.ImFontAtlas_FontBuilderIO_set(swigCPtr, SWIGTYPE_p_ImFontBuilderIO.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = ImGuiPINVOKE.ImFontAtlas_FontBuilderIO_get(swigCPtr);
      SWIGTYPE_p_ImFontBuilderIO ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_ImFontBuilderIO(cPtr, false);
      return ret;
    } 
  }

  public uint FontBuilderFlags {
    set {
      ImGuiPINVOKE.ImFontAtlas_FontBuilderFlags_set(swigCPtr, value);
    } 
    get {
      uint ret = ImGuiPINVOKE.ImFontAtlas_FontBuilderFlags_get(swigCPtr);
      return ret;
    } 
  }

  public int PackIdMouseCursors {
    set {
      ImGuiPINVOKE.ImFontAtlas_PackIdMouseCursors_set(swigCPtr, value);
    } 
    get {
      int ret = ImGuiPINVOKE.ImFontAtlas_PackIdMouseCursors_get(swigCPtr);
      return ret;
    } 
  }

  public int PackIdLines {
    set {
      ImGuiPINVOKE.ImFontAtlas_PackIdLines_set(swigCPtr, value);
    } 
    get {
      int ret = ImGuiPINVOKE.ImFontAtlas_PackIdLines_get(swigCPtr);
      return ret;
    } 
  }

}

}
