//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.2.1
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace org.ogre {

public class ImFontConfig : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal ImFontConfig(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ImFontConfig obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(ImFontConfig obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~ImFontConfig() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          ImGuiPINVOKE.delete_ImFontConfig(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public SWIGTYPE_p_void FontData {
    set {
      ImGuiPINVOKE.ImFontConfig_FontData_set(swigCPtr, SWIGTYPE_p_void.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = ImGuiPINVOKE.ImFontConfig_FontData_get(swigCPtr);
      SWIGTYPE_p_void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
      return ret;
    } 
  }

  public int FontDataSize {
    set {
      ImGuiPINVOKE.ImFontConfig_FontDataSize_set(swigCPtr, value);
    } 
    get {
      int ret = ImGuiPINVOKE.ImFontConfig_FontDataSize_get(swigCPtr);
      return ret;
    } 
  }

  public bool FontDataOwnedByAtlas {
    set {
      ImGuiPINVOKE.ImFontConfig_FontDataOwnedByAtlas_set(swigCPtr, value);
    } 
    get {
      bool ret = ImGuiPINVOKE.ImFontConfig_FontDataOwnedByAtlas_get(swigCPtr);
      return ret;
    } 
  }

  public int FontNo {
    set {
      ImGuiPINVOKE.ImFontConfig_FontNo_set(swigCPtr, value);
    } 
    get {
      int ret = ImGuiPINVOKE.ImFontConfig_FontNo_get(swigCPtr);
      return ret;
    } 
  }

  public float SizePixels {
    set {
      ImGuiPINVOKE.ImFontConfig_SizePixels_set(swigCPtr, value);
    } 
    get {
      float ret = ImGuiPINVOKE.ImFontConfig_SizePixels_get(swigCPtr);
      return ret;
    } 
  }

  public int OversampleH {
    set {
      ImGuiPINVOKE.ImFontConfig_OversampleH_set(swigCPtr, value);
    } 
    get {
      int ret = ImGuiPINVOKE.ImFontConfig_OversampleH_get(swigCPtr);
      return ret;
    } 
  }

  public int OversampleV {
    set {
      ImGuiPINVOKE.ImFontConfig_OversampleV_set(swigCPtr, value);
    } 
    get {
      int ret = ImGuiPINVOKE.ImFontConfig_OversampleV_get(swigCPtr);
      return ret;
    } 
  }

  public bool PixelSnapH {
    set {
      ImGuiPINVOKE.ImFontConfig_PixelSnapH_set(swigCPtr, value);
    } 
    get {
      bool ret = ImGuiPINVOKE.ImFontConfig_PixelSnapH_get(swigCPtr);
      return ret;
    } 
  }

  public ImVec2 GlyphExtraSpacing {
    set {
      ImGuiPINVOKE.ImFontConfig_GlyphExtraSpacing_set(swigCPtr, ImVec2.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = ImGuiPINVOKE.ImFontConfig_GlyphExtraSpacing_get(swigCPtr);
      ImVec2 ret = (cPtr == global::System.IntPtr.Zero) ? null : new ImVec2(cPtr, false);
      return ret;
    } 
  }

  public ImVec2 GlyphOffset {
    set {
      ImGuiPINVOKE.ImFontConfig_GlyphOffset_set(swigCPtr, ImVec2.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = ImGuiPINVOKE.ImFontConfig_GlyphOffset_get(swigCPtr);
      ImVec2 ret = (cPtr == global::System.IntPtr.Zero) ? null : new ImVec2(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_unsigned_short GlyphRanges {
    set {
      ImGuiPINVOKE.ImFontConfig_GlyphRanges_set(swigCPtr, SWIGTYPE_p_unsigned_short.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = ImGuiPINVOKE.ImFontConfig_GlyphRanges_get(swigCPtr);
      SWIGTYPE_p_unsigned_short ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_unsigned_short(cPtr, false);
      return ret;
    } 
  }

  public float GlyphMinAdvanceX {
    set {
      ImGuiPINVOKE.ImFontConfig_GlyphMinAdvanceX_set(swigCPtr, value);
    } 
    get {
      float ret = ImGuiPINVOKE.ImFontConfig_GlyphMinAdvanceX_get(swigCPtr);
      return ret;
    } 
  }

  public float GlyphMaxAdvanceX {
    set {
      ImGuiPINVOKE.ImFontConfig_GlyphMaxAdvanceX_set(swigCPtr, value);
    } 
    get {
      float ret = ImGuiPINVOKE.ImFontConfig_GlyphMaxAdvanceX_get(swigCPtr);
      return ret;
    } 
  }

  public bool MergeMode {
    set {
      ImGuiPINVOKE.ImFontConfig_MergeMode_set(swigCPtr, value);
    } 
    get {
      bool ret = ImGuiPINVOKE.ImFontConfig_MergeMode_get(swigCPtr);
      return ret;
    } 
  }

  public uint FontBuilderFlags {
    set {
      ImGuiPINVOKE.ImFontConfig_FontBuilderFlags_set(swigCPtr, value);
    } 
    get {
      uint ret = ImGuiPINVOKE.ImFontConfig_FontBuilderFlags_get(swigCPtr);
      return ret;
    } 
  }

  public float RasterizerMultiply {
    set {
      ImGuiPINVOKE.ImFontConfig_RasterizerMultiply_set(swigCPtr, value);
    } 
    get {
      float ret = ImGuiPINVOKE.ImFontConfig_RasterizerMultiply_get(swigCPtr);
      return ret;
    } 
  }

  public float RasterizerDensity {
    set {
      ImGuiPINVOKE.ImFontConfig_RasterizerDensity_set(swigCPtr, value);
    } 
    get {
      float ret = ImGuiPINVOKE.ImFontConfig_RasterizerDensity_get(swigCPtr);
      return ret;
    } 
  }

  public ushort EllipsisChar {
    set {
      ImGuiPINVOKE.ImFontConfig_EllipsisChar_set(swigCPtr, value);
    } 
    get {
      ushort ret = ImGuiPINVOKE.ImFontConfig_EllipsisChar_get(swigCPtr);
      return ret;
    } 
  }

  public string Name {
    set {
      ImGuiPINVOKE.ImFontConfig_Name_set(swigCPtr, value);
    } 
    get {
      string ret = ImGuiPINVOKE.ImFontConfig_Name_get(swigCPtr);
      return ret;
    } 
  }

  public ImFont DstFont {
    set {
      ImGuiPINVOKE.ImFontConfig_DstFont_set(swigCPtr, ImFont.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = ImGuiPINVOKE.ImFontConfig_DstFont_get(swigCPtr);
      ImFont ret = (cPtr == global::System.IntPtr.Zero) ? null : new ImFont(cPtr, false);
      return ret;
    } 
  }

  public ImFontConfig() : this(ImGuiPINVOKE.new_ImFontConfig(), true) {
  }

}

}
