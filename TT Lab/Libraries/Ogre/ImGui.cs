//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.2.1
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace org.ogre {

public class ImGui {
  public static SWIGTYPE_p_ImGuiContext CreateContext(ImFontAtlas shared_font_atlas) {
    global::System.IntPtr cPtr = ImGuiPINVOKE.CreateContext__SWIG_0(ImFontAtlas.getCPtr(shared_font_atlas));
    SWIGTYPE_p_ImGuiContext ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_ImGuiContext(cPtr, false);
    return ret;
  }

  public static SWIGTYPE_p_ImGuiContext CreateContext() {
    global::System.IntPtr cPtr = ImGuiPINVOKE.CreateContext__SWIG_1();
    SWIGTYPE_p_ImGuiContext ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_ImGuiContext(cPtr, false);
    return ret;
  }

  public static void DestroyContext(SWIGTYPE_p_ImGuiContext ctx) {
    ImGuiPINVOKE.DestroyContext__SWIG_0(SWIGTYPE_p_ImGuiContext.getCPtr(ctx));
  }

  public static void DestroyContext() {
    ImGuiPINVOKE.DestroyContext__SWIG_1();
  }

  public static SWIGTYPE_p_ImGuiContext GetCurrentContext() {
    global::System.IntPtr cPtr = ImGuiPINVOKE.GetCurrentContext();
    SWIGTYPE_p_ImGuiContext ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_ImGuiContext(cPtr, false);
    return ret;
  }

  public static void SetCurrentContext(SWIGTYPE_p_ImGuiContext ctx) {
    ImGuiPINVOKE.SetCurrentContext(SWIGTYPE_p_ImGuiContext.getCPtr(ctx));
  }

  public static ImGuiIO GetIO() {
    ImGuiIO ret = new ImGuiIO(ImGuiPINVOKE.GetIO(), false);
    return ret;
  }

  public static ImGuiPlatformIO GetPlatformIO() {
    ImGuiPlatformIO ret = new ImGuiPlatformIO(ImGuiPINVOKE.GetPlatformIO(), false);
    return ret;
  }

  public static ImGuiStyle GetStyle() {
    ImGuiStyle ret = new ImGuiStyle(ImGuiPINVOKE.GetStyle(), false);
    return ret;
  }

  public static void NewFrame() {
    ImGuiPINVOKE.NewFrame();
  }

  public static void EndFrame() {
    ImGuiPINVOKE.EndFrame();
  }

  public static void Render() {
    ImGuiPINVOKE.Render();
  }

  public static ImDrawData GetDrawData() {
    global::System.IntPtr cPtr = ImGuiPINVOKE.GetDrawData();
    ImDrawData ret = (cPtr == global::System.IntPtr.Zero) ? null : new ImDrawData(cPtr, false);
    return ret;
  }

  public static void ShowDemoWindow(ref bool p_open) {
    ImGuiPINVOKE.ShowDemoWindow__SWIG_0(ref p_open);
  }

  public static void ShowDemoWindow() {
    ImGuiPINVOKE.ShowDemoWindow__SWIG_1();
  }

  public static void ShowMetricsWindow(ref bool p_open) {
    ImGuiPINVOKE.ShowMetricsWindow__SWIG_0(ref p_open);
  }

  public static void ShowMetricsWindow() {
    ImGuiPINVOKE.ShowMetricsWindow__SWIG_1();
  }

  public static void ShowDebugLogWindow(ref bool p_open) {
    ImGuiPINVOKE.ShowDebugLogWindow__SWIG_0(ref p_open);
  }

  public static void ShowDebugLogWindow() {
    ImGuiPINVOKE.ShowDebugLogWindow__SWIG_1();
  }

  public static void ShowIDStackToolWindow(ref bool p_open) {
    ImGuiPINVOKE.ShowIDStackToolWindow__SWIG_0(ref p_open);
  }

  public static void ShowIDStackToolWindow() {
    ImGuiPINVOKE.ShowIDStackToolWindow__SWIG_1();
  }

  public static void ShowAboutWindow(ref bool p_open) {
    ImGuiPINVOKE.ShowAboutWindow__SWIG_0(ref p_open);
  }

  public static void ShowAboutWindow() {
    ImGuiPINVOKE.ShowAboutWindow__SWIG_1();
  }

  public static void ShowStyleEditor(ImGuiStyle ref_) {
    ImGuiPINVOKE.ShowStyleEditor__SWIG_0(ImGuiStyle.getCPtr(ref_));
  }

  public static void ShowStyleEditor() {
    ImGuiPINVOKE.ShowStyleEditor__SWIG_1();
  }

  public static bool ShowStyleSelector(string label) {
    bool ret = ImGuiPINVOKE.ShowStyleSelector(label);
    return ret;
  }

  public static void ShowFontSelector(string label) {
    ImGuiPINVOKE.ShowFontSelector(label);
  }

  public static void ShowUserGuide() {
    ImGuiPINVOKE.ShowUserGuide();
  }

  public static string GetVersion() {
    string ret = ImGuiPINVOKE.GetVersion();
    return ret;
  }

  public static void StyleColorsDark(ImGuiStyle dst) {
    ImGuiPINVOKE.StyleColorsDark__SWIG_0(ImGuiStyle.getCPtr(dst));
  }

  public static void StyleColorsDark() {
    ImGuiPINVOKE.StyleColorsDark__SWIG_1();
  }

  public static void StyleColorsLight(ImGuiStyle dst) {
    ImGuiPINVOKE.StyleColorsLight__SWIG_0(ImGuiStyle.getCPtr(dst));
  }

  public static void StyleColorsLight() {
    ImGuiPINVOKE.StyleColorsLight__SWIG_1();
  }

  public static void StyleColorsClassic(ImGuiStyle dst) {
    ImGuiPINVOKE.StyleColorsClassic__SWIG_0(ImGuiStyle.getCPtr(dst));
  }

  public static void StyleColorsClassic() {
    ImGuiPINVOKE.StyleColorsClassic__SWIG_1();
  }

  public static bool Begin(string name, ref bool p_open, int flags) {
    bool ret = ImGuiPINVOKE.Begin__SWIG_0(name, ref p_open, flags);
    return ret;
  }

  public static bool Begin(string name, ref bool p_open) {
    bool ret = ImGuiPINVOKE.Begin__SWIG_1(name, ref p_open);
    return ret;
  }

  public static bool Begin(string name) {
    bool ret = ImGuiPINVOKE.Begin__SWIG_2(name);
    return ret;
  }

  public static void End() {
    ImGuiPINVOKE.End();
  }

  public static bool BeginChild(string str_id, ImVec2 size, int child_flags, int window_flags) {
    bool ret = ImGuiPINVOKE.BeginChild__SWIG_0(str_id, ImVec2.getCPtr(size), child_flags, window_flags);
    if (ImGuiPINVOKE.SWIGPendingException.Pending) throw ImGuiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool BeginChild(string str_id, ImVec2 size, int child_flags) {
    bool ret = ImGuiPINVOKE.BeginChild__SWIG_1(str_id, ImVec2.getCPtr(size), child_flags);
    if (ImGuiPINVOKE.SWIGPendingException.Pending) throw ImGuiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool BeginChild(string str_id, ImVec2 size) {
    bool ret = ImGuiPINVOKE.BeginChild__SWIG_2(str_id, ImVec2.getCPtr(size));
    if (ImGuiPINVOKE.SWIGPendingException.Pending) throw ImGuiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool BeginChild(string str_id) {
    bool ret = ImGuiPINVOKE.BeginChild__SWIG_3(str_id);
    return ret;
  }

  public static bool BeginChild(uint id, ImVec2 size, int child_flags, int window_flags) {
    bool ret = ImGuiPINVOKE.BeginChild__SWIG_4(id, ImVec2.getCPtr(size), child_flags, window_flags);
    if (ImGuiPINVOKE.SWIGPendingException.Pending) throw ImGuiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool BeginChild(uint id, ImVec2 size, int child_flags) {
    bool ret = ImGuiPINVOKE.BeginChild__SWIG_5(id, ImVec2.getCPtr(size), child_flags);
    if (ImGuiPINVOKE.SWIGPendingException.Pending) throw ImGuiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool BeginChild(uint id, ImVec2 size) {
    bool ret = ImGuiPINVOKE.BeginChild__SWIG_6(id, ImVec2.getCPtr(size));
    if (ImGuiPINVOKE.SWIGPendingException.Pending) throw ImGuiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool BeginChild(uint id) {
    bool ret = ImGuiPINVOKE.BeginChild__SWIG_7(id);
    return ret;
  }

  public static void EndChild() {
    ImGuiPINVOKE.EndChild();
  }

  public static bool IsWindowAppearing() {
    bool ret = ImGuiPINVOKE.IsWindowAppearing();
    return ret;
  }

  public static bool IsWindowCollapsed() {
    bool ret = ImGuiPINVOKE.IsWindowCollapsed();
    return ret;
  }

  public static bool IsWindowFocused(int flags) {
    bool ret = ImGuiPINVOKE.IsWindowFocused__SWIG_0(flags);
    return ret;
  }

  public static bool IsWindowFocused() {
    bool ret = ImGuiPINVOKE.IsWindowFocused__SWIG_1();
    return ret;
  }

  public static bool IsWindowHovered(int flags) {
    bool ret = ImGuiPINVOKE.IsWindowHovered__SWIG_0(flags);
    return ret;
  }

  public static bool IsWindowHovered() {
    bool ret = ImGuiPINVOKE.IsWindowHovered__SWIG_1();
    return ret;
  }

  public static ImDrawList GetWindowDrawList() {
    global::System.IntPtr cPtr = ImGuiPINVOKE.GetWindowDrawList();
    ImDrawList ret = (cPtr == global::System.IntPtr.Zero) ? null : new ImDrawList(cPtr, false);
    return ret;
  }

  public static ImVec2 GetWindowPos() {
    ImVec2 ret = new ImVec2(ImGuiPINVOKE.GetWindowPos(), true);
    return ret;
  }

  public static ImVec2 GetWindowSize() {
    ImVec2 ret = new ImVec2(ImGuiPINVOKE.GetWindowSize(), true);
    return ret;
  }

  public static float GetWindowWidth() {
    float ret = ImGuiPINVOKE.GetWindowWidth();
    return ret;
  }

  public static float GetWindowHeight() {
    float ret = ImGuiPINVOKE.GetWindowHeight();
    return ret;
  }

  public static void SetNextWindowPos(ImVec2 pos, int cond, ImVec2 pivot) {
    ImGuiPINVOKE.SetNextWindowPos__SWIG_0(ImVec2.getCPtr(pos), cond, ImVec2.getCPtr(pivot));
    if (ImGuiPINVOKE.SWIGPendingException.Pending) throw ImGuiPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void SetNextWindowPos(ImVec2 pos, int cond) {
    ImGuiPINVOKE.SetNextWindowPos__SWIG_1(ImVec2.getCPtr(pos), cond);
    if (ImGuiPINVOKE.SWIGPendingException.Pending) throw ImGuiPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void SetNextWindowPos(ImVec2 pos) {
    ImGuiPINVOKE.SetNextWindowPos__SWIG_2(ImVec2.getCPtr(pos));
    if (ImGuiPINVOKE.SWIGPendingException.Pending) throw ImGuiPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void SetNextWindowSize(ImVec2 size, int cond) {
    ImGuiPINVOKE.SetNextWindowSize__SWIG_0(ImVec2.getCPtr(size), cond);
    if (ImGuiPINVOKE.SWIGPendingException.Pending) throw ImGuiPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void SetNextWindowSize(ImVec2 size) {
    ImGuiPINVOKE.SetNextWindowSize__SWIG_1(ImVec2.getCPtr(size));
    if (ImGuiPINVOKE.SWIGPendingException.Pending) throw ImGuiPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void SetNextWindowSizeConstraints(ImVec2 size_min, ImVec2 size_max, SWIGTYPE_p_f_p_ImGuiSizeCallbackData__void custom_callback, SWIGTYPE_p_void custom_callback_data) {
    ImGuiPINVOKE.SetNextWindowSizeConstraints__SWIG_0(ImVec2.getCPtr(size_min), ImVec2.getCPtr(size_max), SWIGTYPE_p_f_p_ImGuiSizeCallbackData__void.getCPtr(custom_callback), SWIGTYPE_p_void.getCPtr(custom_callback_data));
    if (ImGuiPINVOKE.SWIGPendingException.Pending) throw ImGuiPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void SetNextWindowSizeConstraints(ImVec2 size_min, ImVec2 size_max, SWIGTYPE_p_f_p_ImGuiSizeCallbackData__void custom_callback) {
    ImGuiPINVOKE.SetNextWindowSizeConstraints__SWIG_1(ImVec2.getCPtr(size_min), ImVec2.getCPtr(size_max), SWIGTYPE_p_f_p_ImGuiSizeCallbackData__void.getCPtr(custom_callback));
    if (ImGuiPINVOKE.SWIGPendingException.Pending) throw ImGuiPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void SetNextWindowSizeConstraints(ImVec2 size_min, ImVec2 size_max) {
    ImGuiPINVOKE.SetNextWindowSizeConstraints__SWIG_2(ImVec2.getCPtr(size_min), ImVec2.getCPtr(size_max));
    if (ImGuiPINVOKE.SWIGPendingException.Pending) throw ImGuiPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void SetNextWindowContentSize(ImVec2 size) {
    ImGuiPINVOKE.SetNextWindowContentSize(ImVec2.getCPtr(size));
    if (ImGuiPINVOKE.SWIGPendingException.Pending) throw ImGuiPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void SetNextWindowCollapsed(bool collapsed, int cond) {
    ImGuiPINVOKE.SetNextWindowCollapsed__SWIG_0(collapsed, cond);
  }

  public static void SetNextWindowCollapsed(bool collapsed) {
    ImGuiPINVOKE.SetNextWindowCollapsed__SWIG_1(collapsed);
  }

  public static void SetNextWindowFocus() {
    ImGuiPINVOKE.SetNextWindowFocus();
  }

  public static void SetNextWindowScroll(ImVec2 scroll) {
    ImGuiPINVOKE.SetNextWindowScroll(ImVec2.getCPtr(scroll));
    if (ImGuiPINVOKE.SWIGPendingException.Pending) throw ImGuiPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void SetNextWindowBgAlpha(float alpha) {
    ImGuiPINVOKE.SetNextWindowBgAlpha(alpha);
  }

  public static void SetWindowPos(ImVec2 pos, int cond) {
    ImGuiPINVOKE.SetWindowPos__SWIG_0(ImVec2.getCPtr(pos), cond);
    if (ImGuiPINVOKE.SWIGPendingException.Pending) throw ImGuiPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void SetWindowPos(ImVec2 pos) {
    ImGuiPINVOKE.SetWindowPos__SWIG_1(ImVec2.getCPtr(pos));
    if (ImGuiPINVOKE.SWIGPendingException.Pending) throw ImGuiPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void SetWindowSize(ImVec2 size, int cond) {
    ImGuiPINVOKE.SetWindowSize__SWIG_0(ImVec2.getCPtr(size), cond);
    if (ImGuiPINVOKE.SWIGPendingException.Pending) throw ImGuiPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void SetWindowSize(ImVec2 size) {
    ImGuiPINVOKE.SetWindowSize__SWIG_1(ImVec2.getCPtr(size));
    if (ImGuiPINVOKE.SWIGPendingException.Pending) throw ImGuiPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void SetWindowCollapsed(bool collapsed, int cond) {
    ImGuiPINVOKE.SetWindowCollapsed__SWIG_0(collapsed, cond);
  }

  public static void SetWindowCollapsed(bool collapsed) {
    ImGuiPINVOKE.SetWindowCollapsed__SWIG_1(collapsed);
  }

  public static void SetWindowFocus() {
    ImGuiPINVOKE.SetWindowFocus__SWIG_0();
  }

  public static void SetWindowFontScale(float scale) {
    ImGuiPINVOKE.SetWindowFontScale(scale);
  }

  public static void SetWindowPos(string name, ImVec2 pos, int cond) {
    ImGuiPINVOKE.SetWindowPos__SWIG_2(name, ImVec2.getCPtr(pos), cond);
    if (ImGuiPINVOKE.SWIGPendingException.Pending) throw ImGuiPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void SetWindowPos(string name, ImVec2 pos) {
    ImGuiPINVOKE.SetWindowPos__SWIG_3(name, ImVec2.getCPtr(pos));
    if (ImGuiPINVOKE.SWIGPendingException.Pending) throw ImGuiPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void SetWindowSize(string name, ImVec2 size, int cond) {
    ImGuiPINVOKE.SetWindowSize__SWIG_2(name, ImVec2.getCPtr(size), cond);
    if (ImGuiPINVOKE.SWIGPendingException.Pending) throw ImGuiPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void SetWindowSize(string name, ImVec2 size) {
    ImGuiPINVOKE.SetWindowSize__SWIG_3(name, ImVec2.getCPtr(size));
    if (ImGuiPINVOKE.SWIGPendingException.Pending) throw ImGuiPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void SetWindowCollapsed(string name, bool collapsed, int cond) {
    ImGuiPINVOKE.SetWindowCollapsed__SWIG_2(name, collapsed, cond);
  }

  public static void SetWindowCollapsed(string name, bool collapsed) {
    ImGuiPINVOKE.SetWindowCollapsed__SWIG_3(name, collapsed);
  }

  public static void SetWindowFocus(string name) {
    ImGuiPINVOKE.SetWindowFocus__SWIG_1(name);
  }

  public static float GetScrollX() {
    float ret = ImGuiPINVOKE.GetScrollX();
    return ret;
  }

  public static float GetScrollY() {
    float ret = ImGuiPINVOKE.GetScrollY();
    return ret;
  }

  public static void SetScrollX(float scroll_x) {
    ImGuiPINVOKE.SetScrollX(scroll_x);
  }

  public static void SetScrollY(float scroll_y) {
    ImGuiPINVOKE.SetScrollY(scroll_y);
  }

  public static float GetScrollMaxX() {
    float ret = ImGuiPINVOKE.GetScrollMaxX();
    return ret;
  }

  public static float GetScrollMaxY() {
    float ret = ImGuiPINVOKE.GetScrollMaxY();
    return ret;
  }

  public static void SetScrollHereX(float center_x_ratio) {
    ImGuiPINVOKE.SetScrollHereX__SWIG_0(center_x_ratio);
  }

  public static void SetScrollHereX() {
    ImGuiPINVOKE.SetScrollHereX__SWIG_1();
  }

  public static void SetScrollHereY(float center_y_ratio) {
    ImGuiPINVOKE.SetScrollHereY__SWIG_0(center_y_ratio);
  }

  public static void SetScrollHereY() {
    ImGuiPINVOKE.SetScrollHereY__SWIG_1();
  }

  public static void SetScrollFromPosX(float local_x, float center_x_ratio) {
    ImGuiPINVOKE.SetScrollFromPosX__SWIG_0(local_x, center_x_ratio);
  }

  public static void SetScrollFromPosX(float local_x) {
    ImGuiPINVOKE.SetScrollFromPosX__SWIG_1(local_x);
  }

  public static void SetScrollFromPosY(float local_y, float center_y_ratio) {
    ImGuiPINVOKE.SetScrollFromPosY__SWIG_0(local_y, center_y_ratio);
  }

  public static void SetScrollFromPosY(float local_y) {
    ImGuiPINVOKE.SetScrollFromPosY__SWIG_1(local_y);
  }

  public static void PushFont(ImFont font) {
    ImGuiPINVOKE.PushFont(ImFont.getCPtr(font));
  }

  public static void PopFont() {
    ImGuiPINVOKE.PopFont();
  }

  public static void PushStyleColor(int idx, uint col) {
    ImGuiPINVOKE.PushStyleColor__SWIG_0(idx, col);
  }

  public static void PushStyleColor(int idx, ImVec4 col) {
    ImGuiPINVOKE.PushStyleColor__SWIG_1(idx, ImVec4.getCPtr(col));
    if (ImGuiPINVOKE.SWIGPendingException.Pending) throw ImGuiPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void PopStyleColor(int count) {
    ImGuiPINVOKE.PopStyleColor__SWIG_0(count);
  }

  public static void PopStyleColor() {
    ImGuiPINVOKE.PopStyleColor__SWIG_1();
  }

  public static void PushStyleVar(int idx, float val) {
    ImGuiPINVOKE.PushStyleVar__SWIG_0(idx, val);
  }

  public static void PushStyleVar(int idx, ImVec2 val) {
    ImGuiPINVOKE.PushStyleVar__SWIG_1(idx, ImVec2.getCPtr(val));
    if (ImGuiPINVOKE.SWIGPendingException.Pending) throw ImGuiPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void PushStyleVarX(int idx, float val_x) {
    ImGuiPINVOKE.PushStyleVarX(idx, val_x);
  }

  public static void PushStyleVarY(int idx, float val_y) {
    ImGuiPINVOKE.PushStyleVarY(idx, val_y);
  }

  public static void PopStyleVar(int count) {
    ImGuiPINVOKE.PopStyleVar__SWIG_0(count);
  }

  public static void PopStyleVar() {
    ImGuiPINVOKE.PopStyleVar__SWIG_1();
  }

  public static void PushItemFlag(int option, bool enabled) {
    ImGuiPINVOKE.PushItemFlag(option, enabled);
  }

  public static void PopItemFlag() {
    ImGuiPINVOKE.PopItemFlag();
  }

  public static void PushItemWidth(float item_width) {
    ImGuiPINVOKE.PushItemWidth(item_width);
  }

  public static void PopItemWidth() {
    ImGuiPINVOKE.PopItemWidth();
  }

  public static void SetNextItemWidth(float item_width) {
    ImGuiPINVOKE.SetNextItemWidth(item_width);
  }

  public static float CalcItemWidth() {
    float ret = ImGuiPINVOKE.CalcItemWidth();
    return ret;
  }

  public static void PushTextWrapPos(float wrap_local_pos_x) {
    ImGuiPINVOKE.PushTextWrapPos__SWIG_0(wrap_local_pos_x);
  }

  public static void PushTextWrapPos() {
    ImGuiPINVOKE.PushTextWrapPos__SWIG_1();
  }

  public static void PopTextWrapPos() {
    ImGuiPINVOKE.PopTextWrapPos();
  }

  public static ImFont GetFont() {
    global::System.IntPtr cPtr = ImGuiPINVOKE.GetFont();
    ImFont ret = (cPtr == global::System.IntPtr.Zero) ? null : new ImFont(cPtr, false);
    return ret;
  }

  public static float GetFontSize() {
    float ret = ImGuiPINVOKE.GetFontSize();
    return ret;
  }

  public static ImVec2 GetFontTexUvWhitePixel() {
    ImVec2 ret = new ImVec2(ImGuiPINVOKE.GetFontTexUvWhitePixel(), true);
    return ret;
  }

  public static uint GetColorU32(int idx, float alpha_mul) {
    uint ret = ImGuiPINVOKE.GetColorU32__SWIG_0(idx, alpha_mul);
    return ret;
  }

  public static uint GetColorU32(int idx) {
    uint ret = ImGuiPINVOKE.GetColorU32__SWIG_1(idx);
    return ret;
  }

  public static uint GetColorU32(ImVec4 col) {
    uint ret = ImGuiPINVOKE.GetColorU32__SWIG_2(ImVec4.getCPtr(col));
    if (ImGuiPINVOKE.SWIGPendingException.Pending) throw ImGuiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static uint GetColorU32(uint col, float alpha_mul) {
    uint ret = ImGuiPINVOKE.GetColorU32__SWIG_3(col, alpha_mul);
    return ret;
  }

  public static uint GetColorU32(uint col) {
    uint ret = ImGuiPINVOKE.GetColorU32__SWIG_4(col);
    return ret;
  }

  public static ImVec4 GetStyleColorVec4(int idx) {
    ImVec4 ret = new ImVec4(ImGuiPINVOKE.GetStyleColorVec4(idx), false);
    return ret;
  }

  public static ImVec2 GetCursorScreenPos() {
    ImVec2 ret = new ImVec2(ImGuiPINVOKE.GetCursorScreenPos(), true);
    return ret;
  }

  public static void SetCursorScreenPos(ImVec2 pos) {
    ImGuiPINVOKE.SetCursorScreenPos(ImVec2.getCPtr(pos));
    if (ImGuiPINVOKE.SWIGPendingException.Pending) throw ImGuiPINVOKE.SWIGPendingException.Retrieve();
  }

  public static ImVec2 GetContentRegionAvail() {
    ImVec2 ret = new ImVec2(ImGuiPINVOKE.GetContentRegionAvail(), true);
    return ret;
  }

  public static ImVec2 GetCursorPos() {
    ImVec2 ret = new ImVec2(ImGuiPINVOKE.GetCursorPos(), true);
    return ret;
  }

  public static float GetCursorPosX() {
    float ret = ImGuiPINVOKE.GetCursorPosX();
    return ret;
  }

  public static float GetCursorPosY() {
    float ret = ImGuiPINVOKE.GetCursorPosY();
    return ret;
  }

  public static void SetCursorPos(ImVec2 local_pos) {
    ImGuiPINVOKE.SetCursorPos(ImVec2.getCPtr(local_pos));
    if (ImGuiPINVOKE.SWIGPendingException.Pending) throw ImGuiPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void SetCursorPosX(float local_x) {
    ImGuiPINVOKE.SetCursorPosX(local_x);
  }

  public static void SetCursorPosY(float local_y) {
    ImGuiPINVOKE.SetCursorPosY(local_y);
  }

  public static ImVec2 GetCursorStartPos() {
    ImVec2 ret = new ImVec2(ImGuiPINVOKE.GetCursorStartPos(), true);
    return ret;
  }

  public static void Separator() {
    ImGuiPINVOKE.Separator();
  }

  public static void SameLine(float offset_from_start_x, float spacing) {
    ImGuiPINVOKE.SameLine__SWIG_0(offset_from_start_x, spacing);
  }

  public static void SameLine(float offset_from_start_x) {
    ImGuiPINVOKE.SameLine__SWIG_1(offset_from_start_x);
  }

  public static void SameLine() {
    ImGuiPINVOKE.SameLine__SWIG_2();
  }

  public static void NewLine() {
    ImGuiPINVOKE.NewLine();
  }

  public static void Spacing() {
    ImGuiPINVOKE.Spacing();
  }

  public static void Dummy(ImVec2 size) {
    ImGuiPINVOKE.Dummy(ImVec2.getCPtr(size));
    if (ImGuiPINVOKE.SWIGPendingException.Pending) throw ImGuiPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Indent(float indent_w) {
    ImGuiPINVOKE.Indent__SWIG_0(indent_w);
  }

  public static void Indent() {
    ImGuiPINVOKE.Indent__SWIG_1();
  }

  public static void Unindent(float indent_w) {
    ImGuiPINVOKE.Unindent__SWIG_0(indent_w);
  }

  public static void Unindent() {
    ImGuiPINVOKE.Unindent__SWIG_1();
  }

  public static void BeginGroup() {
    ImGuiPINVOKE.BeginGroup();
  }

  public static void EndGroup() {
    ImGuiPINVOKE.EndGroup();
  }

  public static void AlignTextToFramePadding() {
    ImGuiPINVOKE.AlignTextToFramePadding();
  }

  public static float GetTextLineHeight() {
    float ret = ImGuiPINVOKE.GetTextLineHeight();
    return ret;
  }

  public static float GetTextLineHeightWithSpacing() {
    float ret = ImGuiPINVOKE.GetTextLineHeightWithSpacing();
    return ret;
  }

  public static float GetFrameHeight() {
    float ret = ImGuiPINVOKE.GetFrameHeight();
    return ret;
  }

  public static float GetFrameHeightWithSpacing() {
    float ret = ImGuiPINVOKE.GetFrameHeightWithSpacing();
    return ret;
  }

  public static void PushID(string str_id) {
    ImGuiPINVOKE.PushID__SWIG_0(str_id);
  }

  public static void PushID(string str_id_begin, string str_id_end) {
    ImGuiPINVOKE.PushID__SWIG_1(str_id_begin, str_id_end);
  }

  public static void PushID(SWIGTYPE_p_void ptr_id) {
    ImGuiPINVOKE.PushID__SWIG_2(SWIGTYPE_p_void.getCPtr(ptr_id));
  }

  public static void PushID(int int_id) {
    ImGuiPINVOKE.PushID__SWIG_3(int_id);
  }

  public static void PopID() {
    ImGuiPINVOKE.PopID();
  }

  public static uint GetID(string str_id) {
    uint ret = ImGuiPINVOKE.GetID__SWIG_0(str_id);
    return ret;
  }

  public static uint GetID(string str_id_begin, string str_id_end) {
    uint ret = ImGuiPINVOKE.GetID__SWIG_1(str_id_begin, str_id_end);
    return ret;
  }

  public static uint GetID(SWIGTYPE_p_void ptr_id) {
    uint ret = ImGuiPINVOKE.GetID__SWIG_2(SWIGTYPE_p_void.getCPtr(ptr_id));
    return ret;
  }

  public static uint GetID(int int_id) {
    uint ret = ImGuiPINVOKE.GetID__SWIG_3(int_id);
    return ret;
  }

  public static void TextUnformatted(string text, string text_end) {
    ImGuiPINVOKE.TextUnformatted__SWIG_0(text, text_end);
  }

  public static void TextUnformatted(string text) {
    ImGuiPINVOKE.TextUnformatted__SWIG_1(text);
  }

  public static void Text(string fmt) {
    ImGuiPINVOKE.Text(fmt);
  }

  public static void TextColored(ImVec4 col, string fmt) {
    ImGuiPINVOKE.TextColored(ImVec4.getCPtr(col), fmt);
    if (ImGuiPINVOKE.SWIGPendingException.Pending) throw ImGuiPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void TextDisabled(string fmt) {
    ImGuiPINVOKE.TextDisabled(fmt);
  }

  public static void TextWrapped(string fmt) {
    ImGuiPINVOKE.TextWrapped(fmt);
  }

  public static void LabelText(string label, string fmt) {
    ImGuiPINVOKE.LabelText(label, fmt);
  }

  public static void BulletText(string fmt) {
    ImGuiPINVOKE.BulletText(fmt);
  }

  public static void SeparatorText(string label) {
    ImGuiPINVOKE.SeparatorText(label);
  }

  public static bool Button(string label, ImVec2 size) {
    bool ret = ImGuiPINVOKE.Button__SWIG_0(label, ImVec2.getCPtr(size));
    if (ImGuiPINVOKE.SWIGPendingException.Pending) throw ImGuiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool Button(string label) {
    bool ret = ImGuiPINVOKE.Button__SWIG_1(label);
    return ret;
  }

  public static bool SmallButton(string label) {
    bool ret = ImGuiPINVOKE.SmallButton(label);
    return ret;
  }

  public static bool InvisibleButton(string str_id, ImVec2 size, int flags) {
    bool ret = ImGuiPINVOKE.InvisibleButton__SWIG_0(str_id, ImVec2.getCPtr(size), flags);
    if (ImGuiPINVOKE.SWIGPendingException.Pending) throw ImGuiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool InvisibleButton(string str_id, ImVec2 size) {
    bool ret = ImGuiPINVOKE.InvisibleButton__SWIG_1(str_id, ImVec2.getCPtr(size));
    if (ImGuiPINVOKE.SWIGPendingException.Pending) throw ImGuiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool ArrowButton(string str_id, ImGuiDir dir) {
    bool ret = ImGuiPINVOKE.ArrowButton(str_id, (int)dir);
    return ret;
  }

  public static bool Checkbox(string label, ref bool v) {
    bool ret = ImGuiPINVOKE.Checkbox(label, ref v);
    return ret;
  }

  public static bool CheckboxFlags(string label, SWIGTYPE_p_int flags, int flags_value) {
    bool ret = ImGuiPINVOKE.CheckboxFlags__SWIG_0(label, SWIGTYPE_p_int.getCPtr(flags), flags_value);
    return ret;
  }

  public static bool CheckboxFlags(string label, SWIGTYPE_p_unsigned_int flags, uint flags_value) {
    bool ret = ImGuiPINVOKE.CheckboxFlags__SWIG_1(label, SWIGTYPE_p_unsigned_int.getCPtr(flags), flags_value);
    return ret;
  }

  public static bool RadioButton(string label, bool active) {
    bool ret = ImGuiPINVOKE.RadioButton__SWIG_0(label, active);
    return ret;
  }

  public static bool RadioButton(string label, ref int v, int v_button) {
    bool ret = ImGuiPINVOKE.RadioButton__SWIG_1(label, ref v, v_button);
    return ret;
  }

  public static void ProgressBar(float fraction, ImVec2 size_arg, string overlay) {
    ImGuiPINVOKE.ProgressBar__SWIG_0(fraction, ImVec2.getCPtr(size_arg), overlay);
    if (ImGuiPINVOKE.SWIGPendingException.Pending) throw ImGuiPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ProgressBar(float fraction, ImVec2 size_arg) {
    ImGuiPINVOKE.ProgressBar__SWIG_1(fraction, ImVec2.getCPtr(size_arg));
    if (ImGuiPINVOKE.SWIGPendingException.Pending) throw ImGuiPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ProgressBar(float fraction) {
    ImGuiPINVOKE.ProgressBar__SWIG_2(fraction);
  }

  public static void Bullet() {
    ImGuiPINVOKE.Bullet();
  }

  public static bool TextLink(string label) {
    bool ret = ImGuiPINVOKE.TextLink(label);
    return ret;
  }

  public static void TextLinkOpenURL(string label, string url) {
    ImGuiPINVOKE.TextLinkOpenURL__SWIG_0(label, url);
  }

  public static void TextLinkOpenURL(string label) {
    ImGuiPINVOKE.TextLinkOpenURL__SWIG_1(label);
  }

  public static void Image(SWIGTYPE_p_void user_texture_id, ImVec2 image_size, ImVec2 uv0, ImVec2 uv1, ImVec4 tint_col, ImVec4 border_col) {
    ImGuiPINVOKE.Image__SWIG_0(SWIGTYPE_p_void.getCPtr(user_texture_id), ImVec2.getCPtr(image_size), ImVec2.getCPtr(uv0), ImVec2.getCPtr(uv1), ImVec4.getCPtr(tint_col), ImVec4.getCPtr(border_col));
    if (ImGuiPINVOKE.SWIGPendingException.Pending) throw ImGuiPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Image(SWIGTYPE_p_void user_texture_id, ImVec2 image_size, ImVec2 uv0, ImVec2 uv1, ImVec4 tint_col) {
    ImGuiPINVOKE.Image__SWIG_1(SWIGTYPE_p_void.getCPtr(user_texture_id), ImVec2.getCPtr(image_size), ImVec2.getCPtr(uv0), ImVec2.getCPtr(uv1), ImVec4.getCPtr(tint_col));
    if (ImGuiPINVOKE.SWIGPendingException.Pending) throw ImGuiPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Image(SWIGTYPE_p_void user_texture_id, ImVec2 image_size, ImVec2 uv0, ImVec2 uv1) {
    ImGuiPINVOKE.Image__SWIG_2(SWIGTYPE_p_void.getCPtr(user_texture_id), ImVec2.getCPtr(image_size), ImVec2.getCPtr(uv0), ImVec2.getCPtr(uv1));
    if (ImGuiPINVOKE.SWIGPendingException.Pending) throw ImGuiPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Image(SWIGTYPE_p_void user_texture_id, ImVec2 image_size, ImVec2 uv0) {
    ImGuiPINVOKE.Image__SWIG_3(SWIGTYPE_p_void.getCPtr(user_texture_id), ImVec2.getCPtr(image_size), ImVec2.getCPtr(uv0));
    if (ImGuiPINVOKE.SWIGPendingException.Pending) throw ImGuiPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Image(SWIGTYPE_p_void user_texture_id, ImVec2 image_size) {
    ImGuiPINVOKE.Image__SWIG_4(SWIGTYPE_p_void.getCPtr(user_texture_id), ImVec2.getCPtr(image_size));
    if (ImGuiPINVOKE.SWIGPendingException.Pending) throw ImGuiPINVOKE.SWIGPendingException.Retrieve();
  }

  public static bool ImageButton(string str_id, SWIGTYPE_p_void user_texture_id, ImVec2 image_size, ImVec2 uv0, ImVec2 uv1, ImVec4 bg_col, ImVec4 tint_col) {
    bool ret = ImGuiPINVOKE.ImageButton__SWIG_0(str_id, SWIGTYPE_p_void.getCPtr(user_texture_id), ImVec2.getCPtr(image_size), ImVec2.getCPtr(uv0), ImVec2.getCPtr(uv1), ImVec4.getCPtr(bg_col), ImVec4.getCPtr(tint_col));
    if (ImGuiPINVOKE.SWIGPendingException.Pending) throw ImGuiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool ImageButton(string str_id, SWIGTYPE_p_void user_texture_id, ImVec2 image_size, ImVec2 uv0, ImVec2 uv1, ImVec4 bg_col) {
    bool ret = ImGuiPINVOKE.ImageButton__SWIG_1(str_id, SWIGTYPE_p_void.getCPtr(user_texture_id), ImVec2.getCPtr(image_size), ImVec2.getCPtr(uv0), ImVec2.getCPtr(uv1), ImVec4.getCPtr(bg_col));
    if (ImGuiPINVOKE.SWIGPendingException.Pending) throw ImGuiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool ImageButton(string str_id, SWIGTYPE_p_void user_texture_id, ImVec2 image_size, ImVec2 uv0, ImVec2 uv1) {
    bool ret = ImGuiPINVOKE.ImageButton__SWIG_2(str_id, SWIGTYPE_p_void.getCPtr(user_texture_id), ImVec2.getCPtr(image_size), ImVec2.getCPtr(uv0), ImVec2.getCPtr(uv1));
    if (ImGuiPINVOKE.SWIGPendingException.Pending) throw ImGuiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool ImageButton(string str_id, SWIGTYPE_p_void user_texture_id, ImVec2 image_size, ImVec2 uv0) {
    bool ret = ImGuiPINVOKE.ImageButton__SWIG_3(str_id, SWIGTYPE_p_void.getCPtr(user_texture_id), ImVec2.getCPtr(image_size), ImVec2.getCPtr(uv0));
    if (ImGuiPINVOKE.SWIGPendingException.Pending) throw ImGuiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool ImageButton(string str_id, SWIGTYPE_p_void user_texture_id, ImVec2 image_size) {
    bool ret = ImGuiPINVOKE.ImageButton__SWIG_4(str_id, SWIGTYPE_p_void.getCPtr(user_texture_id), ImVec2.getCPtr(image_size));
    if (ImGuiPINVOKE.SWIGPendingException.Pending) throw ImGuiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool BeginCombo(string label, string preview_value, int flags) {
    bool ret = ImGuiPINVOKE.BeginCombo__SWIG_0(label, preview_value, flags);
    return ret;
  }

  public static bool BeginCombo(string label, string preview_value) {
    bool ret = ImGuiPINVOKE.BeginCombo__SWIG_1(label, preview_value);
    return ret;
  }

  public static void EndCombo() {
    ImGuiPINVOKE.EndCombo();
  }

  public static bool Combo(string label, SWIGTYPE_p_int current_item, SWIGTYPE_p_p_char items, int items_count, int popup_max_height_in_items) {
    bool ret = ImGuiPINVOKE.Combo__SWIG_0(label, SWIGTYPE_p_int.getCPtr(current_item), SWIGTYPE_p_p_char.getCPtr(items), items_count, popup_max_height_in_items);
    return ret;
  }

  public static bool Combo(string label, SWIGTYPE_p_int current_item, SWIGTYPE_p_p_char items, int items_count) {
    bool ret = ImGuiPINVOKE.Combo__SWIG_1(label, SWIGTYPE_p_int.getCPtr(current_item), SWIGTYPE_p_p_char.getCPtr(items), items_count);
    return ret;
  }

  public static bool Combo(string label, SWIGTYPE_p_int current_item, string items_separated_by_zeros, int popup_max_height_in_items) {
    bool ret = ImGuiPINVOKE.Combo__SWIG_2(label, SWIGTYPE_p_int.getCPtr(current_item), items_separated_by_zeros, popup_max_height_in_items);
    return ret;
  }

  public static bool Combo(string label, SWIGTYPE_p_int current_item, string items_separated_by_zeros) {
    bool ret = ImGuiPINVOKE.Combo__SWIG_3(label, SWIGTYPE_p_int.getCPtr(current_item), items_separated_by_zeros);
    return ret;
  }

  public static bool Combo(string label, SWIGTYPE_p_int current_item, SWIGTYPE_p_f_p_void_int__p_char getter, SWIGTYPE_p_void user_data, int items_count, int popup_max_height_in_items) {
    bool ret = ImGuiPINVOKE.Combo__SWIG_4(label, SWIGTYPE_p_int.getCPtr(current_item), SWIGTYPE_p_f_p_void_int__p_char.getCPtr(getter), SWIGTYPE_p_void.getCPtr(user_data), items_count, popup_max_height_in_items);
    return ret;
  }

  public static bool Combo(string label, SWIGTYPE_p_int current_item, SWIGTYPE_p_f_p_void_int__p_char getter, SWIGTYPE_p_void user_data, int items_count) {
    bool ret = ImGuiPINVOKE.Combo__SWIG_5(label, SWIGTYPE_p_int.getCPtr(current_item), SWIGTYPE_p_f_p_void_int__p_char.getCPtr(getter), SWIGTYPE_p_void.getCPtr(user_data), items_count);
    return ret;
  }

  public static bool DragFloat(string label, ref float v, float v_speed, float v_min, float v_max, string format, int flags) {
    bool ret = ImGuiPINVOKE.DragFloat__SWIG_0(label, ref v, v_speed, v_min, v_max, format, flags);
    return ret;
  }

  public static bool DragFloat(string label, ref float v, float v_speed, float v_min, float v_max, string format) {
    bool ret = ImGuiPINVOKE.DragFloat__SWIG_1(label, ref v, v_speed, v_min, v_max, format);
    return ret;
  }

  public static bool DragFloat(string label, ref float v, float v_speed, float v_min, float v_max) {
    bool ret = ImGuiPINVOKE.DragFloat__SWIG_2(label, ref v, v_speed, v_min, v_max);
    return ret;
  }

  public static bool DragFloat(string label, ref float v, float v_speed, float v_min) {
    bool ret = ImGuiPINVOKE.DragFloat__SWIG_3(label, ref v, v_speed, v_min);
    return ret;
  }

  public static bool DragFloat(string label, ref float v, float v_speed) {
    bool ret = ImGuiPINVOKE.DragFloat__SWIG_4(label, ref v, v_speed);
    return ret;
  }

  public static bool DragFloat(string label, ref float v) {
    bool ret = ImGuiPINVOKE.DragFloat__SWIG_5(label, ref v);
    return ret;
  }

  public static bool DragFloat2(string label, SWIGTYPE_p_float v, float v_speed, float v_min, float v_max, string format, int flags) {
    bool ret = ImGuiPINVOKE.DragFloat2__SWIG_0(label, SWIGTYPE_p_float.getCPtr(v), v_speed, v_min, v_max, format, flags);
    return ret;
  }

  public static bool DragFloat2(string label, SWIGTYPE_p_float v, float v_speed, float v_min, float v_max, string format) {
    bool ret = ImGuiPINVOKE.DragFloat2__SWIG_1(label, SWIGTYPE_p_float.getCPtr(v), v_speed, v_min, v_max, format);
    return ret;
  }

  public static bool DragFloat2(string label, SWIGTYPE_p_float v, float v_speed, float v_min, float v_max) {
    bool ret = ImGuiPINVOKE.DragFloat2__SWIG_2(label, SWIGTYPE_p_float.getCPtr(v), v_speed, v_min, v_max);
    return ret;
  }

  public static bool DragFloat2(string label, SWIGTYPE_p_float v, float v_speed, float v_min) {
    bool ret = ImGuiPINVOKE.DragFloat2__SWIG_3(label, SWIGTYPE_p_float.getCPtr(v), v_speed, v_min);
    return ret;
  }

  public static bool DragFloat2(string label, SWIGTYPE_p_float v, float v_speed) {
    bool ret = ImGuiPINVOKE.DragFloat2__SWIG_4(label, SWIGTYPE_p_float.getCPtr(v), v_speed);
    return ret;
  }

  public static bool DragFloat2(string label, SWIGTYPE_p_float v) {
    bool ret = ImGuiPINVOKE.DragFloat2__SWIG_5(label, SWIGTYPE_p_float.getCPtr(v));
    return ret;
  }

  public static bool DragFloat3(string label, SWIGTYPE_p_float v, float v_speed, float v_min, float v_max, string format, int flags) {
    bool ret = ImGuiPINVOKE.DragFloat3__SWIG_0(label, SWIGTYPE_p_float.getCPtr(v), v_speed, v_min, v_max, format, flags);
    return ret;
  }

  public static bool DragFloat3(string label, SWIGTYPE_p_float v, float v_speed, float v_min, float v_max, string format) {
    bool ret = ImGuiPINVOKE.DragFloat3__SWIG_1(label, SWIGTYPE_p_float.getCPtr(v), v_speed, v_min, v_max, format);
    return ret;
  }

  public static bool DragFloat3(string label, SWIGTYPE_p_float v, float v_speed, float v_min, float v_max) {
    bool ret = ImGuiPINVOKE.DragFloat3__SWIG_2(label, SWIGTYPE_p_float.getCPtr(v), v_speed, v_min, v_max);
    return ret;
  }

  public static bool DragFloat3(string label, SWIGTYPE_p_float v, float v_speed, float v_min) {
    bool ret = ImGuiPINVOKE.DragFloat3__SWIG_3(label, SWIGTYPE_p_float.getCPtr(v), v_speed, v_min);
    return ret;
  }

  public static bool DragFloat3(string label, SWIGTYPE_p_float v, float v_speed) {
    bool ret = ImGuiPINVOKE.DragFloat3__SWIG_4(label, SWIGTYPE_p_float.getCPtr(v), v_speed);
    return ret;
  }

  public static bool DragFloat3(string label, SWIGTYPE_p_float v) {
    bool ret = ImGuiPINVOKE.DragFloat3__SWIG_5(label, SWIGTYPE_p_float.getCPtr(v));
    return ret;
  }

  public static bool DragFloat4(string label, SWIGTYPE_p_float v, float v_speed, float v_min, float v_max, string format, int flags) {
    bool ret = ImGuiPINVOKE.DragFloat4__SWIG_0(label, SWIGTYPE_p_float.getCPtr(v), v_speed, v_min, v_max, format, flags);
    return ret;
  }

  public static bool DragFloat4(string label, SWIGTYPE_p_float v, float v_speed, float v_min, float v_max, string format) {
    bool ret = ImGuiPINVOKE.DragFloat4__SWIG_1(label, SWIGTYPE_p_float.getCPtr(v), v_speed, v_min, v_max, format);
    return ret;
  }

  public static bool DragFloat4(string label, SWIGTYPE_p_float v, float v_speed, float v_min, float v_max) {
    bool ret = ImGuiPINVOKE.DragFloat4__SWIG_2(label, SWIGTYPE_p_float.getCPtr(v), v_speed, v_min, v_max);
    return ret;
  }

  public static bool DragFloat4(string label, SWIGTYPE_p_float v, float v_speed, float v_min) {
    bool ret = ImGuiPINVOKE.DragFloat4__SWIG_3(label, SWIGTYPE_p_float.getCPtr(v), v_speed, v_min);
    return ret;
  }

  public static bool DragFloat4(string label, SWIGTYPE_p_float v, float v_speed) {
    bool ret = ImGuiPINVOKE.DragFloat4__SWIG_4(label, SWIGTYPE_p_float.getCPtr(v), v_speed);
    return ret;
  }

  public static bool DragFloat4(string label, SWIGTYPE_p_float v) {
    bool ret = ImGuiPINVOKE.DragFloat4__SWIG_5(label, SWIGTYPE_p_float.getCPtr(v));
    return ret;
  }

  public static bool DragFloatRange2(string label, SWIGTYPE_p_float v_current_min, SWIGTYPE_p_float v_current_max, float v_speed, float v_min, float v_max, string format, string format_max, int flags) {
    bool ret = ImGuiPINVOKE.DragFloatRange2__SWIG_0(label, SWIGTYPE_p_float.getCPtr(v_current_min), SWIGTYPE_p_float.getCPtr(v_current_max), v_speed, v_min, v_max, format, format_max, flags);
    return ret;
  }

  public static bool DragFloatRange2(string label, SWIGTYPE_p_float v_current_min, SWIGTYPE_p_float v_current_max, float v_speed, float v_min, float v_max, string format, string format_max) {
    bool ret = ImGuiPINVOKE.DragFloatRange2__SWIG_1(label, SWIGTYPE_p_float.getCPtr(v_current_min), SWIGTYPE_p_float.getCPtr(v_current_max), v_speed, v_min, v_max, format, format_max);
    return ret;
  }

  public static bool DragFloatRange2(string label, SWIGTYPE_p_float v_current_min, SWIGTYPE_p_float v_current_max, float v_speed, float v_min, float v_max, string format) {
    bool ret = ImGuiPINVOKE.DragFloatRange2__SWIG_2(label, SWIGTYPE_p_float.getCPtr(v_current_min), SWIGTYPE_p_float.getCPtr(v_current_max), v_speed, v_min, v_max, format);
    return ret;
  }

  public static bool DragFloatRange2(string label, SWIGTYPE_p_float v_current_min, SWIGTYPE_p_float v_current_max, float v_speed, float v_min, float v_max) {
    bool ret = ImGuiPINVOKE.DragFloatRange2__SWIG_3(label, SWIGTYPE_p_float.getCPtr(v_current_min), SWIGTYPE_p_float.getCPtr(v_current_max), v_speed, v_min, v_max);
    return ret;
  }

  public static bool DragFloatRange2(string label, SWIGTYPE_p_float v_current_min, SWIGTYPE_p_float v_current_max, float v_speed, float v_min) {
    bool ret = ImGuiPINVOKE.DragFloatRange2__SWIG_4(label, SWIGTYPE_p_float.getCPtr(v_current_min), SWIGTYPE_p_float.getCPtr(v_current_max), v_speed, v_min);
    return ret;
  }

  public static bool DragFloatRange2(string label, SWIGTYPE_p_float v_current_min, SWIGTYPE_p_float v_current_max, float v_speed) {
    bool ret = ImGuiPINVOKE.DragFloatRange2__SWIG_5(label, SWIGTYPE_p_float.getCPtr(v_current_min), SWIGTYPE_p_float.getCPtr(v_current_max), v_speed);
    return ret;
  }

  public static bool DragFloatRange2(string label, SWIGTYPE_p_float v_current_min, SWIGTYPE_p_float v_current_max) {
    bool ret = ImGuiPINVOKE.DragFloatRange2__SWIG_6(label, SWIGTYPE_p_float.getCPtr(v_current_min), SWIGTYPE_p_float.getCPtr(v_current_max));
    return ret;
  }

  public static bool DragInt(string label, ref int v, float v_speed, int v_min, int v_max, string format, int flags) {
    bool ret = ImGuiPINVOKE.DragInt__SWIG_0(label, ref v, v_speed, v_min, v_max, format, flags);
    return ret;
  }

  public static bool DragInt(string label, ref int v, float v_speed, int v_min, int v_max, string format) {
    bool ret = ImGuiPINVOKE.DragInt__SWIG_1(label, ref v, v_speed, v_min, v_max, format);
    return ret;
  }

  public static bool DragInt(string label, ref int v, float v_speed, int v_min, int v_max) {
    bool ret = ImGuiPINVOKE.DragInt__SWIG_2(label, ref v, v_speed, v_min, v_max);
    return ret;
  }

  public static bool DragInt(string label, ref int v, float v_speed, int v_min) {
    bool ret = ImGuiPINVOKE.DragInt__SWIG_3(label, ref v, v_speed, v_min);
    return ret;
  }

  public static bool DragInt(string label, ref int v, float v_speed) {
    bool ret = ImGuiPINVOKE.DragInt__SWIG_4(label, ref v, v_speed);
    return ret;
  }

  public static bool DragInt(string label, ref int v) {
    bool ret = ImGuiPINVOKE.DragInt__SWIG_5(label, ref v);
    return ret;
  }

  public static bool DragInt2(string label, SWIGTYPE_p_int v, float v_speed, int v_min, int v_max, string format, int flags) {
    bool ret = ImGuiPINVOKE.DragInt2__SWIG_0(label, SWIGTYPE_p_int.getCPtr(v), v_speed, v_min, v_max, format, flags);
    return ret;
  }

  public static bool DragInt2(string label, SWIGTYPE_p_int v, float v_speed, int v_min, int v_max, string format) {
    bool ret = ImGuiPINVOKE.DragInt2__SWIG_1(label, SWIGTYPE_p_int.getCPtr(v), v_speed, v_min, v_max, format);
    return ret;
  }

  public static bool DragInt2(string label, SWIGTYPE_p_int v, float v_speed, int v_min, int v_max) {
    bool ret = ImGuiPINVOKE.DragInt2__SWIG_2(label, SWIGTYPE_p_int.getCPtr(v), v_speed, v_min, v_max);
    return ret;
  }

  public static bool DragInt2(string label, SWIGTYPE_p_int v, float v_speed, int v_min) {
    bool ret = ImGuiPINVOKE.DragInt2__SWIG_3(label, SWIGTYPE_p_int.getCPtr(v), v_speed, v_min);
    return ret;
  }

  public static bool DragInt2(string label, SWIGTYPE_p_int v, float v_speed) {
    bool ret = ImGuiPINVOKE.DragInt2__SWIG_4(label, SWIGTYPE_p_int.getCPtr(v), v_speed);
    return ret;
  }

  public static bool DragInt2(string label, SWIGTYPE_p_int v) {
    bool ret = ImGuiPINVOKE.DragInt2__SWIG_5(label, SWIGTYPE_p_int.getCPtr(v));
    return ret;
  }

  public static bool DragInt3(string label, SWIGTYPE_p_int v, float v_speed, int v_min, int v_max, string format, int flags) {
    bool ret = ImGuiPINVOKE.DragInt3__SWIG_0(label, SWIGTYPE_p_int.getCPtr(v), v_speed, v_min, v_max, format, flags);
    return ret;
  }

  public static bool DragInt3(string label, SWIGTYPE_p_int v, float v_speed, int v_min, int v_max, string format) {
    bool ret = ImGuiPINVOKE.DragInt3__SWIG_1(label, SWIGTYPE_p_int.getCPtr(v), v_speed, v_min, v_max, format);
    return ret;
  }

  public static bool DragInt3(string label, SWIGTYPE_p_int v, float v_speed, int v_min, int v_max) {
    bool ret = ImGuiPINVOKE.DragInt3__SWIG_2(label, SWIGTYPE_p_int.getCPtr(v), v_speed, v_min, v_max);
    return ret;
  }

  public static bool DragInt3(string label, SWIGTYPE_p_int v, float v_speed, int v_min) {
    bool ret = ImGuiPINVOKE.DragInt3__SWIG_3(label, SWIGTYPE_p_int.getCPtr(v), v_speed, v_min);
    return ret;
  }

  public static bool DragInt3(string label, SWIGTYPE_p_int v, float v_speed) {
    bool ret = ImGuiPINVOKE.DragInt3__SWIG_4(label, SWIGTYPE_p_int.getCPtr(v), v_speed);
    return ret;
  }

  public static bool DragInt3(string label, SWIGTYPE_p_int v) {
    bool ret = ImGuiPINVOKE.DragInt3__SWIG_5(label, SWIGTYPE_p_int.getCPtr(v));
    return ret;
  }

  public static bool DragInt4(string label, SWIGTYPE_p_int v, float v_speed, int v_min, int v_max, string format, int flags) {
    bool ret = ImGuiPINVOKE.DragInt4__SWIG_0(label, SWIGTYPE_p_int.getCPtr(v), v_speed, v_min, v_max, format, flags);
    return ret;
  }

  public static bool DragInt4(string label, SWIGTYPE_p_int v, float v_speed, int v_min, int v_max, string format) {
    bool ret = ImGuiPINVOKE.DragInt4__SWIG_1(label, SWIGTYPE_p_int.getCPtr(v), v_speed, v_min, v_max, format);
    return ret;
  }

  public static bool DragInt4(string label, SWIGTYPE_p_int v, float v_speed, int v_min, int v_max) {
    bool ret = ImGuiPINVOKE.DragInt4__SWIG_2(label, SWIGTYPE_p_int.getCPtr(v), v_speed, v_min, v_max);
    return ret;
  }

  public static bool DragInt4(string label, SWIGTYPE_p_int v, float v_speed, int v_min) {
    bool ret = ImGuiPINVOKE.DragInt4__SWIG_3(label, SWIGTYPE_p_int.getCPtr(v), v_speed, v_min);
    return ret;
  }

  public static bool DragInt4(string label, SWIGTYPE_p_int v, float v_speed) {
    bool ret = ImGuiPINVOKE.DragInt4__SWIG_4(label, SWIGTYPE_p_int.getCPtr(v), v_speed);
    return ret;
  }

  public static bool DragInt4(string label, SWIGTYPE_p_int v) {
    bool ret = ImGuiPINVOKE.DragInt4__SWIG_5(label, SWIGTYPE_p_int.getCPtr(v));
    return ret;
  }

  public static bool DragIntRange2(string label, SWIGTYPE_p_int v_current_min, SWIGTYPE_p_int v_current_max, float v_speed, int v_min, int v_max, string format, string format_max, int flags) {
    bool ret = ImGuiPINVOKE.DragIntRange2__SWIG_0(label, SWIGTYPE_p_int.getCPtr(v_current_min), SWIGTYPE_p_int.getCPtr(v_current_max), v_speed, v_min, v_max, format, format_max, flags);
    return ret;
  }

  public static bool DragIntRange2(string label, SWIGTYPE_p_int v_current_min, SWIGTYPE_p_int v_current_max, float v_speed, int v_min, int v_max, string format, string format_max) {
    bool ret = ImGuiPINVOKE.DragIntRange2__SWIG_1(label, SWIGTYPE_p_int.getCPtr(v_current_min), SWIGTYPE_p_int.getCPtr(v_current_max), v_speed, v_min, v_max, format, format_max);
    return ret;
  }

  public static bool DragIntRange2(string label, SWIGTYPE_p_int v_current_min, SWIGTYPE_p_int v_current_max, float v_speed, int v_min, int v_max, string format) {
    bool ret = ImGuiPINVOKE.DragIntRange2__SWIG_2(label, SWIGTYPE_p_int.getCPtr(v_current_min), SWIGTYPE_p_int.getCPtr(v_current_max), v_speed, v_min, v_max, format);
    return ret;
  }

  public static bool DragIntRange2(string label, SWIGTYPE_p_int v_current_min, SWIGTYPE_p_int v_current_max, float v_speed, int v_min, int v_max) {
    bool ret = ImGuiPINVOKE.DragIntRange2__SWIG_3(label, SWIGTYPE_p_int.getCPtr(v_current_min), SWIGTYPE_p_int.getCPtr(v_current_max), v_speed, v_min, v_max);
    return ret;
  }

  public static bool DragIntRange2(string label, SWIGTYPE_p_int v_current_min, SWIGTYPE_p_int v_current_max, float v_speed, int v_min) {
    bool ret = ImGuiPINVOKE.DragIntRange2__SWIG_4(label, SWIGTYPE_p_int.getCPtr(v_current_min), SWIGTYPE_p_int.getCPtr(v_current_max), v_speed, v_min);
    return ret;
  }

  public static bool DragIntRange2(string label, SWIGTYPE_p_int v_current_min, SWIGTYPE_p_int v_current_max, float v_speed) {
    bool ret = ImGuiPINVOKE.DragIntRange2__SWIG_5(label, SWIGTYPE_p_int.getCPtr(v_current_min), SWIGTYPE_p_int.getCPtr(v_current_max), v_speed);
    return ret;
  }

  public static bool DragIntRange2(string label, SWIGTYPE_p_int v_current_min, SWIGTYPE_p_int v_current_max) {
    bool ret = ImGuiPINVOKE.DragIntRange2__SWIG_6(label, SWIGTYPE_p_int.getCPtr(v_current_min), SWIGTYPE_p_int.getCPtr(v_current_max));
    return ret;
  }

  public static bool DragScalar(string label, int data_type, SWIGTYPE_p_void p_data, float v_speed, SWIGTYPE_p_void p_min, SWIGTYPE_p_void p_max, string format, int flags) {
    bool ret = ImGuiPINVOKE.DragScalar__SWIG_0(label, data_type, SWIGTYPE_p_void.getCPtr(p_data), v_speed, SWIGTYPE_p_void.getCPtr(p_min), SWIGTYPE_p_void.getCPtr(p_max), format, flags);
    return ret;
  }

  public static bool DragScalar(string label, int data_type, SWIGTYPE_p_void p_data, float v_speed, SWIGTYPE_p_void p_min, SWIGTYPE_p_void p_max, string format) {
    bool ret = ImGuiPINVOKE.DragScalar__SWIG_1(label, data_type, SWIGTYPE_p_void.getCPtr(p_data), v_speed, SWIGTYPE_p_void.getCPtr(p_min), SWIGTYPE_p_void.getCPtr(p_max), format);
    return ret;
  }

  public static bool DragScalar(string label, int data_type, SWIGTYPE_p_void p_data, float v_speed, SWIGTYPE_p_void p_min, SWIGTYPE_p_void p_max) {
    bool ret = ImGuiPINVOKE.DragScalar__SWIG_2(label, data_type, SWIGTYPE_p_void.getCPtr(p_data), v_speed, SWIGTYPE_p_void.getCPtr(p_min), SWIGTYPE_p_void.getCPtr(p_max));
    return ret;
  }

  public static bool DragScalar(string label, int data_type, SWIGTYPE_p_void p_data, float v_speed, SWIGTYPE_p_void p_min) {
    bool ret = ImGuiPINVOKE.DragScalar__SWIG_3(label, data_type, SWIGTYPE_p_void.getCPtr(p_data), v_speed, SWIGTYPE_p_void.getCPtr(p_min));
    return ret;
  }

  public static bool DragScalar(string label, int data_type, SWIGTYPE_p_void p_data, float v_speed) {
    bool ret = ImGuiPINVOKE.DragScalar__SWIG_4(label, data_type, SWIGTYPE_p_void.getCPtr(p_data), v_speed);
    return ret;
  }

  public static bool DragScalar(string label, int data_type, SWIGTYPE_p_void p_data) {
    bool ret = ImGuiPINVOKE.DragScalar__SWIG_5(label, data_type, SWIGTYPE_p_void.getCPtr(p_data));
    return ret;
  }

  public static bool DragScalarN(string label, int data_type, SWIGTYPE_p_void p_data, int components, float v_speed, SWIGTYPE_p_void p_min, SWIGTYPE_p_void p_max, string format, int flags) {
    bool ret = ImGuiPINVOKE.DragScalarN__SWIG_0(label, data_type, SWIGTYPE_p_void.getCPtr(p_data), components, v_speed, SWIGTYPE_p_void.getCPtr(p_min), SWIGTYPE_p_void.getCPtr(p_max), format, flags);
    return ret;
  }

  public static bool DragScalarN(string label, int data_type, SWIGTYPE_p_void p_data, int components, float v_speed, SWIGTYPE_p_void p_min, SWIGTYPE_p_void p_max, string format) {
    bool ret = ImGuiPINVOKE.DragScalarN__SWIG_1(label, data_type, SWIGTYPE_p_void.getCPtr(p_data), components, v_speed, SWIGTYPE_p_void.getCPtr(p_min), SWIGTYPE_p_void.getCPtr(p_max), format);
    return ret;
  }

  public static bool DragScalarN(string label, int data_type, SWIGTYPE_p_void p_data, int components, float v_speed, SWIGTYPE_p_void p_min, SWIGTYPE_p_void p_max) {
    bool ret = ImGuiPINVOKE.DragScalarN__SWIG_2(label, data_type, SWIGTYPE_p_void.getCPtr(p_data), components, v_speed, SWIGTYPE_p_void.getCPtr(p_min), SWIGTYPE_p_void.getCPtr(p_max));
    return ret;
  }

  public static bool DragScalarN(string label, int data_type, SWIGTYPE_p_void p_data, int components, float v_speed, SWIGTYPE_p_void p_min) {
    bool ret = ImGuiPINVOKE.DragScalarN__SWIG_3(label, data_type, SWIGTYPE_p_void.getCPtr(p_data), components, v_speed, SWIGTYPE_p_void.getCPtr(p_min));
    return ret;
  }

  public static bool DragScalarN(string label, int data_type, SWIGTYPE_p_void p_data, int components, float v_speed) {
    bool ret = ImGuiPINVOKE.DragScalarN__SWIG_4(label, data_type, SWIGTYPE_p_void.getCPtr(p_data), components, v_speed);
    return ret;
  }

  public static bool DragScalarN(string label, int data_type, SWIGTYPE_p_void p_data, int components) {
    bool ret = ImGuiPINVOKE.DragScalarN__SWIG_5(label, data_type, SWIGTYPE_p_void.getCPtr(p_data), components);
    return ret;
  }

  public static bool SliderFloat(string label, ref float v, float v_min, float v_max, string format, int flags) {
    bool ret = ImGuiPINVOKE.SliderFloat__SWIG_0(label, ref v, v_min, v_max, format, flags);
    return ret;
  }

  public static bool SliderFloat(string label, ref float v, float v_min, float v_max, string format) {
    bool ret = ImGuiPINVOKE.SliderFloat__SWIG_1(label, ref v, v_min, v_max, format);
    return ret;
  }

  public static bool SliderFloat(string label, ref float v, float v_min, float v_max) {
    bool ret = ImGuiPINVOKE.SliderFloat__SWIG_2(label, ref v, v_min, v_max);
    return ret;
  }

  public static bool SliderFloat2(string label, SWIGTYPE_p_float v, float v_min, float v_max, string format, int flags) {
    bool ret = ImGuiPINVOKE.SliderFloat2__SWIG_0(label, SWIGTYPE_p_float.getCPtr(v), v_min, v_max, format, flags);
    return ret;
  }

  public static bool SliderFloat2(string label, SWIGTYPE_p_float v, float v_min, float v_max, string format) {
    bool ret = ImGuiPINVOKE.SliderFloat2__SWIG_1(label, SWIGTYPE_p_float.getCPtr(v), v_min, v_max, format);
    return ret;
  }

  public static bool SliderFloat2(string label, SWIGTYPE_p_float v, float v_min, float v_max) {
    bool ret = ImGuiPINVOKE.SliderFloat2__SWIG_2(label, SWIGTYPE_p_float.getCPtr(v), v_min, v_max);
    return ret;
  }

  public static bool SliderFloat3(string label, SWIGTYPE_p_float v, float v_min, float v_max, string format, int flags) {
    bool ret = ImGuiPINVOKE.SliderFloat3__SWIG_0(label, SWIGTYPE_p_float.getCPtr(v), v_min, v_max, format, flags);
    return ret;
  }

  public static bool SliderFloat3(string label, SWIGTYPE_p_float v, float v_min, float v_max, string format) {
    bool ret = ImGuiPINVOKE.SliderFloat3__SWIG_1(label, SWIGTYPE_p_float.getCPtr(v), v_min, v_max, format);
    return ret;
  }

  public static bool SliderFloat3(string label, SWIGTYPE_p_float v, float v_min, float v_max) {
    bool ret = ImGuiPINVOKE.SliderFloat3__SWIG_2(label, SWIGTYPE_p_float.getCPtr(v), v_min, v_max);
    return ret;
  }

  public static bool SliderFloat4(string label, SWIGTYPE_p_float v, float v_min, float v_max, string format, int flags) {
    bool ret = ImGuiPINVOKE.SliderFloat4__SWIG_0(label, SWIGTYPE_p_float.getCPtr(v), v_min, v_max, format, flags);
    return ret;
  }

  public static bool SliderFloat4(string label, SWIGTYPE_p_float v, float v_min, float v_max, string format) {
    bool ret = ImGuiPINVOKE.SliderFloat4__SWIG_1(label, SWIGTYPE_p_float.getCPtr(v), v_min, v_max, format);
    return ret;
  }

  public static bool SliderFloat4(string label, SWIGTYPE_p_float v, float v_min, float v_max) {
    bool ret = ImGuiPINVOKE.SliderFloat4__SWIG_2(label, SWIGTYPE_p_float.getCPtr(v), v_min, v_max);
    return ret;
  }

  public static bool SliderAngle(string label, SWIGTYPE_p_float v_rad, float v_degrees_min, float v_degrees_max, string format, int flags) {
    bool ret = ImGuiPINVOKE.SliderAngle__SWIG_0(label, SWIGTYPE_p_float.getCPtr(v_rad), v_degrees_min, v_degrees_max, format, flags);
    return ret;
  }

  public static bool SliderAngle(string label, SWIGTYPE_p_float v_rad, float v_degrees_min, float v_degrees_max, string format) {
    bool ret = ImGuiPINVOKE.SliderAngle__SWIG_1(label, SWIGTYPE_p_float.getCPtr(v_rad), v_degrees_min, v_degrees_max, format);
    return ret;
  }

  public static bool SliderAngle(string label, SWIGTYPE_p_float v_rad, float v_degrees_min, float v_degrees_max) {
    bool ret = ImGuiPINVOKE.SliderAngle__SWIG_2(label, SWIGTYPE_p_float.getCPtr(v_rad), v_degrees_min, v_degrees_max);
    return ret;
  }

  public static bool SliderAngle(string label, SWIGTYPE_p_float v_rad, float v_degrees_min) {
    bool ret = ImGuiPINVOKE.SliderAngle__SWIG_3(label, SWIGTYPE_p_float.getCPtr(v_rad), v_degrees_min);
    return ret;
  }

  public static bool SliderAngle(string label, SWIGTYPE_p_float v_rad) {
    bool ret = ImGuiPINVOKE.SliderAngle__SWIG_4(label, SWIGTYPE_p_float.getCPtr(v_rad));
    return ret;
  }

  public static bool SliderInt(string label, ref int v, int v_min, int v_max, string format, int flags) {
    bool ret = ImGuiPINVOKE.SliderInt__SWIG_0(label, ref v, v_min, v_max, format, flags);
    return ret;
  }

  public static bool SliderInt(string label, ref int v, int v_min, int v_max, string format) {
    bool ret = ImGuiPINVOKE.SliderInt__SWIG_1(label, ref v, v_min, v_max, format);
    return ret;
  }

  public static bool SliderInt(string label, ref int v, int v_min, int v_max) {
    bool ret = ImGuiPINVOKE.SliderInt__SWIG_2(label, ref v, v_min, v_max);
    return ret;
  }

  public static bool SliderInt2(string label, SWIGTYPE_p_int v, int v_min, int v_max, string format, int flags) {
    bool ret = ImGuiPINVOKE.SliderInt2__SWIG_0(label, SWIGTYPE_p_int.getCPtr(v), v_min, v_max, format, flags);
    return ret;
  }

  public static bool SliderInt2(string label, SWIGTYPE_p_int v, int v_min, int v_max, string format) {
    bool ret = ImGuiPINVOKE.SliderInt2__SWIG_1(label, SWIGTYPE_p_int.getCPtr(v), v_min, v_max, format);
    return ret;
  }

  public static bool SliderInt2(string label, SWIGTYPE_p_int v, int v_min, int v_max) {
    bool ret = ImGuiPINVOKE.SliderInt2__SWIG_2(label, SWIGTYPE_p_int.getCPtr(v), v_min, v_max);
    return ret;
  }

  public static bool SliderInt3(string label, SWIGTYPE_p_int v, int v_min, int v_max, string format, int flags) {
    bool ret = ImGuiPINVOKE.SliderInt3__SWIG_0(label, SWIGTYPE_p_int.getCPtr(v), v_min, v_max, format, flags);
    return ret;
  }

  public static bool SliderInt3(string label, SWIGTYPE_p_int v, int v_min, int v_max, string format) {
    bool ret = ImGuiPINVOKE.SliderInt3__SWIG_1(label, SWIGTYPE_p_int.getCPtr(v), v_min, v_max, format);
    return ret;
  }

  public static bool SliderInt3(string label, SWIGTYPE_p_int v, int v_min, int v_max) {
    bool ret = ImGuiPINVOKE.SliderInt3__SWIG_2(label, SWIGTYPE_p_int.getCPtr(v), v_min, v_max);
    return ret;
  }

  public static bool SliderInt4(string label, SWIGTYPE_p_int v, int v_min, int v_max, string format, int flags) {
    bool ret = ImGuiPINVOKE.SliderInt4__SWIG_0(label, SWIGTYPE_p_int.getCPtr(v), v_min, v_max, format, flags);
    return ret;
  }

  public static bool SliderInt4(string label, SWIGTYPE_p_int v, int v_min, int v_max, string format) {
    bool ret = ImGuiPINVOKE.SliderInt4__SWIG_1(label, SWIGTYPE_p_int.getCPtr(v), v_min, v_max, format);
    return ret;
  }

  public static bool SliderInt4(string label, SWIGTYPE_p_int v, int v_min, int v_max) {
    bool ret = ImGuiPINVOKE.SliderInt4__SWIG_2(label, SWIGTYPE_p_int.getCPtr(v), v_min, v_max);
    return ret;
  }

  public static bool SliderScalar(string label, int data_type, SWIGTYPE_p_void p_data, SWIGTYPE_p_void p_min, SWIGTYPE_p_void p_max, string format, int flags) {
    bool ret = ImGuiPINVOKE.SliderScalar__SWIG_0(label, data_type, SWIGTYPE_p_void.getCPtr(p_data), SWIGTYPE_p_void.getCPtr(p_min), SWIGTYPE_p_void.getCPtr(p_max), format, flags);
    return ret;
  }

  public static bool SliderScalar(string label, int data_type, SWIGTYPE_p_void p_data, SWIGTYPE_p_void p_min, SWIGTYPE_p_void p_max, string format) {
    bool ret = ImGuiPINVOKE.SliderScalar__SWIG_1(label, data_type, SWIGTYPE_p_void.getCPtr(p_data), SWIGTYPE_p_void.getCPtr(p_min), SWIGTYPE_p_void.getCPtr(p_max), format);
    return ret;
  }

  public static bool SliderScalar(string label, int data_type, SWIGTYPE_p_void p_data, SWIGTYPE_p_void p_min, SWIGTYPE_p_void p_max) {
    bool ret = ImGuiPINVOKE.SliderScalar__SWIG_2(label, data_type, SWIGTYPE_p_void.getCPtr(p_data), SWIGTYPE_p_void.getCPtr(p_min), SWIGTYPE_p_void.getCPtr(p_max));
    return ret;
  }

  public static bool SliderScalarN(string label, int data_type, SWIGTYPE_p_void p_data, int components, SWIGTYPE_p_void p_min, SWIGTYPE_p_void p_max, string format, int flags) {
    bool ret = ImGuiPINVOKE.SliderScalarN__SWIG_0(label, data_type, SWIGTYPE_p_void.getCPtr(p_data), components, SWIGTYPE_p_void.getCPtr(p_min), SWIGTYPE_p_void.getCPtr(p_max), format, flags);
    return ret;
  }

  public static bool SliderScalarN(string label, int data_type, SWIGTYPE_p_void p_data, int components, SWIGTYPE_p_void p_min, SWIGTYPE_p_void p_max, string format) {
    bool ret = ImGuiPINVOKE.SliderScalarN__SWIG_1(label, data_type, SWIGTYPE_p_void.getCPtr(p_data), components, SWIGTYPE_p_void.getCPtr(p_min), SWIGTYPE_p_void.getCPtr(p_max), format);
    return ret;
  }

  public static bool SliderScalarN(string label, int data_type, SWIGTYPE_p_void p_data, int components, SWIGTYPE_p_void p_min, SWIGTYPE_p_void p_max) {
    bool ret = ImGuiPINVOKE.SliderScalarN__SWIG_2(label, data_type, SWIGTYPE_p_void.getCPtr(p_data), components, SWIGTYPE_p_void.getCPtr(p_min), SWIGTYPE_p_void.getCPtr(p_max));
    return ret;
  }

  public static bool VSliderFloat(string label, ImVec2 size, ref float v, float v_min, float v_max, string format, int flags) {
    bool ret = ImGuiPINVOKE.VSliderFloat__SWIG_0(label, ImVec2.getCPtr(size), ref v, v_min, v_max, format, flags);
    if (ImGuiPINVOKE.SWIGPendingException.Pending) throw ImGuiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool VSliderFloat(string label, ImVec2 size, ref float v, float v_min, float v_max, string format) {
    bool ret = ImGuiPINVOKE.VSliderFloat__SWIG_1(label, ImVec2.getCPtr(size), ref v, v_min, v_max, format);
    if (ImGuiPINVOKE.SWIGPendingException.Pending) throw ImGuiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool VSliderFloat(string label, ImVec2 size, ref float v, float v_min, float v_max) {
    bool ret = ImGuiPINVOKE.VSliderFloat__SWIG_2(label, ImVec2.getCPtr(size), ref v, v_min, v_max);
    if (ImGuiPINVOKE.SWIGPendingException.Pending) throw ImGuiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool VSliderInt(string label, ImVec2 size, ref int v, int v_min, int v_max, string format, int flags) {
    bool ret = ImGuiPINVOKE.VSliderInt__SWIG_0(label, ImVec2.getCPtr(size), ref v, v_min, v_max, format, flags);
    if (ImGuiPINVOKE.SWIGPendingException.Pending) throw ImGuiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool VSliderInt(string label, ImVec2 size, ref int v, int v_min, int v_max, string format) {
    bool ret = ImGuiPINVOKE.VSliderInt__SWIG_1(label, ImVec2.getCPtr(size), ref v, v_min, v_max, format);
    if (ImGuiPINVOKE.SWIGPendingException.Pending) throw ImGuiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool VSliderInt(string label, ImVec2 size, ref int v, int v_min, int v_max) {
    bool ret = ImGuiPINVOKE.VSliderInt__SWIG_2(label, ImVec2.getCPtr(size), ref v, v_min, v_max);
    if (ImGuiPINVOKE.SWIGPendingException.Pending) throw ImGuiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool VSliderScalar(string label, ImVec2 size, int data_type, SWIGTYPE_p_void p_data, SWIGTYPE_p_void p_min, SWIGTYPE_p_void p_max, string format, int flags) {
    bool ret = ImGuiPINVOKE.VSliderScalar__SWIG_0(label, ImVec2.getCPtr(size), data_type, SWIGTYPE_p_void.getCPtr(p_data), SWIGTYPE_p_void.getCPtr(p_min), SWIGTYPE_p_void.getCPtr(p_max), format, flags);
    if (ImGuiPINVOKE.SWIGPendingException.Pending) throw ImGuiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool VSliderScalar(string label, ImVec2 size, int data_type, SWIGTYPE_p_void p_data, SWIGTYPE_p_void p_min, SWIGTYPE_p_void p_max, string format) {
    bool ret = ImGuiPINVOKE.VSliderScalar__SWIG_1(label, ImVec2.getCPtr(size), data_type, SWIGTYPE_p_void.getCPtr(p_data), SWIGTYPE_p_void.getCPtr(p_min), SWIGTYPE_p_void.getCPtr(p_max), format);
    if (ImGuiPINVOKE.SWIGPendingException.Pending) throw ImGuiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool VSliderScalar(string label, ImVec2 size, int data_type, SWIGTYPE_p_void p_data, SWIGTYPE_p_void p_min, SWIGTYPE_p_void p_max) {
    bool ret = ImGuiPINVOKE.VSliderScalar__SWIG_2(label, ImVec2.getCPtr(size), data_type, SWIGTYPE_p_void.getCPtr(p_data), SWIGTYPE_p_void.getCPtr(p_min), SWIGTYPE_p_void.getCPtr(p_max));
    if (ImGuiPINVOKE.SWIGPendingException.Pending) throw ImGuiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool InputText(string label, string buf, uint buf_size, int flags, SWIGTYPE_p_f_p_ImGuiInputTextCallbackData__int callback, SWIGTYPE_p_void user_data) {
    bool ret = ImGuiPINVOKE.InputText__SWIG_0(label, buf, buf_size, flags, SWIGTYPE_p_f_p_ImGuiInputTextCallbackData__int.getCPtr(callback), SWIGTYPE_p_void.getCPtr(user_data));
    return ret;
  }

  public static bool InputText(string label, string buf, uint buf_size, int flags, SWIGTYPE_p_f_p_ImGuiInputTextCallbackData__int callback) {
    bool ret = ImGuiPINVOKE.InputText__SWIG_1(label, buf, buf_size, flags, SWIGTYPE_p_f_p_ImGuiInputTextCallbackData__int.getCPtr(callback));
    return ret;
  }

  public static bool InputText(string label, string buf, uint buf_size, int flags) {
    bool ret = ImGuiPINVOKE.InputText__SWIG_2(label, buf, buf_size, flags);
    return ret;
  }

  public static bool InputText(string label, string buf, uint buf_size) {
    bool ret = ImGuiPINVOKE.InputText__SWIG_3(label, buf, buf_size);
    return ret;
  }

  public static bool InputTextMultiline(string label, string buf, uint buf_size, ImVec2 size, int flags, SWIGTYPE_p_f_p_ImGuiInputTextCallbackData__int callback, SWIGTYPE_p_void user_data) {
    bool ret = ImGuiPINVOKE.InputTextMultiline__SWIG_0(label, buf, buf_size, ImVec2.getCPtr(size), flags, SWIGTYPE_p_f_p_ImGuiInputTextCallbackData__int.getCPtr(callback), SWIGTYPE_p_void.getCPtr(user_data));
    if (ImGuiPINVOKE.SWIGPendingException.Pending) throw ImGuiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool InputTextMultiline(string label, string buf, uint buf_size, ImVec2 size, int flags, SWIGTYPE_p_f_p_ImGuiInputTextCallbackData__int callback) {
    bool ret = ImGuiPINVOKE.InputTextMultiline__SWIG_1(label, buf, buf_size, ImVec2.getCPtr(size), flags, SWIGTYPE_p_f_p_ImGuiInputTextCallbackData__int.getCPtr(callback));
    if (ImGuiPINVOKE.SWIGPendingException.Pending) throw ImGuiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool InputTextMultiline(string label, string buf, uint buf_size, ImVec2 size, int flags) {
    bool ret = ImGuiPINVOKE.InputTextMultiline__SWIG_2(label, buf, buf_size, ImVec2.getCPtr(size), flags);
    if (ImGuiPINVOKE.SWIGPendingException.Pending) throw ImGuiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool InputTextMultiline(string label, string buf, uint buf_size, ImVec2 size) {
    bool ret = ImGuiPINVOKE.InputTextMultiline__SWIG_3(label, buf, buf_size, ImVec2.getCPtr(size));
    if (ImGuiPINVOKE.SWIGPendingException.Pending) throw ImGuiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool InputTextMultiline(string label, string buf, uint buf_size) {
    bool ret = ImGuiPINVOKE.InputTextMultiline__SWIG_4(label, buf, buf_size);
    return ret;
  }

  public static bool InputTextWithHint(string label, string hint, string buf, uint buf_size, int flags, SWIGTYPE_p_f_p_ImGuiInputTextCallbackData__int callback, SWIGTYPE_p_void user_data) {
    bool ret = ImGuiPINVOKE.InputTextWithHint__SWIG_0(label, hint, buf, buf_size, flags, SWIGTYPE_p_f_p_ImGuiInputTextCallbackData__int.getCPtr(callback), SWIGTYPE_p_void.getCPtr(user_data));
    return ret;
  }

  public static bool InputTextWithHint(string label, string hint, string buf, uint buf_size, int flags, SWIGTYPE_p_f_p_ImGuiInputTextCallbackData__int callback) {
    bool ret = ImGuiPINVOKE.InputTextWithHint__SWIG_1(label, hint, buf, buf_size, flags, SWIGTYPE_p_f_p_ImGuiInputTextCallbackData__int.getCPtr(callback));
    return ret;
  }

  public static bool InputTextWithHint(string label, string hint, string buf, uint buf_size, int flags) {
    bool ret = ImGuiPINVOKE.InputTextWithHint__SWIG_2(label, hint, buf, buf_size, flags);
    return ret;
  }

  public static bool InputTextWithHint(string label, string hint, string buf, uint buf_size) {
    bool ret = ImGuiPINVOKE.InputTextWithHint__SWIG_3(label, hint, buf, buf_size);
    return ret;
  }

  public static bool InputFloat(string label, ref float v, float step, float step_fast, string format, int flags) {
    bool ret = ImGuiPINVOKE.InputFloat__SWIG_0(label, ref v, step, step_fast, format, flags);
    return ret;
  }

  public static bool InputFloat(string label, ref float v, float step, float step_fast, string format) {
    bool ret = ImGuiPINVOKE.InputFloat__SWIG_1(label, ref v, step, step_fast, format);
    return ret;
  }

  public static bool InputFloat(string label, ref float v, float step, float step_fast) {
    bool ret = ImGuiPINVOKE.InputFloat__SWIG_2(label, ref v, step, step_fast);
    return ret;
  }

  public static bool InputFloat(string label, ref float v, float step) {
    bool ret = ImGuiPINVOKE.InputFloat__SWIG_3(label, ref v, step);
    return ret;
  }

  public static bool InputFloat(string label, ref float v) {
    bool ret = ImGuiPINVOKE.InputFloat__SWIG_4(label, ref v);
    return ret;
  }

  public static bool InputFloat2(string label, SWIGTYPE_p_float v, string format, int flags) {
    bool ret = ImGuiPINVOKE.InputFloat2__SWIG_0(label, SWIGTYPE_p_float.getCPtr(v), format, flags);
    return ret;
  }

  public static bool InputFloat2(string label, SWIGTYPE_p_float v, string format) {
    bool ret = ImGuiPINVOKE.InputFloat2__SWIG_1(label, SWIGTYPE_p_float.getCPtr(v), format);
    return ret;
  }

  public static bool InputFloat2(string label, SWIGTYPE_p_float v) {
    bool ret = ImGuiPINVOKE.InputFloat2__SWIG_2(label, SWIGTYPE_p_float.getCPtr(v));
    return ret;
  }

  public static bool InputFloat3(string label, SWIGTYPE_p_float v, string format, int flags) {
    bool ret = ImGuiPINVOKE.InputFloat3__SWIG_0(label, SWIGTYPE_p_float.getCPtr(v), format, flags);
    return ret;
  }

  public static bool InputFloat3(string label, SWIGTYPE_p_float v, string format) {
    bool ret = ImGuiPINVOKE.InputFloat3__SWIG_1(label, SWIGTYPE_p_float.getCPtr(v), format);
    return ret;
  }

  public static bool InputFloat3(string label, SWIGTYPE_p_float v) {
    bool ret = ImGuiPINVOKE.InputFloat3__SWIG_2(label, SWIGTYPE_p_float.getCPtr(v));
    return ret;
  }

  public static bool InputFloat4(string label, SWIGTYPE_p_float v, string format, int flags) {
    bool ret = ImGuiPINVOKE.InputFloat4__SWIG_0(label, SWIGTYPE_p_float.getCPtr(v), format, flags);
    return ret;
  }

  public static bool InputFloat4(string label, SWIGTYPE_p_float v, string format) {
    bool ret = ImGuiPINVOKE.InputFloat4__SWIG_1(label, SWIGTYPE_p_float.getCPtr(v), format);
    return ret;
  }

  public static bool InputFloat4(string label, SWIGTYPE_p_float v) {
    bool ret = ImGuiPINVOKE.InputFloat4__SWIG_2(label, SWIGTYPE_p_float.getCPtr(v));
    return ret;
  }

  public static bool InputInt(string label, ref int v, int step, int step_fast, int flags) {
    bool ret = ImGuiPINVOKE.InputInt__SWIG_0(label, ref v, step, step_fast, flags);
    return ret;
  }

  public static bool InputInt(string label, ref int v, int step, int step_fast) {
    bool ret = ImGuiPINVOKE.InputInt__SWIG_1(label, ref v, step, step_fast);
    return ret;
  }

  public static bool InputInt(string label, ref int v, int step) {
    bool ret = ImGuiPINVOKE.InputInt__SWIG_2(label, ref v, step);
    return ret;
  }

  public static bool InputInt(string label, ref int v) {
    bool ret = ImGuiPINVOKE.InputInt__SWIG_3(label, ref v);
    return ret;
  }

  public static bool InputInt2(string label, SWIGTYPE_p_int v, int flags) {
    bool ret = ImGuiPINVOKE.InputInt2__SWIG_0(label, SWIGTYPE_p_int.getCPtr(v), flags);
    return ret;
  }

  public static bool InputInt2(string label, SWIGTYPE_p_int v) {
    bool ret = ImGuiPINVOKE.InputInt2__SWIG_1(label, SWIGTYPE_p_int.getCPtr(v));
    return ret;
  }

  public static bool InputInt3(string label, SWIGTYPE_p_int v, int flags) {
    bool ret = ImGuiPINVOKE.InputInt3__SWIG_0(label, SWIGTYPE_p_int.getCPtr(v), flags);
    return ret;
  }

  public static bool InputInt3(string label, SWIGTYPE_p_int v) {
    bool ret = ImGuiPINVOKE.InputInt3__SWIG_1(label, SWIGTYPE_p_int.getCPtr(v));
    return ret;
  }

  public static bool InputInt4(string label, SWIGTYPE_p_int v, int flags) {
    bool ret = ImGuiPINVOKE.InputInt4__SWIG_0(label, SWIGTYPE_p_int.getCPtr(v), flags);
    return ret;
  }

  public static bool InputInt4(string label, SWIGTYPE_p_int v) {
    bool ret = ImGuiPINVOKE.InputInt4__SWIG_1(label, SWIGTYPE_p_int.getCPtr(v));
    return ret;
  }

  public static bool InputDouble(string label, SWIGTYPE_p_double v, double step, double step_fast, string format, int flags) {
    bool ret = ImGuiPINVOKE.InputDouble__SWIG_0(label, SWIGTYPE_p_double.getCPtr(v), step, step_fast, format, flags);
    return ret;
  }

  public static bool InputDouble(string label, SWIGTYPE_p_double v, double step, double step_fast, string format) {
    bool ret = ImGuiPINVOKE.InputDouble__SWIG_1(label, SWIGTYPE_p_double.getCPtr(v), step, step_fast, format);
    return ret;
  }

  public static bool InputDouble(string label, SWIGTYPE_p_double v, double step, double step_fast) {
    bool ret = ImGuiPINVOKE.InputDouble__SWIG_2(label, SWIGTYPE_p_double.getCPtr(v), step, step_fast);
    return ret;
  }

  public static bool InputDouble(string label, SWIGTYPE_p_double v, double step) {
    bool ret = ImGuiPINVOKE.InputDouble__SWIG_3(label, SWIGTYPE_p_double.getCPtr(v), step);
    return ret;
  }

  public static bool InputDouble(string label, SWIGTYPE_p_double v) {
    bool ret = ImGuiPINVOKE.InputDouble__SWIG_4(label, SWIGTYPE_p_double.getCPtr(v));
    return ret;
  }

  public static bool InputScalar(string label, int data_type, SWIGTYPE_p_void p_data, SWIGTYPE_p_void p_step, SWIGTYPE_p_void p_step_fast, string format, int flags) {
    bool ret = ImGuiPINVOKE.InputScalar__SWIG_0(label, data_type, SWIGTYPE_p_void.getCPtr(p_data), SWIGTYPE_p_void.getCPtr(p_step), SWIGTYPE_p_void.getCPtr(p_step_fast), format, flags);
    return ret;
  }

  public static bool InputScalar(string label, int data_type, SWIGTYPE_p_void p_data, SWIGTYPE_p_void p_step, SWIGTYPE_p_void p_step_fast, string format) {
    bool ret = ImGuiPINVOKE.InputScalar__SWIG_1(label, data_type, SWIGTYPE_p_void.getCPtr(p_data), SWIGTYPE_p_void.getCPtr(p_step), SWIGTYPE_p_void.getCPtr(p_step_fast), format);
    return ret;
  }

  public static bool InputScalar(string label, int data_type, SWIGTYPE_p_void p_data, SWIGTYPE_p_void p_step, SWIGTYPE_p_void p_step_fast) {
    bool ret = ImGuiPINVOKE.InputScalar__SWIG_2(label, data_type, SWIGTYPE_p_void.getCPtr(p_data), SWIGTYPE_p_void.getCPtr(p_step), SWIGTYPE_p_void.getCPtr(p_step_fast));
    return ret;
  }

  public static bool InputScalar(string label, int data_type, SWIGTYPE_p_void p_data, SWIGTYPE_p_void p_step) {
    bool ret = ImGuiPINVOKE.InputScalar__SWIG_3(label, data_type, SWIGTYPE_p_void.getCPtr(p_data), SWIGTYPE_p_void.getCPtr(p_step));
    return ret;
  }

  public static bool InputScalar(string label, int data_type, SWIGTYPE_p_void p_data) {
    bool ret = ImGuiPINVOKE.InputScalar__SWIG_4(label, data_type, SWIGTYPE_p_void.getCPtr(p_data));
    return ret;
  }

  public static bool InputScalarN(string label, int data_type, SWIGTYPE_p_void p_data, int components, SWIGTYPE_p_void p_step, SWIGTYPE_p_void p_step_fast, string format, int flags) {
    bool ret = ImGuiPINVOKE.InputScalarN__SWIG_0(label, data_type, SWIGTYPE_p_void.getCPtr(p_data), components, SWIGTYPE_p_void.getCPtr(p_step), SWIGTYPE_p_void.getCPtr(p_step_fast), format, flags);
    return ret;
  }

  public static bool InputScalarN(string label, int data_type, SWIGTYPE_p_void p_data, int components, SWIGTYPE_p_void p_step, SWIGTYPE_p_void p_step_fast, string format) {
    bool ret = ImGuiPINVOKE.InputScalarN__SWIG_1(label, data_type, SWIGTYPE_p_void.getCPtr(p_data), components, SWIGTYPE_p_void.getCPtr(p_step), SWIGTYPE_p_void.getCPtr(p_step_fast), format);
    return ret;
  }

  public static bool InputScalarN(string label, int data_type, SWIGTYPE_p_void p_data, int components, SWIGTYPE_p_void p_step, SWIGTYPE_p_void p_step_fast) {
    bool ret = ImGuiPINVOKE.InputScalarN__SWIG_2(label, data_type, SWIGTYPE_p_void.getCPtr(p_data), components, SWIGTYPE_p_void.getCPtr(p_step), SWIGTYPE_p_void.getCPtr(p_step_fast));
    return ret;
  }

  public static bool InputScalarN(string label, int data_type, SWIGTYPE_p_void p_data, int components, SWIGTYPE_p_void p_step) {
    bool ret = ImGuiPINVOKE.InputScalarN__SWIG_3(label, data_type, SWIGTYPE_p_void.getCPtr(p_data), components, SWIGTYPE_p_void.getCPtr(p_step));
    return ret;
  }

  public static bool InputScalarN(string label, int data_type, SWIGTYPE_p_void p_data, int components) {
    bool ret = ImGuiPINVOKE.InputScalarN__SWIG_4(label, data_type, SWIGTYPE_p_void.getCPtr(p_data), components);
    return ret;
  }

  public static bool ColorEdit3(string label, SWIGTYPE_p_float col, int flags) {
    bool ret = ImGuiPINVOKE.ColorEdit3__SWIG_0(label, SWIGTYPE_p_float.getCPtr(col), flags);
    return ret;
  }

  public static bool ColorEdit3(string label, SWIGTYPE_p_float col) {
    bool ret = ImGuiPINVOKE.ColorEdit3__SWIG_1(label, SWIGTYPE_p_float.getCPtr(col));
    return ret;
  }

  public static bool ColorEdit4(string label, SWIGTYPE_p_float col, int flags) {
    bool ret = ImGuiPINVOKE.ColorEdit4__SWIG_0(label, SWIGTYPE_p_float.getCPtr(col), flags);
    return ret;
  }

  public static bool ColorEdit4(string label, SWIGTYPE_p_float col) {
    bool ret = ImGuiPINVOKE.ColorEdit4__SWIG_1(label, SWIGTYPE_p_float.getCPtr(col));
    return ret;
  }

  public static bool ColorPicker3(string label, SWIGTYPE_p_float col, int flags) {
    bool ret = ImGuiPINVOKE.ColorPicker3__SWIG_0(label, SWIGTYPE_p_float.getCPtr(col), flags);
    return ret;
  }

  public static bool ColorPicker3(string label, SWIGTYPE_p_float col) {
    bool ret = ImGuiPINVOKE.ColorPicker3__SWIG_1(label, SWIGTYPE_p_float.getCPtr(col));
    return ret;
  }

  public static bool ColorPicker4(string label, SWIGTYPE_p_float col, int flags, SWIGTYPE_p_float ref_col) {
    bool ret = ImGuiPINVOKE.ColorPicker4__SWIG_0(label, SWIGTYPE_p_float.getCPtr(col), flags, SWIGTYPE_p_float.getCPtr(ref_col));
    return ret;
  }

  public static bool ColorPicker4(string label, SWIGTYPE_p_float col, int flags) {
    bool ret = ImGuiPINVOKE.ColorPicker4__SWIG_1(label, SWIGTYPE_p_float.getCPtr(col), flags);
    return ret;
  }

  public static bool ColorPicker4(string label, SWIGTYPE_p_float col) {
    bool ret = ImGuiPINVOKE.ColorPicker4__SWIG_2(label, SWIGTYPE_p_float.getCPtr(col));
    return ret;
  }

  public static bool ColorButton(string desc_id, ImVec4 col, int flags, ImVec2 size) {
    bool ret = ImGuiPINVOKE.ColorButton__SWIG_0(desc_id, ImVec4.getCPtr(col), flags, ImVec2.getCPtr(size));
    if (ImGuiPINVOKE.SWIGPendingException.Pending) throw ImGuiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool ColorButton(string desc_id, ImVec4 col, int flags) {
    bool ret = ImGuiPINVOKE.ColorButton__SWIG_1(desc_id, ImVec4.getCPtr(col), flags);
    if (ImGuiPINVOKE.SWIGPendingException.Pending) throw ImGuiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool ColorButton(string desc_id, ImVec4 col) {
    bool ret = ImGuiPINVOKE.ColorButton__SWIG_2(desc_id, ImVec4.getCPtr(col));
    if (ImGuiPINVOKE.SWIGPendingException.Pending) throw ImGuiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void SetColorEditOptions(int flags) {
    ImGuiPINVOKE.SetColorEditOptions(flags);
  }

  public static bool TreeNode(string label) {
    bool ret = ImGuiPINVOKE.TreeNode__SWIG_0(label);
    return ret;
  }

  public static bool TreeNode(string str_id, string fmt) {
    bool ret = ImGuiPINVOKE.TreeNode__SWIG_1(str_id, fmt);
    return ret;
  }

  public static bool TreeNode(SWIGTYPE_p_void ptr_id, string fmt) {
    bool ret = ImGuiPINVOKE.TreeNode__SWIG_2(SWIGTYPE_p_void.getCPtr(ptr_id), fmt);
    return ret;
  }

  public static bool TreeNodeEx(string label, int flags) {
    bool ret = ImGuiPINVOKE.TreeNodeEx__SWIG_0(label, flags);
    return ret;
  }

  public static bool TreeNodeEx(string label) {
    bool ret = ImGuiPINVOKE.TreeNodeEx__SWIG_1(label);
    return ret;
  }

  public static bool TreeNodeEx(string str_id, int flags, string fmt) {
    bool ret = ImGuiPINVOKE.TreeNodeEx__SWIG_2(str_id, flags, fmt);
    return ret;
  }

  public static bool TreeNodeEx(SWIGTYPE_p_void ptr_id, int flags, string fmt) {
    bool ret = ImGuiPINVOKE.TreeNodeEx__SWIG_3(SWIGTYPE_p_void.getCPtr(ptr_id), flags, fmt);
    return ret;
  }

  public static void TreePush(string str_id) {
    ImGuiPINVOKE.TreePush__SWIG_0(str_id);
  }

  public static void TreePush(SWIGTYPE_p_void ptr_id) {
    ImGuiPINVOKE.TreePush__SWIG_1(SWIGTYPE_p_void.getCPtr(ptr_id));
  }

  public static void TreePop() {
    ImGuiPINVOKE.TreePop();
  }

  public static float GetTreeNodeToLabelSpacing() {
    float ret = ImGuiPINVOKE.GetTreeNodeToLabelSpacing();
    return ret;
  }

  public static bool CollapsingHeader(string label, int flags) {
    bool ret = ImGuiPINVOKE.CollapsingHeader__SWIG_0(label, flags);
    return ret;
  }

  public static bool CollapsingHeader(string label) {
    bool ret = ImGuiPINVOKE.CollapsingHeader__SWIG_1(label);
    return ret;
  }

  public static bool CollapsingHeader(string label, SWIGTYPE_p_bool p_visible, int flags) {
    bool ret = ImGuiPINVOKE.CollapsingHeader__SWIG_2(label, SWIGTYPE_p_bool.getCPtr(p_visible), flags);
    return ret;
  }

  public static bool CollapsingHeader(string label, SWIGTYPE_p_bool p_visible) {
    bool ret = ImGuiPINVOKE.CollapsingHeader__SWIG_3(label, SWIGTYPE_p_bool.getCPtr(p_visible));
    return ret;
  }

  public static void SetNextItemOpen(bool is_open, int cond) {
    ImGuiPINVOKE.SetNextItemOpen__SWIG_0(is_open, cond);
  }

  public static void SetNextItemOpen(bool is_open) {
    ImGuiPINVOKE.SetNextItemOpen__SWIG_1(is_open);
  }

  public static void SetNextItemStorageID(uint storage_id) {
    ImGuiPINVOKE.SetNextItemStorageID(storage_id);
  }

  public static bool Selectable(string label, bool selected, int flags, ImVec2 size) {
    bool ret = ImGuiPINVOKE.Selectable__SWIG_0(label, selected, flags, ImVec2.getCPtr(size));
    if (ImGuiPINVOKE.SWIGPendingException.Pending) throw ImGuiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool Selectable(string label, bool selected, int flags) {
    bool ret = ImGuiPINVOKE.Selectable__SWIG_1(label, selected, flags);
    return ret;
  }

  public static bool Selectable(string label, bool selected) {
    bool ret = ImGuiPINVOKE.Selectable__SWIG_2(label, selected);
    return ret;
  }

  public static bool Selectable(string label) {
    bool ret = ImGuiPINVOKE.Selectable__SWIG_3(label);
    return ret;
  }

  public static bool Selectable(string label, SWIGTYPE_p_bool p_selected, int flags, ImVec2 size) {
    bool ret = ImGuiPINVOKE.Selectable__SWIG_4(label, SWIGTYPE_p_bool.getCPtr(p_selected), flags, ImVec2.getCPtr(size));
    if (ImGuiPINVOKE.SWIGPendingException.Pending) throw ImGuiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool Selectable(string label, SWIGTYPE_p_bool p_selected, int flags) {
    bool ret = ImGuiPINVOKE.Selectable__SWIG_5(label, SWIGTYPE_p_bool.getCPtr(p_selected), flags);
    return ret;
  }

  public static bool Selectable(string label, SWIGTYPE_p_bool p_selected) {
    bool ret = ImGuiPINVOKE.Selectable__SWIG_6(label, SWIGTYPE_p_bool.getCPtr(p_selected));
    return ret;
  }

  public static ImGuiMultiSelectIO BeginMultiSelect(int flags, int selection_size, int items_count) {
    global::System.IntPtr cPtr = ImGuiPINVOKE.BeginMultiSelect__SWIG_0(flags, selection_size, items_count);
    ImGuiMultiSelectIO ret = (cPtr == global::System.IntPtr.Zero) ? null : new ImGuiMultiSelectIO(cPtr, false);
    return ret;
  }

  public static ImGuiMultiSelectIO BeginMultiSelect(int flags, int selection_size) {
    global::System.IntPtr cPtr = ImGuiPINVOKE.BeginMultiSelect__SWIG_1(flags, selection_size);
    ImGuiMultiSelectIO ret = (cPtr == global::System.IntPtr.Zero) ? null : new ImGuiMultiSelectIO(cPtr, false);
    return ret;
  }

  public static ImGuiMultiSelectIO BeginMultiSelect(int flags) {
    global::System.IntPtr cPtr = ImGuiPINVOKE.BeginMultiSelect__SWIG_2(flags);
    ImGuiMultiSelectIO ret = (cPtr == global::System.IntPtr.Zero) ? null : new ImGuiMultiSelectIO(cPtr, false);
    return ret;
  }

  public static ImGuiMultiSelectIO EndMultiSelect() {
    global::System.IntPtr cPtr = ImGuiPINVOKE.EndMultiSelect();
    ImGuiMultiSelectIO ret = (cPtr == global::System.IntPtr.Zero) ? null : new ImGuiMultiSelectIO(cPtr, false);
    return ret;
  }

  public static void SetNextItemSelectionUserData(long selection_user_data) {
    ImGuiPINVOKE.SetNextItemSelectionUserData(selection_user_data);
  }

  public static bool IsItemToggledSelection() {
    bool ret = ImGuiPINVOKE.IsItemToggledSelection();
    return ret;
  }

  public static bool BeginListBox(string label, ImVec2 size) {
    bool ret = ImGuiPINVOKE.BeginListBox__SWIG_0(label, ImVec2.getCPtr(size));
    if (ImGuiPINVOKE.SWIGPendingException.Pending) throw ImGuiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool BeginListBox(string label) {
    bool ret = ImGuiPINVOKE.BeginListBox__SWIG_1(label);
    return ret;
  }

  public static void EndListBox() {
    ImGuiPINVOKE.EndListBox();
  }

  public static bool ListBox(string label, SWIGTYPE_p_int current_item, SWIGTYPE_p_p_char items, int items_count, int height_in_items) {
    bool ret = ImGuiPINVOKE.ListBox__SWIG_0(label, SWIGTYPE_p_int.getCPtr(current_item), SWIGTYPE_p_p_char.getCPtr(items), items_count, height_in_items);
    return ret;
  }

  public static bool ListBox(string label, SWIGTYPE_p_int current_item, SWIGTYPE_p_p_char items, int items_count) {
    bool ret = ImGuiPINVOKE.ListBox__SWIG_1(label, SWIGTYPE_p_int.getCPtr(current_item), SWIGTYPE_p_p_char.getCPtr(items), items_count);
    return ret;
  }

  public static bool ListBox(string label, SWIGTYPE_p_int current_item, SWIGTYPE_p_f_p_void_int__p_char getter, SWIGTYPE_p_void user_data, int items_count, int height_in_items) {
    bool ret = ImGuiPINVOKE.ListBox__SWIG_2(label, SWIGTYPE_p_int.getCPtr(current_item), SWIGTYPE_p_f_p_void_int__p_char.getCPtr(getter), SWIGTYPE_p_void.getCPtr(user_data), items_count, height_in_items);
    return ret;
  }

  public static bool ListBox(string label, SWIGTYPE_p_int current_item, SWIGTYPE_p_f_p_void_int__p_char getter, SWIGTYPE_p_void user_data, int items_count) {
    bool ret = ImGuiPINVOKE.ListBox__SWIG_3(label, SWIGTYPE_p_int.getCPtr(current_item), SWIGTYPE_p_f_p_void_int__p_char.getCPtr(getter), SWIGTYPE_p_void.getCPtr(user_data), items_count);
    return ret;
  }

  public static void PlotLines(string label, SWIGTYPE_p_float values, int values_count, int values_offset, string overlay_text, float scale_min, float scale_max, ImVec2 graph_size, int stride) {
    ImGuiPINVOKE.PlotLines__SWIG_0(label, SWIGTYPE_p_float.getCPtr(values), values_count, values_offset, overlay_text, scale_min, scale_max, ImVec2.getCPtr(graph_size), stride);
    if (ImGuiPINVOKE.SWIGPendingException.Pending) throw ImGuiPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void PlotLines(string label, SWIGTYPE_p_float values, int values_count, int values_offset, string overlay_text, float scale_min, float scale_max, ImVec2 graph_size) {
    ImGuiPINVOKE.PlotLines__SWIG_1(label, SWIGTYPE_p_float.getCPtr(values), values_count, values_offset, overlay_text, scale_min, scale_max, ImVec2.getCPtr(graph_size));
    if (ImGuiPINVOKE.SWIGPendingException.Pending) throw ImGuiPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void PlotLines(string label, SWIGTYPE_p_float values, int values_count, int values_offset, string overlay_text, float scale_min, float scale_max) {
    ImGuiPINVOKE.PlotLines__SWIG_2(label, SWIGTYPE_p_float.getCPtr(values), values_count, values_offset, overlay_text, scale_min, scale_max);
  }

  public static void PlotLines(string label, SWIGTYPE_p_float values, int values_count, int values_offset, string overlay_text, float scale_min) {
    ImGuiPINVOKE.PlotLines__SWIG_3(label, SWIGTYPE_p_float.getCPtr(values), values_count, values_offset, overlay_text, scale_min);
  }

  public static void PlotLines(string label, SWIGTYPE_p_float values, int values_count, int values_offset, string overlay_text) {
    ImGuiPINVOKE.PlotLines__SWIG_4(label, SWIGTYPE_p_float.getCPtr(values), values_count, values_offset, overlay_text);
  }

  public static void PlotLines(string label, SWIGTYPE_p_float values, int values_count, int values_offset) {
    ImGuiPINVOKE.PlotLines__SWIG_5(label, SWIGTYPE_p_float.getCPtr(values), values_count, values_offset);
  }

  public static void PlotLines(string label, SWIGTYPE_p_float values, int values_count) {
    ImGuiPINVOKE.PlotLines__SWIG_6(label, SWIGTYPE_p_float.getCPtr(values), values_count);
  }

  public static void PlotLines(string label, SWIGTYPE_p_f_p_void_int__float values_getter, SWIGTYPE_p_void data, int values_count, int values_offset, string overlay_text, float scale_min, float scale_max, ImVec2 graph_size) {
    ImGuiPINVOKE.PlotLines__SWIG_7(label, SWIGTYPE_p_f_p_void_int__float.getCPtr(values_getter), SWIGTYPE_p_void.getCPtr(data), values_count, values_offset, overlay_text, scale_min, scale_max, ImVec2.getCPtr(graph_size));
    if (ImGuiPINVOKE.SWIGPendingException.Pending) throw ImGuiPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void PlotLines(string label, SWIGTYPE_p_f_p_void_int__float values_getter, SWIGTYPE_p_void data, int values_count, int values_offset, string overlay_text, float scale_min, float scale_max) {
    ImGuiPINVOKE.PlotLines__SWIG_8(label, SWIGTYPE_p_f_p_void_int__float.getCPtr(values_getter), SWIGTYPE_p_void.getCPtr(data), values_count, values_offset, overlay_text, scale_min, scale_max);
  }

  public static void PlotLines(string label, SWIGTYPE_p_f_p_void_int__float values_getter, SWIGTYPE_p_void data, int values_count, int values_offset, string overlay_text, float scale_min) {
    ImGuiPINVOKE.PlotLines__SWIG_9(label, SWIGTYPE_p_f_p_void_int__float.getCPtr(values_getter), SWIGTYPE_p_void.getCPtr(data), values_count, values_offset, overlay_text, scale_min);
  }

  public static void PlotLines(string label, SWIGTYPE_p_f_p_void_int__float values_getter, SWIGTYPE_p_void data, int values_count, int values_offset, string overlay_text) {
    ImGuiPINVOKE.PlotLines__SWIG_10(label, SWIGTYPE_p_f_p_void_int__float.getCPtr(values_getter), SWIGTYPE_p_void.getCPtr(data), values_count, values_offset, overlay_text);
  }

  public static void PlotLines(string label, SWIGTYPE_p_f_p_void_int__float values_getter, SWIGTYPE_p_void data, int values_count, int values_offset) {
    ImGuiPINVOKE.PlotLines__SWIG_11(label, SWIGTYPE_p_f_p_void_int__float.getCPtr(values_getter), SWIGTYPE_p_void.getCPtr(data), values_count, values_offset);
  }

  public static void PlotLines(string label, SWIGTYPE_p_f_p_void_int__float values_getter, SWIGTYPE_p_void data, int values_count) {
    ImGuiPINVOKE.PlotLines__SWIG_12(label, SWIGTYPE_p_f_p_void_int__float.getCPtr(values_getter), SWIGTYPE_p_void.getCPtr(data), values_count);
  }

  public static void PlotHistogram(string label, SWIGTYPE_p_float values, int values_count, int values_offset, string overlay_text, float scale_min, float scale_max, ImVec2 graph_size, int stride) {
    ImGuiPINVOKE.PlotHistogram__SWIG_0(label, SWIGTYPE_p_float.getCPtr(values), values_count, values_offset, overlay_text, scale_min, scale_max, ImVec2.getCPtr(graph_size), stride);
    if (ImGuiPINVOKE.SWIGPendingException.Pending) throw ImGuiPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void PlotHistogram(string label, SWIGTYPE_p_float values, int values_count, int values_offset, string overlay_text, float scale_min, float scale_max, ImVec2 graph_size) {
    ImGuiPINVOKE.PlotHistogram__SWIG_1(label, SWIGTYPE_p_float.getCPtr(values), values_count, values_offset, overlay_text, scale_min, scale_max, ImVec2.getCPtr(graph_size));
    if (ImGuiPINVOKE.SWIGPendingException.Pending) throw ImGuiPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void PlotHistogram(string label, SWIGTYPE_p_float values, int values_count, int values_offset, string overlay_text, float scale_min, float scale_max) {
    ImGuiPINVOKE.PlotHistogram__SWIG_2(label, SWIGTYPE_p_float.getCPtr(values), values_count, values_offset, overlay_text, scale_min, scale_max);
  }

  public static void PlotHistogram(string label, SWIGTYPE_p_float values, int values_count, int values_offset, string overlay_text, float scale_min) {
    ImGuiPINVOKE.PlotHistogram__SWIG_3(label, SWIGTYPE_p_float.getCPtr(values), values_count, values_offset, overlay_text, scale_min);
  }

  public static void PlotHistogram(string label, SWIGTYPE_p_float values, int values_count, int values_offset, string overlay_text) {
    ImGuiPINVOKE.PlotHistogram__SWIG_4(label, SWIGTYPE_p_float.getCPtr(values), values_count, values_offset, overlay_text);
  }

  public static void PlotHistogram(string label, SWIGTYPE_p_float values, int values_count, int values_offset) {
    ImGuiPINVOKE.PlotHistogram__SWIG_5(label, SWIGTYPE_p_float.getCPtr(values), values_count, values_offset);
  }

  public static void PlotHistogram(string label, SWIGTYPE_p_float values, int values_count) {
    ImGuiPINVOKE.PlotHistogram__SWIG_6(label, SWIGTYPE_p_float.getCPtr(values), values_count);
  }

  public static void PlotHistogram(string label, SWIGTYPE_p_f_p_void_int__float values_getter, SWIGTYPE_p_void data, int values_count, int values_offset, string overlay_text, float scale_min, float scale_max, ImVec2 graph_size) {
    ImGuiPINVOKE.PlotHistogram__SWIG_7(label, SWIGTYPE_p_f_p_void_int__float.getCPtr(values_getter), SWIGTYPE_p_void.getCPtr(data), values_count, values_offset, overlay_text, scale_min, scale_max, ImVec2.getCPtr(graph_size));
    if (ImGuiPINVOKE.SWIGPendingException.Pending) throw ImGuiPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void PlotHistogram(string label, SWIGTYPE_p_f_p_void_int__float values_getter, SWIGTYPE_p_void data, int values_count, int values_offset, string overlay_text, float scale_min, float scale_max) {
    ImGuiPINVOKE.PlotHistogram__SWIG_8(label, SWIGTYPE_p_f_p_void_int__float.getCPtr(values_getter), SWIGTYPE_p_void.getCPtr(data), values_count, values_offset, overlay_text, scale_min, scale_max);
  }

  public static void PlotHistogram(string label, SWIGTYPE_p_f_p_void_int__float values_getter, SWIGTYPE_p_void data, int values_count, int values_offset, string overlay_text, float scale_min) {
    ImGuiPINVOKE.PlotHistogram__SWIG_9(label, SWIGTYPE_p_f_p_void_int__float.getCPtr(values_getter), SWIGTYPE_p_void.getCPtr(data), values_count, values_offset, overlay_text, scale_min);
  }

  public static void PlotHistogram(string label, SWIGTYPE_p_f_p_void_int__float values_getter, SWIGTYPE_p_void data, int values_count, int values_offset, string overlay_text) {
    ImGuiPINVOKE.PlotHistogram__SWIG_10(label, SWIGTYPE_p_f_p_void_int__float.getCPtr(values_getter), SWIGTYPE_p_void.getCPtr(data), values_count, values_offset, overlay_text);
  }

  public static void PlotHistogram(string label, SWIGTYPE_p_f_p_void_int__float values_getter, SWIGTYPE_p_void data, int values_count, int values_offset) {
    ImGuiPINVOKE.PlotHistogram__SWIG_11(label, SWIGTYPE_p_f_p_void_int__float.getCPtr(values_getter), SWIGTYPE_p_void.getCPtr(data), values_count, values_offset);
  }

  public static void PlotHistogram(string label, SWIGTYPE_p_f_p_void_int__float values_getter, SWIGTYPE_p_void data, int values_count) {
    ImGuiPINVOKE.PlotHistogram__SWIG_12(label, SWIGTYPE_p_f_p_void_int__float.getCPtr(values_getter), SWIGTYPE_p_void.getCPtr(data), values_count);
  }

  public static void Value(string prefix, bool b) {
    ImGuiPINVOKE.Value__SWIG_0(prefix, b);
  }

  public static void Value(string prefix, int v) {
    ImGuiPINVOKE.Value__SWIG_1(prefix, v);
  }

  public static void Value(string prefix, uint v) {
    ImGuiPINVOKE.Value__SWIG_2(prefix, v);
  }

  public static void Value(string prefix, float v, string float_format) {
    ImGuiPINVOKE.Value__SWIG_3(prefix, v, float_format);
  }

  public static void Value(string prefix, float v) {
    ImGuiPINVOKE.Value__SWIG_4(prefix, v);
  }

  public static bool BeginMenuBar() {
    bool ret = ImGuiPINVOKE.BeginMenuBar();
    return ret;
  }

  public static void EndMenuBar() {
    ImGuiPINVOKE.EndMenuBar();
  }

  public static bool BeginMainMenuBar() {
    bool ret = ImGuiPINVOKE.BeginMainMenuBar();
    return ret;
  }

  public static void EndMainMenuBar() {
    ImGuiPINVOKE.EndMainMenuBar();
  }

  public static bool BeginMenu(string label, bool enabled) {
    bool ret = ImGuiPINVOKE.BeginMenu__SWIG_0(label, enabled);
    return ret;
  }

  public static bool BeginMenu(string label) {
    bool ret = ImGuiPINVOKE.BeginMenu__SWIG_1(label);
    return ret;
  }

  public static void EndMenu() {
    ImGuiPINVOKE.EndMenu();
  }

  public static bool MenuItem(string label, string shortcut, bool selected, bool enabled) {
    bool ret = ImGuiPINVOKE.MenuItem__SWIG_0(label, shortcut, selected, enabled);
    return ret;
  }

  public static bool MenuItem(string label, string shortcut, bool selected) {
    bool ret = ImGuiPINVOKE.MenuItem__SWIG_1(label, shortcut, selected);
    return ret;
  }

  public static bool MenuItem(string label, string shortcut) {
    bool ret = ImGuiPINVOKE.MenuItem__SWIG_2(label, shortcut);
    return ret;
  }

  public static bool MenuItem(string label) {
    bool ret = ImGuiPINVOKE.MenuItem__SWIG_3(label);
    return ret;
  }

  public static bool MenuItem(string label, string shortcut, SWIGTYPE_p_bool p_selected, bool enabled) {
    bool ret = ImGuiPINVOKE.MenuItem__SWIG_4(label, shortcut, SWIGTYPE_p_bool.getCPtr(p_selected), enabled);
    return ret;
  }

  public static bool MenuItem(string label, string shortcut, SWIGTYPE_p_bool p_selected) {
    bool ret = ImGuiPINVOKE.MenuItem__SWIG_5(label, shortcut, SWIGTYPE_p_bool.getCPtr(p_selected));
    return ret;
  }

  public static bool BeginTooltip() {
    bool ret = ImGuiPINVOKE.BeginTooltip();
    return ret;
  }

  public static void EndTooltip() {
    ImGuiPINVOKE.EndTooltip();
  }

  public static void SetTooltip(string fmt) {
    ImGuiPINVOKE.SetTooltip(fmt);
  }

  public static bool BeginItemTooltip() {
    bool ret = ImGuiPINVOKE.BeginItemTooltip();
    return ret;
  }

  public static void SetItemTooltip(string fmt) {
    ImGuiPINVOKE.SetItemTooltip(fmt);
  }

  public static bool BeginPopup(string str_id, int flags) {
    bool ret = ImGuiPINVOKE.BeginPopup__SWIG_0(str_id, flags);
    return ret;
  }

  public static bool BeginPopup(string str_id) {
    bool ret = ImGuiPINVOKE.BeginPopup__SWIG_1(str_id);
    return ret;
  }

  public static bool BeginPopupModal(string name, ref bool p_open, int flags) {
    bool ret = ImGuiPINVOKE.BeginPopupModal__SWIG_0(name, ref p_open, flags);
    return ret;
  }

  public static bool BeginPopupModal(string name, ref bool p_open) {
    bool ret = ImGuiPINVOKE.BeginPopupModal__SWIG_1(name, ref p_open);
    return ret;
  }

  public static bool BeginPopupModal(string name) {
    bool ret = ImGuiPINVOKE.BeginPopupModal__SWIG_2(name);
    return ret;
  }

  public static void EndPopup() {
    ImGuiPINVOKE.EndPopup();
  }

  public static void OpenPopup(string str_id, int popup_flags) {
    ImGuiPINVOKE.OpenPopup__SWIG_0(str_id, popup_flags);
  }

  public static void OpenPopup(string str_id) {
    ImGuiPINVOKE.OpenPopup__SWIG_1(str_id);
  }

  public static void OpenPopup(uint id, int popup_flags) {
    ImGuiPINVOKE.OpenPopup__SWIG_2(id, popup_flags);
  }

  public static void OpenPopup(uint id) {
    ImGuiPINVOKE.OpenPopup__SWIG_3(id);
  }

  public static void OpenPopupOnItemClick(string str_id, int popup_flags) {
    ImGuiPINVOKE.OpenPopupOnItemClick__SWIG_0(str_id, popup_flags);
  }

  public static void OpenPopupOnItemClick(string str_id) {
    ImGuiPINVOKE.OpenPopupOnItemClick__SWIG_1(str_id);
  }

  public static void OpenPopupOnItemClick() {
    ImGuiPINVOKE.OpenPopupOnItemClick__SWIG_2();
  }

  public static void CloseCurrentPopup() {
    ImGuiPINVOKE.CloseCurrentPopup();
  }

  public static bool BeginPopupContextItem(string str_id, int popup_flags) {
    bool ret = ImGuiPINVOKE.BeginPopupContextItem__SWIG_0(str_id, popup_flags);
    return ret;
  }

  public static bool BeginPopupContextItem(string str_id) {
    bool ret = ImGuiPINVOKE.BeginPopupContextItem__SWIG_1(str_id);
    return ret;
  }

  public static bool BeginPopupContextItem() {
    bool ret = ImGuiPINVOKE.BeginPopupContextItem__SWIG_2();
    return ret;
  }

  public static bool BeginPopupContextWindow(string str_id, int popup_flags) {
    bool ret = ImGuiPINVOKE.BeginPopupContextWindow__SWIG_0(str_id, popup_flags);
    return ret;
  }

  public static bool BeginPopupContextWindow(string str_id) {
    bool ret = ImGuiPINVOKE.BeginPopupContextWindow__SWIG_1(str_id);
    return ret;
  }

  public static bool BeginPopupContextWindow() {
    bool ret = ImGuiPINVOKE.BeginPopupContextWindow__SWIG_2();
    return ret;
  }

  public static bool BeginPopupContextVoid(string str_id, int popup_flags) {
    bool ret = ImGuiPINVOKE.BeginPopupContextVoid__SWIG_0(str_id, popup_flags);
    return ret;
  }

  public static bool BeginPopupContextVoid(string str_id) {
    bool ret = ImGuiPINVOKE.BeginPopupContextVoid__SWIG_1(str_id);
    return ret;
  }

  public static bool BeginPopupContextVoid() {
    bool ret = ImGuiPINVOKE.BeginPopupContextVoid__SWIG_2();
    return ret;
  }

  public static bool IsPopupOpen(string str_id, int flags) {
    bool ret = ImGuiPINVOKE.IsPopupOpen__SWIG_0(str_id, flags);
    return ret;
  }

  public static bool IsPopupOpen(string str_id) {
    bool ret = ImGuiPINVOKE.IsPopupOpen__SWIG_1(str_id);
    return ret;
  }

  public static bool BeginTable(string str_id, int columns, int flags, ImVec2 outer_size, float inner_width) {
    bool ret = ImGuiPINVOKE.BeginTable__SWIG_0(str_id, columns, flags, ImVec2.getCPtr(outer_size), inner_width);
    if (ImGuiPINVOKE.SWIGPendingException.Pending) throw ImGuiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool BeginTable(string str_id, int columns, int flags, ImVec2 outer_size) {
    bool ret = ImGuiPINVOKE.BeginTable__SWIG_1(str_id, columns, flags, ImVec2.getCPtr(outer_size));
    if (ImGuiPINVOKE.SWIGPendingException.Pending) throw ImGuiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool BeginTable(string str_id, int columns, int flags) {
    bool ret = ImGuiPINVOKE.BeginTable__SWIG_2(str_id, columns, flags);
    return ret;
  }

  public static bool BeginTable(string str_id, int columns) {
    bool ret = ImGuiPINVOKE.BeginTable__SWIG_3(str_id, columns);
    return ret;
  }

  public static void EndTable() {
    ImGuiPINVOKE.EndTable();
  }

  public static void TableNextRow(int row_flags, float min_row_height) {
    ImGuiPINVOKE.TableNextRow__SWIG_0(row_flags, min_row_height);
  }

  public static void TableNextRow(int row_flags) {
    ImGuiPINVOKE.TableNextRow__SWIG_1(row_flags);
  }

  public static void TableNextRow() {
    ImGuiPINVOKE.TableNextRow__SWIG_2();
  }

  public static bool TableNextColumn() {
    bool ret = ImGuiPINVOKE.TableNextColumn();
    return ret;
  }

  public static bool TableSetColumnIndex(int column_n) {
    bool ret = ImGuiPINVOKE.TableSetColumnIndex(column_n);
    return ret;
  }

  public static void TableSetupColumn(string label, int flags, float init_width_or_weight, uint user_id) {
    ImGuiPINVOKE.TableSetupColumn__SWIG_0(label, flags, init_width_or_weight, user_id);
  }

  public static void TableSetupColumn(string label, int flags, float init_width_or_weight) {
    ImGuiPINVOKE.TableSetupColumn__SWIG_1(label, flags, init_width_or_weight);
  }

  public static void TableSetupColumn(string label, int flags) {
    ImGuiPINVOKE.TableSetupColumn__SWIG_2(label, flags);
  }

  public static void TableSetupColumn(string label) {
    ImGuiPINVOKE.TableSetupColumn__SWIG_3(label);
  }

  public static void TableSetupScrollFreeze(int cols, int rows) {
    ImGuiPINVOKE.TableSetupScrollFreeze(cols, rows);
  }

  public static void TableHeader(string label) {
    ImGuiPINVOKE.TableHeader(label);
  }

  public static void TableHeadersRow() {
    ImGuiPINVOKE.TableHeadersRow();
  }

  public static void TableAngledHeadersRow() {
    ImGuiPINVOKE.TableAngledHeadersRow();
  }

  public static ImGuiTableSortSpecs TableGetSortSpecs() {
    global::System.IntPtr cPtr = ImGuiPINVOKE.TableGetSortSpecs();
    ImGuiTableSortSpecs ret = (cPtr == global::System.IntPtr.Zero) ? null : new ImGuiTableSortSpecs(cPtr, false);
    return ret;
  }

  public static int TableGetColumnCount() {
    int ret = ImGuiPINVOKE.TableGetColumnCount();
    return ret;
  }

  public static int TableGetColumnIndex() {
    int ret = ImGuiPINVOKE.TableGetColumnIndex();
    return ret;
  }

  public static int TableGetRowIndex() {
    int ret = ImGuiPINVOKE.TableGetRowIndex();
    return ret;
  }

  public static string TableGetColumnName(int column_n) {
    string ret = ImGuiPINVOKE.TableGetColumnName__SWIG_0(column_n);
    return ret;
  }

  public static string TableGetColumnName() {
    string ret = ImGuiPINVOKE.TableGetColumnName__SWIG_1();
    return ret;
  }

  public static int TableGetColumnFlags(int column_n) {
    int ret = ImGuiPINVOKE.TableGetColumnFlags__SWIG_0(column_n);
    return ret;
  }

  public static int TableGetColumnFlags() {
    int ret = ImGuiPINVOKE.TableGetColumnFlags__SWIG_1();
    return ret;
  }

  public static void TableSetColumnEnabled(int column_n, bool v) {
    ImGuiPINVOKE.TableSetColumnEnabled(column_n, v);
  }

  public static int TableGetHoveredColumn() {
    int ret = ImGuiPINVOKE.TableGetHoveredColumn();
    return ret;
  }

  public static void TableSetBgColor(int target, uint color, int column_n) {
    ImGuiPINVOKE.TableSetBgColor__SWIG_0(target, color, column_n);
  }

  public static void TableSetBgColor(int target, uint color) {
    ImGuiPINVOKE.TableSetBgColor__SWIG_1(target, color);
  }

  public static void Columns(int count, string id, bool borders) {
    ImGuiPINVOKE.Columns__SWIG_0(count, id, borders);
  }

  public static void Columns(int count, string id) {
    ImGuiPINVOKE.Columns__SWIG_1(count, id);
  }

  public static void Columns(int count) {
    ImGuiPINVOKE.Columns__SWIG_2(count);
  }

  public static void Columns() {
    ImGuiPINVOKE.Columns__SWIG_3();
  }

  public static void NextColumn() {
    ImGuiPINVOKE.NextColumn();
  }

  public static int GetColumnIndex() {
    int ret = ImGuiPINVOKE.GetColumnIndex();
    return ret;
  }

  public static float GetColumnWidth(int column_index) {
    float ret = ImGuiPINVOKE.GetColumnWidth__SWIG_0(column_index);
    return ret;
  }

  public static float GetColumnWidth() {
    float ret = ImGuiPINVOKE.GetColumnWidth__SWIG_1();
    return ret;
  }

  public static void SetColumnWidth(int column_index, float width) {
    ImGuiPINVOKE.SetColumnWidth(column_index, width);
  }

  public static float GetColumnOffset(int column_index) {
    float ret = ImGuiPINVOKE.GetColumnOffset__SWIG_0(column_index);
    return ret;
  }

  public static float GetColumnOffset() {
    float ret = ImGuiPINVOKE.GetColumnOffset__SWIG_1();
    return ret;
  }

  public static void SetColumnOffset(int column_index, float offset_x) {
    ImGuiPINVOKE.SetColumnOffset(column_index, offset_x);
  }

  public static int GetColumnsCount() {
    int ret = ImGuiPINVOKE.GetColumnsCount();
    return ret;
  }

  public static bool BeginTabBar(string str_id, int flags) {
    bool ret = ImGuiPINVOKE.BeginTabBar__SWIG_0(str_id, flags);
    return ret;
  }

  public static bool BeginTabBar(string str_id) {
    bool ret = ImGuiPINVOKE.BeginTabBar__SWIG_1(str_id);
    return ret;
  }

  public static void EndTabBar() {
    ImGuiPINVOKE.EndTabBar();
  }

  public static bool BeginTabItem(string label, ref bool p_open, int flags) {
    bool ret = ImGuiPINVOKE.BeginTabItem__SWIG_0(label, ref p_open, flags);
    return ret;
  }

  public static bool BeginTabItem(string label, ref bool p_open) {
    bool ret = ImGuiPINVOKE.BeginTabItem__SWIG_1(label, ref p_open);
    return ret;
  }

  public static bool BeginTabItem(string label) {
    bool ret = ImGuiPINVOKE.BeginTabItem__SWIG_2(label);
    return ret;
  }

  public static void EndTabItem() {
    ImGuiPINVOKE.EndTabItem();
  }

  public static bool TabItemButton(string label, int flags) {
    bool ret = ImGuiPINVOKE.TabItemButton__SWIG_0(label, flags);
    return ret;
  }

  public static bool TabItemButton(string label) {
    bool ret = ImGuiPINVOKE.TabItemButton__SWIG_1(label);
    return ret;
  }

  public static void SetTabItemClosed(string tab_or_docked_window_label) {
    ImGuiPINVOKE.SetTabItemClosed(tab_or_docked_window_label);
  }

  public static void LogToTTY(int auto_open_depth) {
    ImGuiPINVOKE.LogToTTY__SWIG_0(auto_open_depth);
  }

  public static void LogToTTY() {
    ImGuiPINVOKE.LogToTTY__SWIG_1();
  }

  public static void LogToFile(int auto_open_depth, string filename) {
    ImGuiPINVOKE.LogToFile__SWIG_0(auto_open_depth, filename);
  }

  public static void LogToFile(int auto_open_depth) {
    ImGuiPINVOKE.LogToFile__SWIG_1(auto_open_depth);
  }

  public static void LogToFile() {
    ImGuiPINVOKE.LogToFile__SWIG_2();
  }

  public static void LogToClipboard(int auto_open_depth) {
    ImGuiPINVOKE.LogToClipboard__SWIG_0(auto_open_depth);
  }

  public static void LogToClipboard() {
    ImGuiPINVOKE.LogToClipboard__SWIG_1();
  }

  public static void LogFinish() {
    ImGuiPINVOKE.LogFinish();
  }

  public static void LogButtons() {
    ImGuiPINVOKE.LogButtons();
  }

  public static void LogText(string fmt) {
    ImGuiPINVOKE.LogText(fmt);
  }

  public static bool BeginDragDropSource(int flags) {
    bool ret = ImGuiPINVOKE.BeginDragDropSource__SWIG_0(flags);
    return ret;
  }

  public static bool BeginDragDropSource() {
    bool ret = ImGuiPINVOKE.BeginDragDropSource__SWIG_1();
    return ret;
  }

  public static bool SetDragDropPayload(string type, SWIGTYPE_p_void data, uint sz, int cond) {
    bool ret = ImGuiPINVOKE.SetDragDropPayload__SWIG_0(type, SWIGTYPE_p_void.getCPtr(data), sz, cond);
    return ret;
  }

  public static bool SetDragDropPayload(string type, SWIGTYPE_p_void data, uint sz) {
    bool ret = ImGuiPINVOKE.SetDragDropPayload__SWIG_1(type, SWIGTYPE_p_void.getCPtr(data), sz);
    return ret;
  }

  public static void EndDragDropSource() {
    ImGuiPINVOKE.EndDragDropSource();
  }

  public static bool BeginDragDropTarget() {
    bool ret = ImGuiPINVOKE.BeginDragDropTarget();
    return ret;
  }

  public static ImGuiPayload AcceptDragDropPayload(string type, int flags) {
    global::System.IntPtr cPtr = ImGuiPINVOKE.AcceptDragDropPayload__SWIG_0(type, flags);
    ImGuiPayload ret = (cPtr == global::System.IntPtr.Zero) ? null : new ImGuiPayload(cPtr, false);
    return ret;
  }

  public static ImGuiPayload AcceptDragDropPayload(string type) {
    global::System.IntPtr cPtr = ImGuiPINVOKE.AcceptDragDropPayload__SWIG_1(type);
    ImGuiPayload ret = (cPtr == global::System.IntPtr.Zero) ? null : new ImGuiPayload(cPtr, false);
    return ret;
  }

  public static void EndDragDropTarget() {
    ImGuiPINVOKE.EndDragDropTarget();
  }

  public static ImGuiPayload GetDragDropPayload() {
    global::System.IntPtr cPtr = ImGuiPINVOKE.GetDragDropPayload();
    ImGuiPayload ret = (cPtr == global::System.IntPtr.Zero) ? null : new ImGuiPayload(cPtr, false);
    return ret;
  }

  public static void BeginDisabled(bool disabled) {
    ImGuiPINVOKE.BeginDisabled__SWIG_0(disabled);
  }

  public static void BeginDisabled() {
    ImGuiPINVOKE.BeginDisabled__SWIG_1();
  }

  public static void EndDisabled() {
    ImGuiPINVOKE.EndDisabled();
  }

  public static void PushClipRect(ImVec2 clip_rect_min, ImVec2 clip_rect_max, bool intersect_with_current_clip_rect) {
    ImGuiPINVOKE.PushClipRect(ImVec2.getCPtr(clip_rect_min), ImVec2.getCPtr(clip_rect_max), intersect_with_current_clip_rect);
    if (ImGuiPINVOKE.SWIGPendingException.Pending) throw ImGuiPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void PopClipRect() {
    ImGuiPINVOKE.PopClipRect();
  }

  public static void SetItemDefaultFocus() {
    ImGuiPINVOKE.SetItemDefaultFocus();
  }

  public static void SetKeyboardFocusHere(int offset) {
    ImGuiPINVOKE.SetKeyboardFocusHere__SWIG_0(offset);
  }

  public static void SetKeyboardFocusHere() {
    ImGuiPINVOKE.SetKeyboardFocusHere__SWIG_1();
  }

  public static void SetNextItemAllowOverlap() {
    ImGuiPINVOKE.SetNextItemAllowOverlap();
  }

  public static bool IsItemHovered(int flags) {
    bool ret = ImGuiPINVOKE.IsItemHovered__SWIG_0(flags);
    return ret;
  }

  public static bool IsItemHovered() {
    bool ret = ImGuiPINVOKE.IsItemHovered__SWIG_1();
    return ret;
  }

  public static bool IsItemActive() {
    bool ret = ImGuiPINVOKE.IsItemActive();
    return ret;
  }

  public static bool IsItemFocused() {
    bool ret = ImGuiPINVOKE.IsItemFocused();
    return ret;
  }

  public static bool IsItemClicked(int mouse_button) {
    bool ret = ImGuiPINVOKE.IsItemClicked__SWIG_0(mouse_button);
    return ret;
  }

  public static bool IsItemClicked() {
    bool ret = ImGuiPINVOKE.IsItemClicked__SWIG_1();
    return ret;
  }

  public static bool IsItemVisible() {
    bool ret = ImGuiPINVOKE.IsItemVisible();
    return ret;
  }

  public static bool IsItemEdited() {
    bool ret = ImGuiPINVOKE.IsItemEdited();
    return ret;
  }

  public static bool IsItemActivated() {
    bool ret = ImGuiPINVOKE.IsItemActivated();
    return ret;
  }

  public static bool IsItemDeactivated() {
    bool ret = ImGuiPINVOKE.IsItemDeactivated();
    return ret;
  }

  public static bool IsItemDeactivatedAfterEdit() {
    bool ret = ImGuiPINVOKE.IsItemDeactivatedAfterEdit();
    return ret;
  }

  public static bool IsItemToggledOpen() {
    bool ret = ImGuiPINVOKE.IsItemToggledOpen();
    return ret;
  }

  public static bool IsAnyItemHovered() {
    bool ret = ImGuiPINVOKE.IsAnyItemHovered();
    return ret;
  }

  public static bool IsAnyItemActive() {
    bool ret = ImGuiPINVOKE.IsAnyItemActive();
    return ret;
  }

  public static bool IsAnyItemFocused() {
    bool ret = ImGuiPINVOKE.IsAnyItemFocused();
    return ret;
  }

  public static uint GetItemID() {
    uint ret = ImGuiPINVOKE.GetItemID();
    return ret;
  }

  public static ImVec2 GetItemRectMin() {
    ImVec2 ret = new ImVec2(ImGuiPINVOKE.GetItemRectMin(), true);
    return ret;
  }

  public static ImVec2 GetItemRectMax() {
    ImVec2 ret = new ImVec2(ImGuiPINVOKE.GetItemRectMax(), true);
    return ret;
  }

  public static ImVec2 GetItemRectSize() {
    ImVec2 ret = new ImVec2(ImGuiPINVOKE.GetItemRectSize(), true);
    return ret;
  }

  public static ImGuiViewport GetMainViewport() {
    global::System.IntPtr cPtr = ImGuiPINVOKE.GetMainViewport();
    ImGuiViewport ret = (cPtr == global::System.IntPtr.Zero) ? null : new ImGuiViewport(cPtr, false);
    return ret;
  }

  public static ImDrawList GetBackgroundDrawList() {
    global::System.IntPtr cPtr = ImGuiPINVOKE.GetBackgroundDrawList();
    ImDrawList ret = (cPtr == global::System.IntPtr.Zero) ? null : new ImDrawList(cPtr, false);
    return ret;
  }

  public static ImDrawList GetForegroundDrawList() {
    global::System.IntPtr cPtr = ImGuiPINVOKE.GetForegroundDrawList();
    ImDrawList ret = (cPtr == global::System.IntPtr.Zero) ? null : new ImDrawList(cPtr, false);
    return ret;
  }

  public static bool IsRectVisible(ImVec2 size) {
    bool ret = ImGuiPINVOKE.IsRectVisible__SWIG_0(ImVec2.getCPtr(size));
    if (ImGuiPINVOKE.SWIGPendingException.Pending) throw ImGuiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool IsRectVisible(ImVec2 rect_min, ImVec2 rect_max) {
    bool ret = ImGuiPINVOKE.IsRectVisible__SWIG_1(ImVec2.getCPtr(rect_min), ImVec2.getCPtr(rect_max));
    if (ImGuiPINVOKE.SWIGPendingException.Pending) throw ImGuiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double GetTime() {
    double ret = ImGuiPINVOKE.GetTime();
    return ret;
  }

  public static int GetFrameCount() {
    int ret = ImGuiPINVOKE.GetFrameCount();
    return ret;
  }

  public static SWIGTYPE_p_ImDrawListSharedData GetDrawListSharedData() {
    global::System.IntPtr cPtr = ImGuiPINVOKE.GetDrawListSharedData();
    SWIGTYPE_p_ImDrawListSharedData ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_ImDrawListSharedData(cPtr, false);
    return ret;
  }

  public static string GetStyleColorName(int idx) {
    string ret = ImGuiPINVOKE.GetStyleColorName(idx);
    return ret;
  }

  public static void SetStateStorage(ImGuiStorage storage) {
    ImGuiPINVOKE.SetStateStorage(ImGuiStorage.getCPtr(storage));
  }

  public static ImGuiStorage GetStateStorage() {
    global::System.IntPtr cPtr = ImGuiPINVOKE.GetStateStorage();
    ImGuiStorage ret = (cPtr == global::System.IntPtr.Zero) ? null : new ImGuiStorage(cPtr, false);
    return ret;
  }

  public static ImVec2 CalcTextSize(string text, string text_end, bool hide_text_after_double_hash, float wrap_width) {
    ImVec2 ret = new ImVec2(ImGuiPINVOKE.CalcTextSize__SWIG_0(text, text_end, hide_text_after_double_hash, wrap_width), true);
    return ret;
  }

  public static ImVec2 CalcTextSize(string text, string text_end, bool hide_text_after_double_hash) {
    ImVec2 ret = new ImVec2(ImGuiPINVOKE.CalcTextSize__SWIG_1(text, text_end, hide_text_after_double_hash), true);
    return ret;
  }

  public static ImVec2 CalcTextSize(string text, string text_end) {
    ImVec2 ret = new ImVec2(ImGuiPINVOKE.CalcTextSize__SWIG_2(text, text_end), true);
    return ret;
  }

  public static ImVec2 CalcTextSize(string text) {
    ImVec2 ret = new ImVec2(ImGuiPINVOKE.CalcTextSize__SWIG_3(text), true);
    return ret;
  }

  public static ImVec4 ColorConvertU32ToFloat4(uint in_) {
    ImVec4 ret = new ImVec4(ImGuiPINVOKE.ColorConvertU32ToFloat4(in_), true);
    return ret;
  }

  public static uint ColorConvertFloat4ToU32(ImVec4 in_) {
    uint ret = ImGuiPINVOKE.ColorConvertFloat4ToU32(ImVec4.getCPtr(in_));
    if (ImGuiPINVOKE.SWIGPendingException.Pending) throw ImGuiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void ColorConvertRGBtoHSV(float r, float g, float b, SWIGTYPE_p_float out_h, SWIGTYPE_p_float out_s, SWIGTYPE_p_float out_v) {
    ImGuiPINVOKE.ColorConvertRGBtoHSV(r, g, b, SWIGTYPE_p_float.getCPtr(out_h), SWIGTYPE_p_float.getCPtr(out_s), SWIGTYPE_p_float.getCPtr(out_v));
    if (ImGuiPINVOKE.SWIGPendingException.Pending) throw ImGuiPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ColorConvertHSVtoRGB(float h, float s, float v, SWIGTYPE_p_float out_r, SWIGTYPE_p_float out_g, SWIGTYPE_p_float out_b) {
    ImGuiPINVOKE.ColorConvertHSVtoRGB(h, s, v, SWIGTYPE_p_float.getCPtr(out_r), SWIGTYPE_p_float.getCPtr(out_g), SWIGTYPE_p_float.getCPtr(out_b));
    if (ImGuiPINVOKE.SWIGPendingException.Pending) throw ImGuiPINVOKE.SWIGPendingException.Retrieve();
  }

  public static bool IsKeyDown(ImGuiKey key) {
    bool ret = ImGuiPINVOKE.IsKeyDown((int)key);
    return ret;
  }

  public static bool IsKeyPressed(ImGuiKey key, bool repeat) {
    bool ret = ImGuiPINVOKE.IsKeyPressed__SWIG_0((int)key, repeat);
    return ret;
  }

  public static bool IsKeyPressed(ImGuiKey key) {
    bool ret = ImGuiPINVOKE.IsKeyPressed__SWIG_1((int)key);
    return ret;
  }

  public static bool IsKeyReleased(ImGuiKey key) {
    bool ret = ImGuiPINVOKE.IsKeyReleased((int)key);
    return ret;
  }

  public static bool IsKeyChordPressed(int key_chord) {
    bool ret = ImGuiPINVOKE.IsKeyChordPressed(key_chord);
    return ret;
  }

  public static int GetKeyPressedAmount(ImGuiKey key, float repeat_delay, float rate) {
    int ret = ImGuiPINVOKE.GetKeyPressedAmount((int)key, repeat_delay, rate);
    return ret;
  }

  public static string GetKeyName(ImGuiKey key) {
    string ret = ImGuiPINVOKE.GetKeyName((int)key);
    return ret;
  }

  public static void SetNextFrameWantCaptureKeyboard(bool want_capture_keyboard) {
    ImGuiPINVOKE.SetNextFrameWantCaptureKeyboard(want_capture_keyboard);
  }

  public static bool Shortcut(int key_chord, int flags) {
    bool ret = ImGuiPINVOKE.Shortcut__SWIG_0(key_chord, flags);
    return ret;
  }

  public static bool Shortcut(int key_chord) {
    bool ret = ImGuiPINVOKE.Shortcut__SWIG_1(key_chord);
    return ret;
  }

  public static void SetNextItemShortcut(int key_chord, int flags) {
    ImGuiPINVOKE.SetNextItemShortcut__SWIG_0(key_chord, flags);
  }

  public static void SetNextItemShortcut(int key_chord) {
    ImGuiPINVOKE.SetNextItemShortcut__SWIG_1(key_chord);
  }

  public static void SetItemKeyOwner(ImGuiKey key) {
    ImGuiPINVOKE.SetItemKeyOwner((int)key);
  }

  public static bool IsMouseDown(int button) {
    bool ret = ImGuiPINVOKE.IsMouseDown(button);
    return ret;
  }

  public static bool IsMouseClicked(int button, bool repeat) {
    bool ret = ImGuiPINVOKE.IsMouseClicked__SWIG_0(button, repeat);
    return ret;
  }

  public static bool IsMouseClicked(int button) {
    bool ret = ImGuiPINVOKE.IsMouseClicked__SWIG_1(button);
    return ret;
  }

  public static bool IsMouseReleased(int button) {
    bool ret = ImGuiPINVOKE.IsMouseReleased(button);
    return ret;
  }

  public static bool IsMouseDoubleClicked(int button) {
    bool ret = ImGuiPINVOKE.IsMouseDoubleClicked(button);
    return ret;
  }

  public static int GetMouseClickedCount(int button) {
    int ret = ImGuiPINVOKE.GetMouseClickedCount(button);
    return ret;
  }

  public static bool IsMouseHoveringRect(ImVec2 r_min, ImVec2 r_max, bool clip) {
    bool ret = ImGuiPINVOKE.IsMouseHoveringRect__SWIG_0(ImVec2.getCPtr(r_min), ImVec2.getCPtr(r_max), clip);
    if (ImGuiPINVOKE.SWIGPendingException.Pending) throw ImGuiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool IsMouseHoveringRect(ImVec2 r_min, ImVec2 r_max) {
    bool ret = ImGuiPINVOKE.IsMouseHoveringRect__SWIG_1(ImVec2.getCPtr(r_min), ImVec2.getCPtr(r_max));
    if (ImGuiPINVOKE.SWIGPendingException.Pending) throw ImGuiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool IsMousePosValid(ImVec2 mouse_pos) {
    bool ret = ImGuiPINVOKE.IsMousePosValid__SWIG_0(ImVec2.getCPtr(mouse_pos));
    return ret;
  }

  public static bool IsMousePosValid() {
    bool ret = ImGuiPINVOKE.IsMousePosValid__SWIG_1();
    return ret;
  }

  public static bool IsAnyMouseDown() {
    bool ret = ImGuiPINVOKE.IsAnyMouseDown();
    return ret;
  }

  public static ImVec2 GetMousePos() {
    ImVec2 ret = new ImVec2(ImGuiPINVOKE.GetMousePos(), true);
    return ret;
  }

  public static ImVec2 GetMousePosOnOpeningCurrentPopup() {
    ImVec2 ret = new ImVec2(ImGuiPINVOKE.GetMousePosOnOpeningCurrentPopup(), true);
    return ret;
  }

  public static bool IsMouseDragging(int button, float lock_threshold) {
    bool ret = ImGuiPINVOKE.IsMouseDragging__SWIG_0(button, lock_threshold);
    return ret;
  }

  public static bool IsMouseDragging(int button) {
    bool ret = ImGuiPINVOKE.IsMouseDragging__SWIG_1(button);
    return ret;
  }

  public static ImVec2 GetMouseDragDelta(int button, float lock_threshold) {
    ImVec2 ret = new ImVec2(ImGuiPINVOKE.GetMouseDragDelta__SWIG_0(button, lock_threshold), true);
    return ret;
  }

  public static ImVec2 GetMouseDragDelta(int button) {
    ImVec2 ret = new ImVec2(ImGuiPINVOKE.GetMouseDragDelta__SWIG_1(button), true);
    return ret;
  }

  public static ImVec2 GetMouseDragDelta() {
    ImVec2 ret = new ImVec2(ImGuiPINVOKE.GetMouseDragDelta__SWIG_2(), true);
    return ret;
  }

  public static void ResetMouseDragDelta(int button) {
    ImGuiPINVOKE.ResetMouseDragDelta__SWIG_0(button);
  }

  public static void ResetMouseDragDelta() {
    ImGuiPINVOKE.ResetMouseDragDelta__SWIG_1();
  }

  public static int GetMouseCursor() {
    int ret = ImGuiPINVOKE.GetMouseCursor();
    return ret;
  }

  public static void SetMouseCursor(int cursor_type) {
    ImGuiPINVOKE.SetMouseCursor(cursor_type);
  }

  public static void SetNextFrameWantCaptureMouse(bool want_capture_mouse) {
    ImGuiPINVOKE.SetNextFrameWantCaptureMouse(want_capture_mouse);
  }

  public static string GetClipboardText() {
    string ret = ImGuiPINVOKE.GetClipboardText();
    return ret;
  }

  public static void SetClipboardText(string text) {
    ImGuiPINVOKE.SetClipboardText(text);
  }

  public static void LoadIniSettingsFromDisk(string ini_filename) {
    ImGuiPINVOKE.LoadIniSettingsFromDisk(ini_filename);
  }

  public static void LoadIniSettingsFromMemory(string ini_data, uint ini_size) {
    ImGuiPINVOKE.LoadIniSettingsFromMemory__SWIG_0(ini_data, ini_size);
  }

  public static void LoadIniSettingsFromMemory(string ini_data) {
    ImGuiPINVOKE.LoadIniSettingsFromMemory__SWIG_1(ini_data);
  }

  public static void SaveIniSettingsToDisk(string ini_filename) {
    ImGuiPINVOKE.SaveIniSettingsToDisk(ini_filename);
  }

  public static string SaveIniSettingsToMemory(SWIGTYPE_p_size_t out_ini_size) {
    string ret = ImGuiPINVOKE.SaveIniSettingsToMemory__SWIG_0(SWIGTYPE_p_size_t.getCPtr(out_ini_size));
    return ret;
  }

  public static string SaveIniSettingsToMemory() {
    string ret = ImGuiPINVOKE.SaveIniSettingsToMemory__SWIG_1();
    return ret;
  }

  public static void DebugTextEncoding(string text) {
    ImGuiPINVOKE.DebugTextEncoding(text);
  }

  public static void DebugFlashStyleColor(int idx) {
    ImGuiPINVOKE.DebugFlashStyleColor(idx);
  }

  public static void DebugStartItemPicker() {
    ImGuiPINVOKE.DebugStartItemPicker();
  }

  public static bool DebugCheckVersionAndDataLayout(string version_str, uint sz_io, uint sz_style, uint sz_vec2, uint sz_vec4, uint sz_drawvert, uint sz_drawidx) {
    bool ret = ImGuiPINVOKE.DebugCheckVersionAndDataLayout(version_str, sz_io, sz_style, sz_vec2, sz_vec4, sz_drawvert, sz_drawidx);
    return ret;
  }

  public static void DebugLog(string fmt) {
    ImGuiPINVOKE.DebugLog(fmt);
  }

  public static void SetAllocatorFunctions(SWIGTYPE_p_f_size_t_p_void__p_void alloc_func, SWIGTYPE_p_f_p_void_p_void__void free_func, SWIGTYPE_p_void user_data) {
    ImGuiPINVOKE.SetAllocatorFunctions__SWIG_0(SWIGTYPE_p_f_size_t_p_void__p_void.getCPtr(alloc_func), SWIGTYPE_p_f_p_void_p_void__void.getCPtr(free_func), SWIGTYPE_p_void.getCPtr(user_data));
  }

  public static void SetAllocatorFunctions(SWIGTYPE_p_f_size_t_p_void__p_void alloc_func, SWIGTYPE_p_f_p_void_p_void__void free_func) {
    ImGuiPINVOKE.SetAllocatorFunctions__SWIG_1(SWIGTYPE_p_f_size_t_p_void__p_void.getCPtr(alloc_func), SWIGTYPE_p_f_p_void_p_void__void.getCPtr(free_func));
  }

  public static void GetAllocatorFunctions(SWIGTYPE_p_p_f_size_t_p_void__p_void p_alloc_func, SWIGTYPE_p_p_f_p_void_p_void__void p_free_func, SWIGTYPE_p_p_void p_user_data) {
    ImGuiPINVOKE.GetAllocatorFunctions(SWIGTYPE_p_p_f_size_t_p_void__p_void.getCPtr(p_alloc_func), SWIGTYPE_p_p_f_p_void_p_void__void.getCPtr(p_free_func), SWIGTYPE_p_p_void.getCPtr(p_user_data));
  }

  public static SWIGTYPE_p_void MemAlloc(uint size) {
    global::System.IntPtr cPtr = ImGuiPINVOKE.MemAlloc(size);
    SWIGTYPE_p_void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
    return ret;
  }

  public static void MemFree(SWIGTYPE_p_void ptr) {
    ImGuiPINVOKE.MemFree(SWIGTYPE_p_void.getCPtr(ptr));
  }

  public static readonly string IMGUI_VERSION = ImGuiPINVOKE.IMGUI_VERSION_get();
  public static readonly int IMGUI_VERSION_NUM = ImGuiPINVOKE.IMGUI_VERSION_NUM_get();
  public static readonly string IMGUI_PAYLOAD_TYPE_COLOR_3F = ImGuiPINVOKE.IMGUI_PAYLOAD_TYPE_COLOR_3F_get();
  public static readonly string IMGUI_PAYLOAD_TYPE_COLOR_4F = ImGuiPINVOKE.IMGUI_PAYLOAD_TYPE_COLOR_4F_get();
  public static readonly int IM_UNICODE_CODEPOINT_INVALID = ImGuiPINVOKE.IM_UNICODE_CODEPOINT_INVALID_get();
  public static readonly int IM_UNICODE_CODEPOINT_MAX = ImGuiPINVOKE.IM_UNICODE_CODEPOINT_MAX_get();
  public static readonly int IM_COL32_R_SHIFT = ImGuiPINVOKE.IM_COL32_R_SHIFT_get();
  public static readonly int IM_COL32_G_SHIFT = ImGuiPINVOKE.IM_COL32_G_SHIFT_get();
  public static readonly int IM_COL32_B_SHIFT = ImGuiPINVOKE.IM_COL32_B_SHIFT_get();
  public static readonly int IM_COL32_A_SHIFT = ImGuiPINVOKE.IM_COL32_A_SHIFT_get();
  public static readonly int IM_COL32_A_MASK = ImGuiPINVOKE.IM_COL32_A_MASK_get();
  public static readonly int IM_DRAWLIST_TEX_LINES_WIDTH_MAX = ImGuiPINVOKE.IM_DRAWLIST_TEX_LINES_WIDTH_MAX_get();
}

}
