//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.2.1
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace org.ogre {

public class ImGuiIO : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal ImGuiIO(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ImGuiIO obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(ImGuiIO obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~ImGuiIO() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          ImGuiPINVOKE.delete_ImGuiIO(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public int ConfigFlags {
    set {
      ImGuiPINVOKE.ImGuiIO_ConfigFlags_set(swigCPtr, value);
    } 
    get {
      int ret = ImGuiPINVOKE.ImGuiIO_ConfigFlags_get(swigCPtr);
      return ret;
    } 
  }

  public int BackendFlags {
    set {
      ImGuiPINVOKE.ImGuiIO_BackendFlags_set(swigCPtr, value);
    } 
    get {
      int ret = ImGuiPINVOKE.ImGuiIO_BackendFlags_get(swigCPtr);
      return ret;
    } 
  }

  public ImVec2 DisplaySize {
    set {
      ImGuiPINVOKE.ImGuiIO_DisplaySize_set(swigCPtr, ImVec2.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = ImGuiPINVOKE.ImGuiIO_DisplaySize_get(swigCPtr);
      ImVec2 ret = (cPtr == global::System.IntPtr.Zero) ? null : new ImVec2(cPtr, false);
      return ret;
    } 
  }

  public float DeltaTime {
    set {
      ImGuiPINVOKE.ImGuiIO_DeltaTime_set(swigCPtr, value);
    } 
    get {
      float ret = ImGuiPINVOKE.ImGuiIO_DeltaTime_get(swigCPtr);
      return ret;
    } 
  }

  public float IniSavingRate {
    set {
      ImGuiPINVOKE.ImGuiIO_IniSavingRate_set(swigCPtr, value);
    } 
    get {
      float ret = ImGuiPINVOKE.ImGuiIO_IniSavingRate_get(swigCPtr);
      return ret;
    } 
  }

  public string IniFilename {
    set {
      ImGuiPINVOKE.ImGuiIO_IniFilename_set(swigCPtr, value);
    } 
    get {
      string ret = ImGuiPINVOKE.ImGuiIO_IniFilename_get(swigCPtr);
      return ret;
    } 
  }

  public string LogFilename {
    set {
      ImGuiPINVOKE.ImGuiIO_LogFilename_set(swigCPtr, value);
    } 
    get {
      string ret = ImGuiPINVOKE.ImGuiIO_LogFilename_get(swigCPtr);
      return ret;
    } 
  }

  public SWIGTYPE_p_void UserData {
    set {
      ImGuiPINVOKE.ImGuiIO_UserData_set(swigCPtr, SWIGTYPE_p_void.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = ImGuiPINVOKE.ImGuiIO_UserData_get(swigCPtr);
      SWIGTYPE_p_void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
      return ret;
    } 
  }

  public ImFontAtlas Fonts {
    set {
      ImGuiPINVOKE.ImGuiIO_Fonts_set(swigCPtr, ImFontAtlas.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = ImGuiPINVOKE.ImGuiIO_Fonts_get(swigCPtr);
      ImFontAtlas ret = (cPtr == global::System.IntPtr.Zero) ? null : new ImFontAtlas(cPtr, false);
      return ret;
    } 
  }

  public float FontGlobalScale {
    set {
      ImGuiPINVOKE.ImGuiIO_FontGlobalScale_set(swigCPtr, value);
    } 
    get {
      float ret = ImGuiPINVOKE.ImGuiIO_FontGlobalScale_get(swigCPtr);
      return ret;
    } 
  }

  public bool FontAllowUserScaling {
    set {
      ImGuiPINVOKE.ImGuiIO_FontAllowUserScaling_set(swigCPtr, value);
    } 
    get {
      bool ret = ImGuiPINVOKE.ImGuiIO_FontAllowUserScaling_get(swigCPtr);
      return ret;
    } 
  }

  public ImFont FontDefault {
    set {
      ImGuiPINVOKE.ImGuiIO_FontDefault_set(swigCPtr, ImFont.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = ImGuiPINVOKE.ImGuiIO_FontDefault_get(swigCPtr);
      ImFont ret = (cPtr == global::System.IntPtr.Zero) ? null : new ImFont(cPtr, false);
      return ret;
    } 
  }

  public ImVec2 DisplayFramebufferScale {
    set {
      ImGuiPINVOKE.ImGuiIO_DisplayFramebufferScale_set(swigCPtr, ImVec2.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = ImGuiPINVOKE.ImGuiIO_DisplayFramebufferScale_get(swigCPtr);
      ImVec2 ret = (cPtr == global::System.IntPtr.Zero) ? null : new ImVec2(cPtr, false);
      return ret;
    } 
  }

  public bool MouseDrawCursor {
    set {
      ImGuiPINVOKE.ImGuiIO_MouseDrawCursor_set(swigCPtr, value);
    } 
    get {
      bool ret = ImGuiPINVOKE.ImGuiIO_MouseDrawCursor_get(swigCPtr);
      return ret;
    } 
  }

  public bool ConfigMacOSXBehaviors {
    set {
      ImGuiPINVOKE.ImGuiIO_ConfigMacOSXBehaviors_set(swigCPtr, value);
    } 
    get {
      bool ret = ImGuiPINVOKE.ImGuiIO_ConfigMacOSXBehaviors_get(swigCPtr);
      return ret;
    } 
  }

  public bool ConfigNavSwapGamepadButtons {
    set {
      ImGuiPINVOKE.ImGuiIO_ConfigNavSwapGamepadButtons_set(swigCPtr, value);
    } 
    get {
      bool ret = ImGuiPINVOKE.ImGuiIO_ConfigNavSwapGamepadButtons_get(swigCPtr);
      return ret;
    } 
  }

  public bool ConfigInputTrickleEventQueue {
    set {
      ImGuiPINVOKE.ImGuiIO_ConfigInputTrickleEventQueue_set(swigCPtr, value);
    } 
    get {
      bool ret = ImGuiPINVOKE.ImGuiIO_ConfigInputTrickleEventQueue_get(swigCPtr);
      return ret;
    } 
  }

  public bool ConfigInputTextCursorBlink {
    set {
      ImGuiPINVOKE.ImGuiIO_ConfigInputTextCursorBlink_set(swigCPtr, value);
    } 
    get {
      bool ret = ImGuiPINVOKE.ImGuiIO_ConfigInputTextCursorBlink_get(swigCPtr);
      return ret;
    } 
  }

  public bool ConfigInputTextEnterKeepActive {
    set {
      ImGuiPINVOKE.ImGuiIO_ConfigInputTextEnterKeepActive_set(swigCPtr, value);
    } 
    get {
      bool ret = ImGuiPINVOKE.ImGuiIO_ConfigInputTextEnterKeepActive_get(swigCPtr);
      return ret;
    } 
  }

  public bool ConfigDragClickToInputText {
    set {
      ImGuiPINVOKE.ImGuiIO_ConfigDragClickToInputText_set(swigCPtr, value);
    } 
    get {
      bool ret = ImGuiPINVOKE.ImGuiIO_ConfigDragClickToInputText_get(swigCPtr);
      return ret;
    } 
  }

  public bool ConfigWindowsResizeFromEdges {
    set {
      ImGuiPINVOKE.ImGuiIO_ConfigWindowsResizeFromEdges_set(swigCPtr, value);
    } 
    get {
      bool ret = ImGuiPINVOKE.ImGuiIO_ConfigWindowsResizeFromEdges_get(swigCPtr);
      return ret;
    } 
  }

  public bool ConfigWindowsMoveFromTitleBarOnly {
    set {
      ImGuiPINVOKE.ImGuiIO_ConfigWindowsMoveFromTitleBarOnly_set(swigCPtr, value);
    } 
    get {
      bool ret = ImGuiPINVOKE.ImGuiIO_ConfigWindowsMoveFromTitleBarOnly_get(swigCPtr);
      return ret;
    } 
  }

  public float ConfigMemoryCompactTimer {
    set {
      ImGuiPINVOKE.ImGuiIO_ConfigMemoryCompactTimer_set(swigCPtr, value);
    } 
    get {
      float ret = ImGuiPINVOKE.ImGuiIO_ConfigMemoryCompactTimer_get(swigCPtr);
      return ret;
    } 
  }

  public float MouseDoubleClickTime {
    set {
      ImGuiPINVOKE.ImGuiIO_MouseDoubleClickTime_set(swigCPtr, value);
    } 
    get {
      float ret = ImGuiPINVOKE.ImGuiIO_MouseDoubleClickTime_get(swigCPtr);
      return ret;
    } 
  }

  public float MouseDoubleClickMaxDist {
    set {
      ImGuiPINVOKE.ImGuiIO_MouseDoubleClickMaxDist_set(swigCPtr, value);
    } 
    get {
      float ret = ImGuiPINVOKE.ImGuiIO_MouseDoubleClickMaxDist_get(swigCPtr);
      return ret;
    } 
  }

  public float MouseDragThreshold {
    set {
      ImGuiPINVOKE.ImGuiIO_MouseDragThreshold_set(swigCPtr, value);
    } 
    get {
      float ret = ImGuiPINVOKE.ImGuiIO_MouseDragThreshold_get(swigCPtr);
      return ret;
    } 
  }

  public float KeyRepeatDelay {
    set {
      ImGuiPINVOKE.ImGuiIO_KeyRepeatDelay_set(swigCPtr, value);
    } 
    get {
      float ret = ImGuiPINVOKE.ImGuiIO_KeyRepeatDelay_get(swigCPtr);
      return ret;
    } 
  }

  public float KeyRepeatRate {
    set {
      ImGuiPINVOKE.ImGuiIO_KeyRepeatRate_set(swigCPtr, value);
    } 
    get {
      float ret = ImGuiPINVOKE.ImGuiIO_KeyRepeatRate_get(swigCPtr);
      return ret;
    } 
  }

  public bool ConfigDebugIsDebuggerPresent {
    set {
      ImGuiPINVOKE.ImGuiIO_ConfigDebugIsDebuggerPresent_set(swigCPtr, value);
    } 
    get {
      bool ret = ImGuiPINVOKE.ImGuiIO_ConfigDebugIsDebuggerPresent_get(swigCPtr);
      return ret;
    } 
  }

  public bool ConfigDebugHighlightIdConflicts {
    set {
      ImGuiPINVOKE.ImGuiIO_ConfigDebugHighlightIdConflicts_set(swigCPtr, value);
    } 
    get {
      bool ret = ImGuiPINVOKE.ImGuiIO_ConfigDebugHighlightIdConflicts_get(swigCPtr);
      return ret;
    } 
  }

  public bool ConfigDebugBeginReturnValueOnce {
    set {
      ImGuiPINVOKE.ImGuiIO_ConfigDebugBeginReturnValueOnce_set(swigCPtr, value);
    } 
    get {
      bool ret = ImGuiPINVOKE.ImGuiIO_ConfigDebugBeginReturnValueOnce_get(swigCPtr);
      return ret;
    } 
  }

  public bool ConfigDebugBeginReturnValueLoop {
    set {
      ImGuiPINVOKE.ImGuiIO_ConfigDebugBeginReturnValueLoop_set(swigCPtr, value);
    } 
    get {
      bool ret = ImGuiPINVOKE.ImGuiIO_ConfigDebugBeginReturnValueLoop_get(swigCPtr);
      return ret;
    } 
  }

  public bool ConfigDebugIgnoreFocusLoss {
    set {
      ImGuiPINVOKE.ImGuiIO_ConfigDebugIgnoreFocusLoss_set(swigCPtr, value);
    } 
    get {
      bool ret = ImGuiPINVOKE.ImGuiIO_ConfigDebugIgnoreFocusLoss_get(swigCPtr);
      return ret;
    } 
  }

  public bool ConfigDebugIniSettings {
    set {
      ImGuiPINVOKE.ImGuiIO_ConfigDebugIniSettings_set(swigCPtr, value);
    } 
    get {
      bool ret = ImGuiPINVOKE.ImGuiIO_ConfigDebugIniSettings_get(swigCPtr);
      return ret;
    } 
  }

  public string BackendPlatformName {
    set {
      ImGuiPINVOKE.ImGuiIO_BackendPlatformName_set(swigCPtr, value);
    } 
    get {
      string ret = ImGuiPINVOKE.ImGuiIO_BackendPlatformName_get(swigCPtr);
      return ret;
    } 
  }

  public string BackendRendererName {
    set {
      ImGuiPINVOKE.ImGuiIO_BackendRendererName_set(swigCPtr, value);
    } 
    get {
      string ret = ImGuiPINVOKE.ImGuiIO_BackendRendererName_get(swigCPtr);
      return ret;
    } 
  }

  public SWIGTYPE_p_void BackendPlatformUserData {
    set {
      ImGuiPINVOKE.ImGuiIO_BackendPlatformUserData_set(swigCPtr, SWIGTYPE_p_void.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = ImGuiPINVOKE.ImGuiIO_BackendPlatformUserData_get(swigCPtr);
      SWIGTYPE_p_void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_void BackendRendererUserData {
    set {
      ImGuiPINVOKE.ImGuiIO_BackendRendererUserData_set(swigCPtr, SWIGTYPE_p_void.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = ImGuiPINVOKE.ImGuiIO_BackendRendererUserData_get(swigCPtr);
      SWIGTYPE_p_void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_void BackendLanguageUserData {
    set {
      ImGuiPINVOKE.ImGuiIO_BackendLanguageUserData_set(swigCPtr, SWIGTYPE_p_void.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = ImGuiPINVOKE.ImGuiIO_BackendLanguageUserData_get(swigCPtr);
      SWIGTYPE_p_void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
      return ret;
    } 
  }

  public void AddKeyEvent(ImGuiKey key, bool down) {
    ImGuiPINVOKE.ImGuiIO_AddKeyEvent(swigCPtr, (int)key, down);
  }

  public void AddKeyAnalogEvent(ImGuiKey key, bool down, float v) {
    ImGuiPINVOKE.ImGuiIO_AddKeyAnalogEvent(swigCPtr, (int)key, down, v);
  }

  public void AddMousePosEvent(float x, float y) {
    ImGuiPINVOKE.ImGuiIO_AddMousePosEvent(swigCPtr, x, y);
  }

  public void AddMouseButtonEvent(int button, bool down) {
    ImGuiPINVOKE.ImGuiIO_AddMouseButtonEvent(swigCPtr, button, down);
  }

  public void AddMouseWheelEvent(float wheel_x, float wheel_y) {
    ImGuiPINVOKE.ImGuiIO_AddMouseWheelEvent(swigCPtr, wheel_x, wheel_y);
  }

  public void AddMouseSourceEvent(ImGuiMouseSource source) {
    ImGuiPINVOKE.ImGuiIO_AddMouseSourceEvent(swigCPtr, (int)source);
  }

  public void AddFocusEvent(bool focused) {
    ImGuiPINVOKE.ImGuiIO_AddFocusEvent(swigCPtr, focused);
  }

  public void AddInputCharacter(uint c) {
    ImGuiPINVOKE.ImGuiIO_AddInputCharacter(swigCPtr, c);
  }

  public void AddInputCharacterUTF16(ushort c) {
    ImGuiPINVOKE.ImGuiIO_AddInputCharacterUTF16(swigCPtr, c);
  }

  public void AddInputCharactersUTF8(string str) {
    ImGuiPINVOKE.ImGuiIO_AddInputCharactersUTF8(swigCPtr, str);
  }

  public void SetKeyEventNativeData(ImGuiKey key, int native_keycode, int native_scancode, int native_legacy_index) {
    ImGuiPINVOKE.ImGuiIO_SetKeyEventNativeData__SWIG_0(swigCPtr, (int)key, native_keycode, native_scancode, native_legacy_index);
  }

  public void SetKeyEventNativeData(ImGuiKey key, int native_keycode, int native_scancode) {
    ImGuiPINVOKE.ImGuiIO_SetKeyEventNativeData__SWIG_1(swigCPtr, (int)key, native_keycode, native_scancode);
  }

  public void SetAppAcceptingEvents(bool accepting_events) {
    ImGuiPINVOKE.ImGuiIO_SetAppAcceptingEvents(swigCPtr, accepting_events);
  }

  public void ClearEventsQueue() {
    ImGuiPINVOKE.ImGuiIO_ClearEventsQueue(swigCPtr);
  }

  public void ClearInputKeys() {
    ImGuiPINVOKE.ImGuiIO_ClearInputKeys(swigCPtr);
  }

  public void ClearInputMouse() {
    ImGuiPINVOKE.ImGuiIO_ClearInputMouse(swigCPtr);
  }

  public bool WantCaptureMouse {
    set {
      ImGuiPINVOKE.ImGuiIO_WantCaptureMouse_set(swigCPtr, value);
    } 
    get {
      bool ret = ImGuiPINVOKE.ImGuiIO_WantCaptureMouse_get(swigCPtr);
      return ret;
    } 
  }

  public bool WantCaptureKeyboard {
    set {
      ImGuiPINVOKE.ImGuiIO_WantCaptureKeyboard_set(swigCPtr, value);
    } 
    get {
      bool ret = ImGuiPINVOKE.ImGuiIO_WantCaptureKeyboard_get(swigCPtr);
      return ret;
    } 
  }

  public bool WantTextInput {
    set {
      ImGuiPINVOKE.ImGuiIO_WantTextInput_set(swigCPtr, value);
    } 
    get {
      bool ret = ImGuiPINVOKE.ImGuiIO_WantTextInput_get(swigCPtr);
      return ret;
    } 
  }

  public bool WantSetMousePos {
    set {
      ImGuiPINVOKE.ImGuiIO_WantSetMousePos_set(swigCPtr, value);
    } 
    get {
      bool ret = ImGuiPINVOKE.ImGuiIO_WantSetMousePos_get(swigCPtr);
      return ret;
    } 
  }

  public bool WantSaveIniSettings {
    set {
      ImGuiPINVOKE.ImGuiIO_WantSaveIniSettings_set(swigCPtr, value);
    } 
    get {
      bool ret = ImGuiPINVOKE.ImGuiIO_WantSaveIniSettings_get(swigCPtr);
      return ret;
    } 
  }

  public bool NavActive {
    set {
      ImGuiPINVOKE.ImGuiIO_NavActive_set(swigCPtr, value);
    } 
    get {
      bool ret = ImGuiPINVOKE.ImGuiIO_NavActive_get(swigCPtr);
      return ret;
    } 
  }

  public bool NavVisible {
    set {
      ImGuiPINVOKE.ImGuiIO_NavVisible_set(swigCPtr, value);
    } 
    get {
      bool ret = ImGuiPINVOKE.ImGuiIO_NavVisible_get(swigCPtr);
      return ret;
    } 
  }

  public float Framerate {
    set {
      ImGuiPINVOKE.ImGuiIO_Framerate_set(swigCPtr, value);
    } 
    get {
      float ret = ImGuiPINVOKE.ImGuiIO_Framerate_get(swigCPtr);
      return ret;
    } 
  }

  public int MetricsRenderVertices {
    set {
      ImGuiPINVOKE.ImGuiIO_MetricsRenderVertices_set(swigCPtr, value);
    } 
    get {
      int ret = ImGuiPINVOKE.ImGuiIO_MetricsRenderVertices_get(swigCPtr);
      return ret;
    } 
  }

  public int MetricsRenderIndices {
    set {
      ImGuiPINVOKE.ImGuiIO_MetricsRenderIndices_set(swigCPtr, value);
    } 
    get {
      int ret = ImGuiPINVOKE.ImGuiIO_MetricsRenderIndices_get(swigCPtr);
      return ret;
    } 
  }

  public int MetricsRenderWindows {
    set {
      ImGuiPINVOKE.ImGuiIO_MetricsRenderWindows_set(swigCPtr, value);
    } 
    get {
      int ret = ImGuiPINVOKE.ImGuiIO_MetricsRenderWindows_get(swigCPtr);
      return ret;
    } 
  }

  public int MetricsActiveWindows {
    set {
      ImGuiPINVOKE.ImGuiIO_MetricsActiveWindows_set(swigCPtr, value);
    } 
    get {
      int ret = ImGuiPINVOKE.ImGuiIO_MetricsActiveWindows_get(swigCPtr);
      return ret;
    } 
  }

  public ImVec2 MouseDelta {
    set {
      ImGuiPINVOKE.ImGuiIO_MouseDelta_set(swigCPtr, ImVec2.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = ImGuiPINVOKE.ImGuiIO_MouseDelta_get(swigCPtr);
      ImVec2 ret = (cPtr == global::System.IntPtr.Zero) ? null : new ImVec2(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_ImGuiContext Ctx {
    set {
      ImGuiPINVOKE.ImGuiIO_Ctx_set(swigCPtr, SWIGTYPE_p_ImGuiContext.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = ImGuiPINVOKE.ImGuiIO_Ctx_get(swigCPtr);
      SWIGTYPE_p_ImGuiContext ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_ImGuiContext(cPtr, false);
      return ret;
    } 
  }

  public ImVec2 MousePos {
    set {
      ImGuiPINVOKE.ImGuiIO_MousePos_set(swigCPtr, ImVec2.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = ImGuiPINVOKE.ImGuiIO_MousePos_get(swigCPtr);
      ImVec2 ret = (cPtr == global::System.IntPtr.Zero) ? null : new ImVec2(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_bool MouseDown {
    set {
      ImGuiPINVOKE.ImGuiIO_MouseDown_set(swigCPtr, SWIGTYPE_p_bool.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = ImGuiPINVOKE.ImGuiIO_MouseDown_get(swigCPtr);
      SWIGTYPE_p_bool ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_bool(cPtr, false);
      return ret;
    } 
  }

  public float MouseWheel {
    set {
      ImGuiPINVOKE.ImGuiIO_MouseWheel_set(swigCPtr, value);
    } 
    get {
      float ret = ImGuiPINVOKE.ImGuiIO_MouseWheel_get(swigCPtr);
      return ret;
    } 
  }

  public float MouseWheelH {
    set {
      ImGuiPINVOKE.ImGuiIO_MouseWheelH_set(swigCPtr, value);
    } 
    get {
      float ret = ImGuiPINVOKE.ImGuiIO_MouseWheelH_get(swigCPtr);
      return ret;
    } 
  }

  public ImGuiMouseSource MouseSource {
    set {
      ImGuiPINVOKE.ImGuiIO_MouseSource_set(swigCPtr, (int)value);
    } 
    get {
      ImGuiMouseSource ret = (ImGuiMouseSource)ImGuiPINVOKE.ImGuiIO_MouseSource_get(swigCPtr);
      return ret;
    } 
  }

  public bool KeyCtrl {
    set {
      ImGuiPINVOKE.ImGuiIO_KeyCtrl_set(swigCPtr, value);
    } 
    get {
      bool ret = ImGuiPINVOKE.ImGuiIO_KeyCtrl_get(swigCPtr);
      return ret;
    } 
  }

  public bool KeyShift {
    set {
      ImGuiPINVOKE.ImGuiIO_KeyShift_set(swigCPtr, value);
    } 
    get {
      bool ret = ImGuiPINVOKE.ImGuiIO_KeyShift_get(swigCPtr);
      return ret;
    } 
  }

  public bool KeyAlt {
    set {
      ImGuiPINVOKE.ImGuiIO_KeyAlt_set(swigCPtr, value);
    } 
    get {
      bool ret = ImGuiPINVOKE.ImGuiIO_KeyAlt_get(swigCPtr);
      return ret;
    } 
  }

  public bool KeySuper {
    set {
      ImGuiPINVOKE.ImGuiIO_KeySuper_set(swigCPtr, value);
    } 
    get {
      bool ret = ImGuiPINVOKE.ImGuiIO_KeySuper_get(swigCPtr);
      return ret;
    } 
  }

  public int KeyMods {
    set {
      ImGuiPINVOKE.ImGuiIO_KeyMods_set(swigCPtr, value);
    } 
    get {
      int ret = ImGuiPINVOKE.ImGuiIO_KeyMods_get(swigCPtr);
      return ret;
    } 
  }

  public ImGuiKeyData KeysData {
    set {
      ImGuiPINVOKE.ImGuiIO_KeysData_set(swigCPtr, ImGuiKeyData.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = ImGuiPINVOKE.ImGuiIO_KeysData_get(swigCPtr);
      ImGuiKeyData ret = (cPtr == global::System.IntPtr.Zero) ? null : new ImGuiKeyData(cPtr, false);
      return ret;
    } 
  }

  public bool WantCaptureMouseUnlessPopupClose {
    set {
      ImGuiPINVOKE.ImGuiIO_WantCaptureMouseUnlessPopupClose_set(swigCPtr, value);
    } 
    get {
      bool ret = ImGuiPINVOKE.ImGuiIO_WantCaptureMouseUnlessPopupClose_get(swigCPtr);
      return ret;
    } 
  }

  public ImVec2 MousePosPrev {
    set {
      ImGuiPINVOKE.ImGuiIO_MousePosPrev_set(swigCPtr, ImVec2.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = ImGuiPINVOKE.ImGuiIO_MousePosPrev_get(swigCPtr);
      ImVec2 ret = (cPtr == global::System.IntPtr.Zero) ? null : new ImVec2(cPtr, false);
      return ret;
    } 
  }

  public ImVec2 MouseClickedPos {
    set {
      ImGuiPINVOKE.ImGuiIO_MouseClickedPos_set(swigCPtr, ImVec2.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = ImGuiPINVOKE.ImGuiIO_MouseClickedPos_get(swigCPtr);
      ImVec2 ret = (cPtr == global::System.IntPtr.Zero) ? null : new ImVec2(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_double MouseClickedTime {
    set {
      ImGuiPINVOKE.ImGuiIO_MouseClickedTime_set(swigCPtr, SWIGTYPE_p_double.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = ImGuiPINVOKE.ImGuiIO_MouseClickedTime_get(swigCPtr);
      SWIGTYPE_p_double ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_double(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_bool MouseClicked {
    set {
      ImGuiPINVOKE.ImGuiIO_MouseClicked_set(swigCPtr, SWIGTYPE_p_bool.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = ImGuiPINVOKE.ImGuiIO_MouseClicked_get(swigCPtr);
      SWIGTYPE_p_bool ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_bool(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_bool MouseDoubleClicked {
    set {
      ImGuiPINVOKE.ImGuiIO_MouseDoubleClicked_set(swigCPtr, SWIGTYPE_p_bool.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = ImGuiPINVOKE.ImGuiIO_MouseDoubleClicked_get(swigCPtr);
      SWIGTYPE_p_bool ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_bool(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_unsigned_short MouseClickedCount {
    set {
      ImGuiPINVOKE.ImGuiIO_MouseClickedCount_set(swigCPtr, SWIGTYPE_p_unsigned_short.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = ImGuiPINVOKE.ImGuiIO_MouseClickedCount_get(swigCPtr);
      SWIGTYPE_p_unsigned_short ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_unsigned_short(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_unsigned_short MouseClickedLastCount {
    set {
      ImGuiPINVOKE.ImGuiIO_MouseClickedLastCount_set(swigCPtr, SWIGTYPE_p_unsigned_short.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = ImGuiPINVOKE.ImGuiIO_MouseClickedLastCount_get(swigCPtr);
      SWIGTYPE_p_unsigned_short ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_unsigned_short(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_bool MouseReleased {
    set {
      ImGuiPINVOKE.ImGuiIO_MouseReleased_set(swigCPtr, SWIGTYPE_p_bool.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = ImGuiPINVOKE.ImGuiIO_MouseReleased_get(swigCPtr);
      SWIGTYPE_p_bool ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_bool(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_bool MouseDownOwned {
    set {
      ImGuiPINVOKE.ImGuiIO_MouseDownOwned_set(swigCPtr, SWIGTYPE_p_bool.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = ImGuiPINVOKE.ImGuiIO_MouseDownOwned_get(swigCPtr);
      SWIGTYPE_p_bool ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_bool(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_bool MouseDownOwnedUnlessPopupClose {
    set {
      ImGuiPINVOKE.ImGuiIO_MouseDownOwnedUnlessPopupClose_set(swigCPtr, SWIGTYPE_p_bool.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = ImGuiPINVOKE.ImGuiIO_MouseDownOwnedUnlessPopupClose_get(swigCPtr);
      SWIGTYPE_p_bool ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_bool(cPtr, false);
      return ret;
    } 
  }

  public bool MouseWheelRequestAxisSwap {
    set {
      ImGuiPINVOKE.ImGuiIO_MouseWheelRequestAxisSwap_set(swigCPtr, value);
    } 
    get {
      bool ret = ImGuiPINVOKE.ImGuiIO_MouseWheelRequestAxisSwap_get(swigCPtr);
      return ret;
    } 
  }

  public bool MouseCtrlLeftAsRightClick {
    set {
      ImGuiPINVOKE.ImGuiIO_MouseCtrlLeftAsRightClick_set(swigCPtr, value);
    } 
    get {
      bool ret = ImGuiPINVOKE.ImGuiIO_MouseCtrlLeftAsRightClick_get(swigCPtr);
      return ret;
    } 
  }

  public SWIGTYPE_p_float MouseDownDuration {
    set {
      ImGuiPINVOKE.ImGuiIO_MouseDownDuration_set(swigCPtr, SWIGTYPE_p_float.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = ImGuiPINVOKE.ImGuiIO_MouseDownDuration_get(swigCPtr);
      SWIGTYPE_p_float ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_float(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_float MouseDownDurationPrev {
    set {
      ImGuiPINVOKE.ImGuiIO_MouseDownDurationPrev_set(swigCPtr, SWIGTYPE_p_float.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = ImGuiPINVOKE.ImGuiIO_MouseDownDurationPrev_get(swigCPtr);
      SWIGTYPE_p_float ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_float(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_float MouseDragMaxDistanceSqr {
    set {
      ImGuiPINVOKE.ImGuiIO_MouseDragMaxDistanceSqr_set(swigCPtr, SWIGTYPE_p_float.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = ImGuiPINVOKE.ImGuiIO_MouseDragMaxDistanceSqr_get(swigCPtr);
      SWIGTYPE_p_float ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_float(cPtr, false);
      return ret;
    } 
  }

  public float PenPressure {
    set {
      ImGuiPINVOKE.ImGuiIO_PenPressure_set(swigCPtr, value);
    } 
    get {
      float ret = ImGuiPINVOKE.ImGuiIO_PenPressure_get(swigCPtr);
      return ret;
    } 
  }

  public bool AppFocusLost {
    set {
      ImGuiPINVOKE.ImGuiIO_AppFocusLost_set(swigCPtr, value);
    } 
    get {
      bool ret = ImGuiPINVOKE.ImGuiIO_AppFocusLost_get(swigCPtr);
      return ret;
    } 
  }

  public bool AppAcceptingEvents {
    set {
      ImGuiPINVOKE.ImGuiIO_AppAcceptingEvents_set(swigCPtr, value);
    } 
    get {
      bool ret = ImGuiPINVOKE.ImGuiIO_AppAcceptingEvents_get(swigCPtr);
      return ret;
    } 
  }

  public sbyte BackendUsingLegacyKeyArrays {
    set {
      ImGuiPINVOKE.ImGuiIO_BackendUsingLegacyKeyArrays_set(swigCPtr, value);
    } 
    get {
      sbyte ret = ImGuiPINVOKE.ImGuiIO_BackendUsingLegacyKeyArrays_get(swigCPtr);
      return ret;
    } 
  }

  public bool BackendUsingLegacyNavInputArray {
    set {
      ImGuiPINVOKE.ImGuiIO_BackendUsingLegacyNavInputArray_set(swigCPtr, value);
    } 
    get {
      bool ret = ImGuiPINVOKE.ImGuiIO_BackendUsingLegacyNavInputArray_get(swigCPtr);
      return ret;
    } 
  }

  public ushort InputQueueSurrogate {
    set {
      ImGuiPINVOKE.ImGuiIO_InputQueueSurrogate_set(swigCPtr, value);
    } 
    get {
      ushort ret = ImGuiPINVOKE.ImGuiIO_InputQueueSurrogate_get(swigCPtr);
      return ret;
    } 
  }

  public SWIGTYPE_p_ImVectorT_unsigned_short_t InputQueueCharacters {
    set {
      ImGuiPINVOKE.ImGuiIO_InputQueueCharacters_set(swigCPtr, SWIGTYPE_p_ImVectorT_unsigned_short_t.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = ImGuiPINVOKE.ImGuiIO_InputQueueCharacters_get(swigCPtr);
      SWIGTYPE_p_ImVectorT_unsigned_short_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_ImVectorT_unsigned_short_t(cPtr, false);
      return ret;
    } 
  }

  public ImGuiIO() : this(ImGuiPINVOKE.new_ImGuiIO(), true) {
  }

}

}
