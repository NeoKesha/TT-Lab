//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.2.1
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace org.ogre {

public class ImGuiInputTextCallbackData : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal ImGuiInputTextCallbackData(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ImGuiInputTextCallbackData obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(ImGuiInputTextCallbackData obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~ImGuiInputTextCallbackData() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          ImGuiPINVOKE.delete_ImGuiInputTextCallbackData(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public SWIGTYPE_p_ImGuiContext Ctx {
    set {
      ImGuiPINVOKE.ImGuiInputTextCallbackData_Ctx_set(swigCPtr, SWIGTYPE_p_ImGuiContext.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = ImGuiPINVOKE.ImGuiInputTextCallbackData_Ctx_get(swigCPtr);
      SWIGTYPE_p_ImGuiContext ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_ImGuiContext(cPtr, false);
      return ret;
    } 
  }

  public int EventFlag {
    set {
      ImGuiPINVOKE.ImGuiInputTextCallbackData_EventFlag_set(swigCPtr, value);
    } 
    get {
      int ret = ImGuiPINVOKE.ImGuiInputTextCallbackData_EventFlag_get(swigCPtr);
      return ret;
    } 
  }

  public int Flags {
    set {
      ImGuiPINVOKE.ImGuiInputTextCallbackData_Flags_set(swigCPtr, value);
    } 
    get {
      int ret = ImGuiPINVOKE.ImGuiInputTextCallbackData_Flags_get(swigCPtr);
      return ret;
    } 
  }

  public SWIGTYPE_p_void UserData {
    set {
      ImGuiPINVOKE.ImGuiInputTextCallbackData_UserData_set(swigCPtr, SWIGTYPE_p_void.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = ImGuiPINVOKE.ImGuiInputTextCallbackData_UserData_get(swigCPtr);
      SWIGTYPE_p_void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
      return ret;
    } 
  }

  public ushort EventChar {
    set {
      ImGuiPINVOKE.ImGuiInputTextCallbackData_EventChar_set(swigCPtr, value);
    } 
    get {
      ushort ret = ImGuiPINVOKE.ImGuiInputTextCallbackData_EventChar_get(swigCPtr);
      return ret;
    } 
  }

  public ImGuiKey EventKey {
    set {
      ImGuiPINVOKE.ImGuiInputTextCallbackData_EventKey_set(swigCPtr, (int)value);
    } 
    get {
      ImGuiKey ret = (ImGuiKey)ImGuiPINVOKE.ImGuiInputTextCallbackData_EventKey_get(swigCPtr);
      return ret;
    } 
  }

  public string Buf {
    set {
      ImGuiPINVOKE.ImGuiInputTextCallbackData_Buf_set(swigCPtr, value);
    } 
    get {
      string ret = ImGuiPINVOKE.ImGuiInputTextCallbackData_Buf_get(swigCPtr);
      return ret;
    } 
  }

  public int BufTextLen {
    set {
      ImGuiPINVOKE.ImGuiInputTextCallbackData_BufTextLen_set(swigCPtr, value);
    } 
    get {
      int ret = ImGuiPINVOKE.ImGuiInputTextCallbackData_BufTextLen_get(swigCPtr);
      return ret;
    } 
  }

  public int BufSize {
    set {
      ImGuiPINVOKE.ImGuiInputTextCallbackData_BufSize_set(swigCPtr, value);
    } 
    get {
      int ret = ImGuiPINVOKE.ImGuiInputTextCallbackData_BufSize_get(swigCPtr);
      return ret;
    } 
  }

  public bool BufDirty {
    set {
      ImGuiPINVOKE.ImGuiInputTextCallbackData_BufDirty_set(swigCPtr, value);
    } 
    get {
      bool ret = ImGuiPINVOKE.ImGuiInputTextCallbackData_BufDirty_get(swigCPtr);
      return ret;
    } 
  }

  public int CursorPos {
    set {
      ImGuiPINVOKE.ImGuiInputTextCallbackData_CursorPos_set(swigCPtr, value);
    } 
    get {
      int ret = ImGuiPINVOKE.ImGuiInputTextCallbackData_CursorPos_get(swigCPtr);
      return ret;
    } 
  }

  public int SelectionStart {
    set {
      ImGuiPINVOKE.ImGuiInputTextCallbackData_SelectionStart_set(swigCPtr, value);
    } 
    get {
      int ret = ImGuiPINVOKE.ImGuiInputTextCallbackData_SelectionStart_get(swigCPtr);
      return ret;
    } 
  }

  public int SelectionEnd {
    set {
      ImGuiPINVOKE.ImGuiInputTextCallbackData_SelectionEnd_set(swigCPtr, value);
    } 
    get {
      int ret = ImGuiPINVOKE.ImGuiInputTextCallbackData_SelectionEnd_get(swigCPtr);
      return ret;
    } 
  }

  public ImGuiInputTextCallbackData() : this(ImGuiPINVOKE.new_ImGuiInputTextCallbackData(), true) {
  }

  public void DeleteChars(int pos, int bytes_count) {
    ImGuiPINVOKE.ImGuiInputTextCallbackData_DeleteChars(swigCPtr, pos, bytes_count);
  }

  public void InsertChars(int pos, string text, string text_end) {
    ImGuiPINVOKE.ImGuiInputTextCallbackData_InsertChars__SWIG_0(swigCPtr, pos, text, text_end);
  }

  public void InsertChars(int pos, string text) {
    ImGuiPINVOKE.ImGuiInputTextCallbackData_InsertChars__SWIG_1(swigCPtr, pos, text);
  }

  public void SelectAll() {
    ImGuiPINVOKE.ImGuiInputTextCallbackData_SelectAll(swigCPtr);
  }

  public void ClearSelection() {
    ImGuiPINVOKE.ImGuiInputTextCallbackData_ClearSelection(swigCPtr);
  }

  public bool HasSelection() {
    bool ret = ImGuiPINVOKE.ImGuiInputTextCallbackData_HasSelection(swigCPtr);
    return ret;
  }

}

}
