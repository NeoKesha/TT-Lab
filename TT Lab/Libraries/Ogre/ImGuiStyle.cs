//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.2.1
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace org.ogre {

public class ImGuiStyle : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal ImGuiStyle(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ImGuiStyle obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(ImGuiStyle obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~ImGuiStyle() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          ImGuiPINVOKE.delete_ImGuiStyle(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public float Alpha {
    set {
      ImGuiPINVOKE.ImGuiStyle_Alpha_set(swigCPtr, value);
    } 
    get {
      float ret = ImGuiPINVOKE.ImGuiStyle_Alpha_get(swigCPtr);
      return ret;
    } 
  }

  public float DisabledAlpha {
    set {
      ImGuiPINVOKE.ImGuiStyle_DisabledAlpha_set(swigCPtr, value);
    } 
    get {
      float ret = ImGuiPINVOKE.ImGuiStyle_DisabledAlpha_get(swigCPtr);
      return ret;
    } 
  }

  public ImVec2 WindowPadding {
    set {
      ImGuiPINVOKE.ImGuiStyle_WindowPadding_set(swigCPtr, ImVec2.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = ImGuiPINVOKE.ImGuiStyle_WindowPadding_get(swigCPtr);
      ImVec2 ret = (cPtr == global::System.IntPtr.Zero) ? null : new ImVec2(cPtr, false);
      return ret;
    } 
  }

  public float WindowRounding {
    set {
      ImGuiPINVOKE.ImGuiStyle_WindowRounding_set(swigCPtr, value);
    } 
    get {
      float ret = ImGuiPINVOKE.ImGuiStyle_WindowRounding_get(swigCPtr);
      return ret;
    } 
  }

  public float WindowBorderSize {
    set {
      ImGuiPINVOKE.ImGuiStyle_WindowBorderSize_set(swigCPtr, value);
    } 
    get {
      float ret = ImGuiPINVOKE.ImGuiStyle_WindowBorderSize_get(swigCPtr);
      return ret;
    } 
  }

  public ImVec2 WindowMinSize {
    set {
      ImGuiPINVOKE.ImGuiStyle_WindowMinSize_set(swigCPtr, ImVec2.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = ImGuiPINVOKE.ImGuiStyle_WindowMinSize_get(swigCPtr);
      ImVec2 ret = (cPtr == global::System.IntPtr.Zero) ? null : new ImVec2(cPtr, false);
      return ret;
    } 
  }

  public ImVec2 WindowTitleAlign {
    set {
      ImGuiPINVOKE.ImGuiStyle_WindowTitleAlign_set(swigCPtr, ImVec2.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = ImGuiPINVOKE.ImGuiStyle_WindowTitleAlign_get(swigCPtr);
      ImVec2 ret = (cPtr == global::System.IntPtr.Zero) ? null : new ImVec2(cPtr, false);
      return ret;
    } 
  }

  public ImGuiDir WindowMenuButtonPosition {
    set {
      ImGuiPINVOKE.ImGuiStyle_WindowMenuButtonPosition_set(swigCPtr, (int)value);
    } 
    get {
      ImGuiDir ret = (ImGuiDir)ImGuiPINVOKE.ImGuiStyle_WindowMenuButtonPosition_get(swigCPtr);
      return ret;
    } 
  }

  public float ChildRounding {
    set {
      ImGuiPINVOKE.ImGuiStyle_ChildRounding_set(swigCPtr, value);
    } 
    get {
      float ret = ImGuiPINVOKE.ImGuiStyle_ChildRounding_get(swigCPtr);
      return ret;
    } 
  }

  public float ChildBorderSize {
    set {
      ImGuiPINVOKE.ImGuiStyle_ChildBorderSize_set(swigCPtr, value);
    } 
    get {
      float ret = ImGuiPINVOKE.ImGuiStyle_ChildBorderSize_get(swigCPtr);
      return ret;
    } 
  }

  public float PopupRounding {
    set {
      ImGuiPINVOKE.ImGuiStyle_PopupRounding_set(swigCPtr, value);
    } 
    get {
      float ret = ImGuiPINVOKE.ImGuiStyle_PopupRounding_get(swigCPtr);
      return ret;
    } 
  }

  public float PopupBorderSize {
    set {
      ImGuiPINVOKE.ImGuiStyle_PopupBorderSize_set(swigCPtr, value);
    } 
    get {
      float ret = ImGuiPINVOKE.ImGuiStyle_PopupBorderSize_get(swigCPtr);
      return ret;
    } 
  }

  public ImVec2 FramePadding {
    set {
      ImGuiPINVOKE.ImGuiStyle_FramePadding_set(swigCPtr, ImVec2.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = ImGuiPINVOKE.ImGuiStyle_FramePadding_get(swigCPtr);
      ImVec2 ret = (cPtr == global::System.IntPtr.Zero) ? null : new ImVec2(cPtr, false);
      return ret;
    } 
  }

  public float FrameRounding {
    set {
      ImGuiPINVOKE.ImGuiStyle_FrameRounding_set(swigCPtr, value);
    } 
    get {
      float ret = ImGuiPINVOKE.ImGuiStyle_FrameRounding_get(swigCPtr);
      return ret;
    } 
  }

  public float FrameBorderSize {
    set {
      ImGuiPINVOKE.ImGuiStyle_FrameBorderSize_set(swigCPtr, value);
    } 
    get {
      float ret = ImGuiPINVOKE.ImGuiStyle_FrameBorderSize_get(swigCPtr);
      return ret;
    } 
  }

  public ImVec2 ItemSpacing {
    set {
      ImGuiPINVOKE.ImGuiStyle_ItemSpacing_set(swigCPtr, ImVec2.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = ImGuiPINVOKE.ImGuiStyle_ItemSpacing_get(swigCPtr);
      ImVec2 ret = (cPtr == global::System.IntPtr.Zero) ? null : new ImVec2(cPtr, false);
      return ret;
    } 
  }

  public ImVec2 ItemInnerSpacing {
    set {
      ImGuiPINVOKE.ImGuiStyle_ItemInnerSpacing_set(swigCPtr, ImVec2.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = ImGuiPINVOKE.ImGuiStyle_ItemInnerSpacing_get(swigCPtr);
      ImVec2 ret = (cPtr == global::System.IntPtr.Zero) ? null : new ImVec2(cPtr, false);
      return ret;
    } 
  }

  public ImVec2 CellPadding {
    set {
      ImGuiPINVOKE.ImGuiStyle_CellPadding_set(swigCPtr, ImVec2.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = ImGuiPINVOKE.ImGuiStyle_CellPadding_get(swigCPtr);
      ImVec2 ret = (cPtr == global::System.IntPtr.Zero) ? null : new ImVec2(cPtr, false);
      return ret;
    } 
  }

  public ImVec2 TouchExtraPadding {
    set {
      ImGuiPINVOKE.ImGuiStyle_TouchExtraPadding_set(swigCPtr, ImVec2.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = ImGuiPINVOKE.ImGuiStyle_TouchExtraPadding_get(swigCPtr);
      ImVec2 ret = (cPtr == global::System.IntPtr.Zero) ? null : new ImVec2(cPtr, false);
      return ret;
    } 
  }

  public float IndentSpacing {
    set {
      ImGuiPINVOKE.ImGuiStyle_IndentSpacing_set(swigCPtr, value);
    } 
    get {
      float ret = ImGuiPINVOKE.ImGuiStyle_IndentSpacing_get(swigCPtr);
      return ret;
    } 
  }

  public float ColumnsMinSpacing {
    set {
      ImGuiPINVOKE.ImGuiStyle_ColumnsMinSpacing_set(swigCPtr, value);
    } 
    get {
      float ret = ImGuiPINVOKE.ImGuiStyle_ColumnsMinSpacing_get(swigCPtr);
      return ret;
    } 
  }

  public float ScrollbarSize {
    set {
      ImGuiPINVOKE.ImGuiStyle_ScrollbarSize_set(swigCPtr, value);
    } 
    get {
      float ret = ImGuiPINVOKE.ImGuiStyle_ScrollbarSize_get(swigCPtr);
      return ret;
    } 
  }

  public float ScrollbarRounding {
    set {
      ImGuiPINVOKE.ImGuiStyle_ScrollbarRounding_set(swigCPtr, value);
    } 
    get {
      float ret = ImGuiPINVOKE.ImGuiStyle_ScrollbarRounding_get(swigCPtr);
      return ret;
    } 
  }

  public float GrabMinSize {
    set {
      ImGuiPINVOKE.ImGuiStyle_GrabMinSize_set(swigCPtr, value);
    } 
    get {
      float ret = ImGuiPINVOKE.ImGuiStyle_GrabMinSize_get(swigCPtr);
      return ret;
    } 
  }

  public float GrabRounding {
    set {
      ImGuiPINVOKE.ImGuiStyle_GrabRounding_set(swigCPtr, value);
    } 
    get {
      float ret = ImGuiPINVOKE.ImGuiStyle_GrabRounding_get(swigCPtr);
      return ret;
    } 
  }

  public float LogSliderDeadzone {
    set {
      ImGuiPINVOKE.ImGuiStyle_LogSliderDeadzone_set(swigCPtr, value);
    } 
    get {
      float ret = ImGuiPINVOKE.ImGuiStyle_LogSliderDeadzone_get(swigCPtr);
      return ret;
    } 
  }

  public float TabRounding {
    set {
      ImGuiPINVOKE.ImGuiStyle_TabRounding_set(swigCPtr, value);
    } 
    get {
      float ret = ImGuiPINVOKE.ImGuiStyle_TabRounding_get(swigCPtr);
      return ret;
    } 
  }

  public float TabBorderSize {
    set {
      ImGuiPINVOKE.ImGuiStyle_TabBorderSize_set(swigCPtr, value);
    } 
    get {
      float ret = ImGuiPINVOKE.ImGuiStyle_TabBorderSize_get(swigCPtr);
      return ret;
    } 
  }

  public float TabMinWidthForCloseButton {
    set {
      ImGuiPINVOKE.ImGuiStyle_TabMinWidthForCloseButton_set(swigCPtr, value);
    } 
    get {
      float ret = ImGuiPINVOKE.ImGuiStyle_TabMinWidthForCloseButton_get(swigCPtr);
      return ret;
    } 
  }

  public float TabBarBorderSize {
    set {
      ImGuiPINVOKE.ImGuiStyle_TabBarBorderSize_set(swigCPtr, value);
    } 
    get {
      float ret = ImGuiPINVOKE.ImGuiStyle_TabBarBorderSize_get(swigCPtr);
      return ret;
    } 
  }

  public float TabBarOverlineSize {
    set {
      ImGuiPINVOKE.ImGuiStyle_TabBarOverlineSize_set(swigCPtr, value);
    } 
    get {
      float ret = ImGuiPINVOKE.ImGuiStyle_TabBarOverlineSize_get(swigCPtr);
      return ret;
    } 
  }

  public float TableAngledHeadersAngle {
    set {
      ImGuiPINVOKE.ImGuiStyle_TableAngledHeadersAngle_set(swigCPtr, value);
    } 
    get {
      float ret = ImGuiPINVOKE.ImGuiStyle_TableAngledHeadersAngle_get(swigCPtr);
      return ret;
    } 
  }

  public ImVec2 TableAngledHeadersTextAlign {
    set {
      ImGuiPINVOKE.ImGuiStyle_TableAngledHeadersTextAlign_set(swigCPtr, ImVec2.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = ImGuiPINVOKE.ImGuiStyle_TableAngledHeadersTextAlign_get(swigCPtr);
      ImVec2 ret = (cPtr == global::System.IntPtr.Zero) ? null : new ImVec2(cPtr, false);
      return ret;
    } 
  }

  public ImGuiDir ColorButtonPosition {
    set {
      ImGuiPINVOKE.ImGuiStyle_ColorButtonPosition_set(swigCPtr, (int)value);
    } 
    get {
      ImGuiDir ret = (ImGuiDir)ImGuiPINVOKE.ImGuiStyle_ColorButtonPosition_get(swigCPtr);
      return ret;
    } 
  }

  public ImVec2 ButtonTextAlign {
    set {
      ImGuiPINVOKE.ImGuiStyle_ButtonTextAlign_set(swigCPtr, ImVec2.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = ImGuiPINVOKE.ImGuiStyle_ButtonTextAlign_get(swigCPtr);
      ImVec2 ret = (cPtr == global::System.IntPtr.Zero) ? null : new ImVec2(cPtr, false);
      return ret;
    } 
  }

  public ImVec2 SelectableTextAlign {
    set {
      ImGuiPINVOKE.ImGuiStyle_SelectableTextAlign_set(swigCPtr, ImVec2.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = ImGuiPINVOKE.ImGuiStyle_SelectableTextAlign_get(swigCPtr);
      ImVec2 ret = (cPtr == global::System.IntPtr.Zero) ? null : new ImVec2(cPtr, false);
      return ret;
    } 
  }

  public float SeparatorTextBorderSize {
    set {
      ImGuiPINVOKE.ImGuiStyle_SeparatorTextBorderSize_set(swigCPtr, value);
    } 
    get {
      float ret = ImGuiPINVOKE.ImGuiStyle_SeparatorTextBorderSize_get(swigCPtr);
      return ret;
    } 
  }

  public ImVec2 SeparatorTextAlign {
    set {
      ImGuiPINVOKE.ImGuiStyle_SeparatorTextAlign_set(swigCPtr, ImVec2.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = ImGuiPINVOKE.ImGuiStyle_SeparatorTextAlign_get(swigCPtr);
      ImVec2 ret = (cPtr == global::System.IntPtr.Zero) ? null : new ImVec2(cPtr, false);
      return ret;
    } 
  }

  public ImVec2 SeparatorTextPadding {
    set {
      ImGuiPINVOKE.ImGuiStyle_SeparatorTextPadding_set(swigCPtr, ImVec2.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = ImGuiPINVOKE.ImGuiStyle_SeparatorTextPadding_get(swigCPtr);
      ImVec2 ret = (cPtr == global::System.IntPtr.Zero) ? null : new ImVec2(cPtr, false);
      return ret;
    } 
  }

  public ImVec2 DisplayWindowPadding {
    set {
      ImGuiPINVOKE.ImGuiStyle_DisplayWindowPadding_set(swigCPtr, ImVec2.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = ImGuiPINVOKE.ImGuiStyle_DisplayWindowPadding_get(swigCPtr);
      ImVec2 ret = (cPtr == global::System.IntPtr.Zero) ? null : new ImVec2(cPtr, false);
      return ret;
    } 
  }

  public ImVec2 DisplaySafeAreaPadding {
    set {
      ImGuiPINVOKE.ImGuiStyle_DisplaySafeAreaPadding_set(swigCPtr, ImVec2.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = ImGuiPINVOKE.ImGuiStyle_DisplaySafeAreaPadding_get(swigCPtr);
      ImVec2 ret = (cPtr == global::System.IntPtr.Zero) ? null : new ImVec2(cPtr, false);
      return ret;
    } 
  }

  public float MouseCursorScale {
    set {
      ImGuiPINVOKE.ImGuiStyle_MouseCursorScale_set(swigCPtr, value);
    } 
    get {
      float ret = ImGuiPINVOKE.ImGuiStyle_MouseCursorScale_get(swigCPtr);
      return ret;
    } 
  }

  public bool AntiAliasedLines {
    set {
      ImGuiPINVOKE.ImGuiStyle_AntiAliasedLines_set(swigCPtr, value);
    } 
    get {
      bool ret = ImGuiPINVOKE.ImGuiStyle_AntiAliasedLines_get(swigCPtr);
      return ret;
    } 
  }

  public bool AntiAliasedLinesUseTex {
    set {
      ImGuiPINVOKE.ImGuiStyle_AntiAliasedLinesUseTex_set(swigCPtr, value);
    } 
    get {
      bool ret = ImGuiPINVOKE.ImGuiStyle_AntiAliasedLinesUseTex_get(swigCPtr);
      return ret;
    } 
  }

  public bool AntiAliasedFill {
    set {
      ImGuiPINVOKE.ImGuiStyle_AntiAliasedFill_set(swigCPtr, value);
    } 
    get {
      bool ret = ImGuiPINVOKE.ImGuiStyle_AntiAliasedFill_get(swigCPtr);
      return ret;
    } 
  }

  public float CurveTessellationTol {
    set {
      ImGuiPINVOKE.ImGuiStyle_CurveTessellationTol_set(swigCPtr, value);
    } 
    get {
      float ret = ImGuiPINVOKE.ImGuiStyle_CurveTessellationTol_get(swigCPtr);
      return ret;
    } 
  }

  public float CircleTessellationMaxError {
    set {
      ImGuiPINVOKE.ImGuiStyle_CircleTessellationMaxError_set(swigCPtr, value);
    } 
    get {
      float ret = ImGuiPINVOKE.ImGuiStyle_CircleTessellationMaxError_get(swigCPtr);
      return ret;
    } 
  }

  public ImVec4 Colors {
    set {
      ImGuiPINVOKE.ImGuiStyle_Colors_set(swigCPtr, ImVec4.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = ImGuiPINVOKE.ImGuiStyle_Colors_get(swigCPtr);
      ImVec4 ret = (cPtr == global::System.IntPtr.Zero) ? null : new ImVec4(cPtr, false);
      return ret;
    } 
  }

  public float HoverStationaryDelay {
    set {
      ImGuiPINVOKE.ImGuiStyle_HoverStationaryDelay_set(swigCPtr, value);
    } 
    get {
      float ret = ImGuiPINVOKE.ImGuiStyle_HoverStationaryDelay_get(swigCPtr);
      return ret;
    } 
  }

  public float HoverDelayShort {
    set {
      ImGuiPINVOKE.ImGuiStyle_HoverDelayShort_set(swigCPtr, value);
    } 
    get {
      float ret = ImGuiPINVOKE.ImGuiStyle_HoverDelayShort_get(swigCPtr);
      return ret;
    } 
  }

  public float HoverDelayNormal {
    set {
      ImGuiPINVOKE.ImGuiStyle_HoverDelayNormal_set(swigCPtr, value);
    } 
    get {
      float ret = ImGuiPINVOKE.ImGuiStyle_HoverDelayNormal_get(swigCPtr);
      return ret;
    } 
  }

  public int HoverFlagsForTooltipMouse {
    set {
      ImGuiPINVOKE.ImGuiStyle_HoverFlagsForTooltipMouse_set(swigCPtr, value);
    } 
    get {
      int ret = ImGuiPINVOKE.ImGuiStyle_HoverFlagsForTooltipMouse_get(swigCPtr);
      return ret;
    } 
  }

  public int HoverFlagsForTooltipNav {
    set {
      ImGuiPINVOKE.ImGuiStyle_HoverFlagsForTooltipNav_set(swigCPtr, value);
    } 
    get {
      int ret = ImGuiPINVOKE.ImGuiStyle_HoverFlagsForTooltipNav_get(swigCPtr);
      return ret;
    } 
  }

  public ImGuiStyle() : this(ImGuiPINVOKE.new_ImGuiStyle(), true) {
  }

  public void ScaleAllSizes(float scale_factor) {
    ImGuiPINVOKE.ImGuiStyle_ScaleAllSizes(swigCPtr, scale_factor);
  }

  public ImVec4 getColor(int i) {
    ImVec4 ret = new ImVec4(ImGuiPINVOKE.ImGuiStyle_getColor(swigCPtr, i), false);
    return ret;
  }

  public void setColor(int i, ImVec4 v) {
    ImGuiPINVOKE.ImGuiStyle_setColor(swigCPtr, i, ImVec4.getCPtr(v));
    if (ImGuiPINVOKE.SWIGPendingException.Pending) throw ImGuiPINVOKE.SWIGPendingException.Retrieve();
  }

}

}
