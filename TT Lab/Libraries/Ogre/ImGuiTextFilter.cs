//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.2.1
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace org.ogre {

public class ImGuiTextFilter : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal ImGuiTextFilter(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ImGuiTextFilter obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(ImGuiTextFilter obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~ImGuiTextFilter() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          ImGuiPINVOKE.delete_ImGuiTextFilter(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public ImGuiTextFilter(string default_filter) : this(ImGuiPINVOKE.new_ImGuiTextFilter__SWIG_0(default_filter), true) {
  }

  public ImGuiTextFilter() : this(ImGuiPINVOKE.new_ImGuiTextFilter__SWIG_1(), true) {
  }

  public bool Draw(string label, float width) {
    bool ret = ImGuiPINVOKE.ImGuiTextFilter_Draw__SWIG_0(swigCPtr, label, width);
    return ret;
  }

  public bool Draw(string label) {
    bool ret = ImGuiPINVOKE.ImGuiTextFilter_Draw__SWIG_1(swigCPtr, label);
    return ret;
  }

  public bool Draw() {
    bool ret = ImGuiPINVOKE.ImGuiTextFilter_Draw__SWIG_2(swigCPtr);
    return ret;
  }

  public bool PassFilter(string text, string text_end) {
    bool ret = ImGuiPINVOKE.ImGuiTextFilter_PassFilter__SWIG_0(swigCPtr, text, text_end);
    return ret;
  }

  public bool PassFilter(string text) {
    bool ret = ImGuiPINVOKE.ImGuiTextFilter_PassFilter__SWIG_1(swigCPtr, text);
    return ret;
  }

  public void Build() {
    ImGuiPINVOKE.ImGuiTextFilter_Build(swigCPtr);
  }

  public void Clear() {
    ImGuiPINVOKE.ImGuiTextFilter_Clear(swigCPtr);
  }

  public bool IsActive() {
    bool ret = ImGuiPINVOKE.ImGuiTextFilter_IsActive(swigCPtr);
    return ret;
  }

  public class ImGuiTextRange : global::System.IDisposable {
    private global::System.Runtime.InteropServices.HandleRef swigCPtr;
    protected bool swigCMemOwn;
  
    internal ImGuiTextRange(global::System.IntPtr cPtr, bool cMemoryOwn) {
      swigCMemOwn = cMemoryOwn;
      swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
    }
  
    internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ImGuiTextRange obj) {
      return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
    }
  
    internal static global::System.Runtime.InteropServices.HandleRef swigRelease(ImGuiTextRange obj) {
      if (obj != null) {
        if (!obj.swigCMemOwn)
          throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
        global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
        obj.swigCMemOwn = false;
        obj.Dispose();
        return ptr;
      } else {
        return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  
    ~ImGuiTextRange() {
      Dispose(false);
    }
  
    public void Dispose() {
      Dispose(true);
      global::System.GC.SuppressFinalize(this);
    }
  
    protected virtual void Dispose(bool disposing) {
      lock(this) {
        if (swigCPtr.Handle != global::System.IntPtr.Zero) {
          if (swigCMemOwn) {
            swigCMemOwn = false;
            ImGuiPINVOKE.delete_ImGuiTextFilter_ImGuiTextRange(swigCPtr);
          }
          swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
        }
      }
    }
  
    public string b {
      set {
        ImGuiPINVOKE.ImGuiTextFilter_ImGuiTextRange_b_set(swigCPtr, value);
      } 
      get {
        string ret = ImGuiPINVOKE.ImGuiTextFilter_ImGuiTextRange_b_get(swigCPtr);
        return ret;
      } 
    }
  
    public string e {
      set {
        ImGuiPINVOKE.ImGuiTextFilter_ImGuiTextRange_e_set(swigCPtr, value);
      } 
      get {
        string ret = ImGuiPINVOKE.ImGuiTextFilter_ImGuiTextRange_e_get(swigCPtr);
        return ret;
      } 
    }
  
    public ImGuiTextRange() : this(ImGuiPINVOKE.new_ImGuiTextFilter_ImGuiTextRange__SWIG_0(), true) {
    }
  
    public ImGuiTextRange(string _b, string _e) : this(ImGuiPINVOKE.new_ImGuiTextFilter_ImGuiTextRange__SWIG_1(_b, _e), true) {
    }
  
    public bool empty() {
      bool ret = ImGuiPINVOKE.ImGuiTextFilter_ImGuiTextRange_empty(swigCPtr);
      return ret;
    }
  
    public void split(char separator, SWIGTYPE_p_ImVectorT_ImGuiTextFilter__ImGuiTextRange_t out_) {
      ImGuiPINVOKE.ImGuiTextFilter_ImGuiTextRange_split(swigCPtr, separator, SWIGTYPE_p_ImVectorT_ImGuiTextFilter__ImGuiTextRange_t.getCPtr(out_));
    }
  
  }

  public string InputBuf {
    set {
      ImGuiPINVOKE.ImGuiTextFilter_InputBuf_set(swigCPtr, value);
    } 
    get {
      string ret = ImGuiPINVOKE.ImGuiTextFilter_InputBuf_get(swigCPtr);
      return ret;
    } 
  }

  public SWIGTYPE_p_ImVectorT_ImGuiTextFilter__ImGuiTextRange_t Filters {
    set {
      ImGuiPINVOKE.ImGuiTextFilter_Filters_set(swigCPtr, SWIGTYPE_p_ImVectorT_ImGuiTextFilter__ImGuiTextRange_t.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = ImGuiPINVOKE.ImGuiTextFilter_Filters_get(swigCPtr);
      SWIGTYPE_p_ImVectorT_ImGuiTextFilter__ImGuiTextRange_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_ImVectorT_ImGuiTextFilter__ImGuiTextRange_t(cPtr, false);
      return ret;
    } 
  }

  public int CountGrep {
    set {
      ImGuiPINVOKE.ImGuiTextFilter_CountGrep_set(swigCPtr, value);
    } 
    get {
      int ret = ImGuiPINVOKE.ImGuiTextFilter_CountGrep_get(swigCPtr);
      return ret;
    } 
  }

}

}
