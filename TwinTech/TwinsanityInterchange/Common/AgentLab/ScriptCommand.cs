using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Twinsanity.Libraries;
using Twinsanity.TwinsanityInterchange.Interfaces;

namespace Twinsanity.TwinsanityInterchange.Common.AgentLab
{
    public class ScriptCommand : ITwinSerializable
    {
        public UInt32 Bitfield;
        public UInt16 CommandIndex;
        public List<UInt32> Arguments;

        internal Boolean hasNext;

        public UInt32 CommandSize
        {
            get
            {
                return GetCommandSize(CommandIndex);
            }
        }

        public ScriptCommand()
        {
            Arguments = new List<UInt32>();
        }

        public int GetLength()
        {
            return 4 + Arguments.Count * 4;
        }

        public void Read(BinaryReader reader, int length)
        {
            Bitfield = reader.ReadUInt32();
            CommandIndex = (UInt16)(Bitfield & 0xFFFF);
            Arguments.Clear();
            if (CommandSize - 0xC > 0)
            {
                var args = (CommandSize - 0xC) / 4;
                for (int i = 0; i < args; ++i)
                {
                    Arguments.Add(reader.ReadUInt32());
                }
            }
        }

        public void Read(BinaryReader reader, int length, IList<ScriptCommand> commands)
        {
            Read(reader, length);
            var hasNext = (Bitfield & 0x1000000) != 0;
            if (hasNext)
            {
                var com = new ScriptCommand();
                commands.Add(com);
                com.Read(reader, length, commands);
            }
        }

        public void Write(BinaryWriter writer)
        {
            UInt32 newBitfield = CommandIndex;
            if (hasNext)
            {
                newBitfield |= 0x1000000;
            }
            // In reality all Bitfields should be obsoleted and only used to construct
            // the member variables during Read only, but for unresearched stuff we need
            // to carry over the unknown bits to preserve consistency
            newBitfield |= (Bitfield & 0xFEFF0000);
            writer.Write(newBitfield);
            foreach (UInt32 arg in Arguments)
            {
                writer.Write(arg);
            }
        }

        public void WriteText(StreamWriter writer, Int32 tabs = 0)
        {
            AgentLabDefs defs = PS2MainScript.GetAgentLabDefs();
            StringUtils.WriteTabulated(writer, $"{MapCommand(CommandIndex, defs)}(", tabs);
            for (Int32 i = 0; i < Arguments.Count; ++i)
            {
                writer.Write($"{ToStringArgument(Arguments[i], i, CommandIndex, defs)}");
                if (i < Arguments.Count - 1)
                {
                    writer.Write(", ");
                }
            }
            writer.WriteLine($")");
        }

        private string MapCommand(UInt32 index, AgentLabDefs defs)
        {
            string str_index = index.ToString();
            if (defs.command_map.ContainsKey(str_index))
            {
                return defs.command_map[str_index].name;
            }
            else
            {
                return $"ById_{str_index}";
            }
        }

        private string ToStringArgument(UInt32 arg, Int32 pos, UInt32 index, AgentLabDefs defs)
        {
            string type = "hex";
            string str_index = index.ToString();
            if (defs.command_map.ContainsKey(str_index.ToString()))
            {
                List<string> types = defs.command_map[str_index].arguments;
                if (pos < types.Count)
                {
                    type = types[pos].ToLower();
                }
            }
            switch (type)
            {
                case "int32":
                    return BitConverter.ToInt32(BitConverter.GetBytes(arg), 0).ToString();
                case "int16":
                    return BitConverter.ToInt16(BitConverter.GetBytes(0xFFFF & arg),0).ToString();
                case "uint32":
                    return arg.ToString();
                case "uint16":
                    return (0xFFFF & arg).ToString();
                case "byte":
                    return (0xFF & arg).ToString();
                case "single":
                    return BitConverter.ToSingle(BitConverter.GetBytes(arg), 0).ToString(CultureInfo.InvariantCulture);
                case "hex":
                default:
                    return "0x"+arg.ToString("X8");
            }
        }

        private UInt32 ToArgumentString(string arg, Int32 pos, UInt32 index, AgentLabDefs defs)
        {
            String type = "hex";
            if (!arg.StartsWith("0x"))
            {
                if (pos < defs.command_map[index.ToString()].arguments.Count)
                {
                    type = defs.command_map[index.ToString()].arguments[pos];
                }
            }
            switch (type)
            {
                case "int32":
                    {
                        Int32 val = Convert.ToInt32(arg);
                        return BitConverter.ToUInt32(BitConverter.GetBytes(val), 0);
                    }
                case "int16":
                    {
                        Int16 val = Convert.ToInt16(arg);
                        return BitConverter.ToUInt32(BitConverter.GetBytes(val), 0);
                    }
                case "uint32":
                    {
                        UInt32 val = Convert.ToUInt32(arg);
                        return BitConverter.ToUInt32(BitConverter.GetBytes(val), 0);
                    }
                case "uint16":
                    {
                        UInt16 val = Convert.ToUInt16(arg);
                        return BitConverter.ToUInt16(BitConverter.GetBytes(val), 0);
                    }
                case "byte":
                    {
                        Byte val = Convert.ToByte(arg);
                        return BitConverter.ToUInt32(new byte[1] { val }, 0);
                    }
                case "single":
                    {
                        Single val = Convert.ToSingle(arg, CultureInfo.InvariantCulture);
                        return BitConverter.ToUInt32(BitConverter.GetBytes(val), 0);
                    }
                case "hex":
                default:
                    return Convert.ToUInt32(arg.Substring(2), 16);
            }
        }

        public void ReadText(String line)
        {
            AgentLabDefs defs = PS2MainScript.GetAgentLabDefs();
            Arguments.Clear();
            if (line.StartsWith("ById_"))
            {
                CommandIndex = UInt16.Parse(StringUtils.GetStringInBetween(line, "ById_","("));
            } else
            {
                String cmd_name = StringUtils.GetStringBefore(line, "(");
                CommandIndex = UInt16.Parse((defs.command_map.FirstOrDefault(x => x.Value.name == cmd_name).Key));
            }
            String[] args = StringUtils.GetStringInBetween(line, "(", ")").Split(',');
            for (Int32 i = 0; i < args.Length; ++i)
            {
                if (String.IsNullOrWhiteSpace(args[i]))
                {
                    continue;
                }
                Arguments.Add(ToArgumentString(args[i].Trim(),i,CommandIndex,defs));
            }
        }

        public static UInt32 GetCommandSize(UInt16 index)
        {
            if (index < 0 || index >= commandSizeMap.Length)
            {
                return 0;
            }
            return commandSizeMap[index];
        }

        static UInt32[] commandSizeMap = {
                        0x00, 0x80, 0x0C, 0x20, 0x10, 0x0C, 0x00, 0x0C, 0x30, 0x24, 0x30, 0x48, 0x94, 0x0C, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x00, 0x00, 0x00, 0x10, 0x10, 0x00, 0x00, 0x10, 0x10, 0x20, 0x00, 0x10,
                        0x00, 0x10, 0x10, 0x0C, 0x0C, 0x00, 0x00, 0x0C, 0x14, 0x00, 0x10, 0x00, 0x50, 0x10, 0x00, 0x30, 0x30, 0x30, 0x0C, 0x20, 0x0C, 0x0C, 0x1C, 0x40, 0x14, 0x10, 0x00, 0x10, 0x60, 0x0C, 0x20, 0x0C,
                        0x30, 0x1C, 0x0C, 0x10, 0x14, 0x18, 0x00, 0x0C, 0x50, 0x00, 0x10, 0x10, 0x30, 0x0C, 0x14, 0x10, 0x50, 0x0C, 0x94, 0x94, 0x0C, 0x10, 0x28, 0x1C, 0x20, 0x10, 0x10, 0x10, 0x10, 0x10, 0x30, 0x10,
                        0xC0, 0x0C, 0x0C, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x20, 0x10, 0x00, 0x60, 0x20, 0x0C, 0x0C, 0x30, 0x1C, 0x0C, 0x0C, 0x0C, 0x14, 0x14, 0x0C, 0x0C, 0x14, 0x10, 0x0C, 0x10, 0x20, 0x0C, 0x10,
                        0x0C, 0x0C, 0x1C, 0x0C, 0x10, 0x0C, 0x0C, 0x0C, 0x14, 0x14, 0x14, 0x10, 0x10, 0x10, 0x10, 0x0C, 0x0C, 0x10, 0x10, 0x0C, 0x1C, 0x14, 0x18, 0x0C, 0x1C, 0x20, 0x10, 0x10, 0x10, 0x10, 0x98, 0x0C,
                        0x0C, 0x0C, 0x14, 0x10, 0x18, 0x40, 0x10, 0x10, 0x30, 0x14, 0x18, 0x14, 0x10, 0x10, 0x0C, 0x0C, 0x14, 0x30, 0x30, 0x30, 0x14, 0x0C, 0x0C, 0x10, 0x10, 0x14, 0x0C, 0x1C, 0x24, 0x20, 0x24, 0x10,
                        0x10, 0x30, 0x14, 0x0C, 0x0C, 0x30, 0x18, 0x20, 0x18, 0x18, 0x0C, 0x10, 0x2C, 0x14, 0x0C, 0x0C, 0x10, 0x10, 0x10, 0x0C, 0x0C, 0x0C, 0x10, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                        0x14, 0x10, 0x40, 0x10, 0x10, 0x0C, 0x14, 0x0C, 0x0C, 0x14, 0x0C, 0x3C, 0x18, 0x40, 0x2C, 0x10, 0x10, 0x10, 0x20, 0x0C, 0x10, 0x10, 0x14, 0x0C, 0x10, 0x10, 0x0C, 0x1C, 0x24, 0x80, 0x0C, 0x24,
                        0x30, 0x48, 0x40, 0x00, 0x30, 0x50, 0x10, 0x0C, 0x0C, 0x10, 0x0C, 0x18, 0x0C, 0x40, 0x10, 0x18, 0x0C, 0x10, 0x0C, 0x40, 0x40, 0x40, 0x0C, 0x0C, 0x00, 0x10, 0x10, 0x10, 0x00, 0x18, 0x54, 0x14,
                        0x10, 0x1C, 0x10, 0x10, 0x20, 0x10, 0x4C, 0x54, 0x0C, 0x10, 0x10, 0x10, 0x0C, 0x10, 0x10, 0x3C, 0x10, 0x10, 0x14, 0x18, 0x18, 0x10, 0x0C, 0x0C, 0x0C, 0x0C, 0x24, 0x28, 0x0C, 0x10, 0x0C, 0x0C,
                        0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x10, 0x10, 0x10, 0x18, 0x0C, 0x10, 0x10, 0x0C, 0x10, 0x0C, 0x0C, 0x14, 0x0C, 0x0C, 0x14, 0x18, 0x10, 0x10, 0x10, 0x18, 0x14, 0x00, 0x10, 0x0C, 0x18, 0x10,
                        0x0C, 0x24, 0x24, 0x24, 0x24, 0x10, 0x00, 0x14, 0x10, 0x0C, 0x10, 0x10, 0x0C, 0x24, 0x0C, 0x28, 0x0C, 0x24, 0x28, 0x10, 0x10, 0x68, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, };

    }
}
